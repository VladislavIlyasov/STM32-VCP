
ADC-VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a470  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800a57c  0800a57c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a694  0800a694  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800a694  0800a694  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a694  0800a694  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a698  0800a698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800a69c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001300  20000224  0800a8c0  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001524  0800a8c0  00021524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170d8  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff1  00000000  00000000  00037325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c16a  00000000  00000000  0003d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c5d  00000000  00000000  0005989a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092789  00000000  00000000  000724f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005074  00000000  00000000  00104cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000224 	.word	0x20000224
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a564 	.word	0x0800a564

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000228 	.word	0x20000228
 8000148:	0800a564 	.word	0x0800a564

0800014c <BuffInit>:



struct queue queueIn, queueOut;

int BuffInit(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	//// Check this f



	queueIn.buffer      = malloc(128);
 8000150:	2080      	movs	r0, #128	; 0x80
 8000152:	f009 fd7d 	bl	8009c50 <malloc>
 8000156:	4603      	mov	r3, r0
 8000158:	461a      	mov	r2, r3
 800015a:	4b13      	ldr	r3, [pc, #76]	; (80001a8 <BuffInit+0x5c>)
 800015c:	601a      	str	r2, [r3, #0]
			queueIn.buffer_size = 128;
 800015e:	4b12      	ldr	r3, [pc, #72]	; (80001a8 <BuffInit+0x5c>)
 8000160:	2280      	movs	r2, #128	; 0x80
 8000162:	605a      	str	r2, [r3, #4]
			queueIn.head        = 0;
 8000164:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <BuffInit+0x5c>)
 8000166:	2200      	movs	r2, #0
 8000168:	609a      	str	r2, [r3, #8]
			queueIn.tail        = 0;
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <BuffInit+0x5c>)
 800016c:	2200      	movs	r2, #0
 800016e:	60da      	str	r2, [r3, #12]
			queueIn.bytes_avail = 0;
 8000170:	4b0d      	ldr	r3, [pc, #52]	; (80001a8 <BuffInit+0x5c>)
 8000172:	2200      	movs	r2, #0
 8000174:	611a      	str	r2, [r3, #16]

			queueOut.buffer      = malloc(256);
 8000176:	f44f 7080 	mov.w	r0, #256	; 0x100
 800017a:	f009 fd69 	bl	8009c50 <malloc>
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <BuffInit+0x60>)
 8000184:	601a      	str	r2, [r3, #0]
			queueOut.buffer_size = 256;
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <BuffInit+0x60>)
 8000188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800018c:	605a      	str	r2, [r3, #4]
			queueOut.head        = 0;
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <BuffInit+0x60>)
 8000190:	2200      	movs	r2, #0
 8000192:	609a      	str	r2, [r3, #8]
			queueOut.tail        = 0;
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <BuffInit+0x60>)
 8000196:	2200      	movs	r2, #0
 8000198:	60da      	str	r2, [r3, #12]
			queueOut.bytes_avail = 0;
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <BuffInit+0x60>)
 800019c:	2200      	movs	r2, #0
 800019e:	611a      	str	r2, [r3, #16]

}
 80001a0:	bf00      	nop
 80001a2:	4618      	mov	r0, r3
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000240 	.word	0x20000240
 80001ac:	20000254 	.word	0x20000254

080001b0 <put>:


int put(queue_t *q, uint8_t *data, size_t size) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	607a      	str	r2, [r7, #4]
    if(q->buffer_size - q->bytes_avail < size){
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	685a      	ldr	r2, [r3, #4]
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	691b      	ldr	r3, [r3, #16]
 80001c4:	1ad3      	subs	r3, r2, r3
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d901      	bls.n	80001d0 <put+0x20>
        return 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	e034      	b.n	800023a <put+0x8a>
    }
const size_t part1 = min(size,q->buffer_size - q->tail);
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	685a      	ldr	r2, [r3, #4]
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	1ad3      	subs	r3, r2, r3
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	4293      	cmp	r3, r2
 80001de:	bf28      	it	cs
 80001e0:	4613      	movcs	r3, r2
 80001e2:	617b      	str	r3, [r7, #20]
const size_t part2 = size - part1;
 80001e4:	687a      	ldr	r2, [r7, #4]
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	1ad3      	subs	r3, r2, r3
 80001ea:	613b      	str	r3, [r7, #16]

memcpy(q->buffer + q->tail, data,         part1);
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	4413      	add	r3, r2
 80001f6:	697a      	ldr	r2, [r7, #20]
 80001f8:	68b9      	ldr	r1, [r7, #8]
 80001fa:	4618      	mov	r0, r3
 80001fc:	f009 fd30 	bl	8009c60 <memcpy>
memcpy(q->buffer,           data + part1, part2);
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	6818      	ldr	r0, [r3, #0]
 8000204:	68ba      	ldr	r2, [r7, #8]
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	4413      	add	r3, r2
 800020a:	693a      	ldr	r2, [r7, #16]
 800020c:	4619      	mov	r1, r3
 800020e:	f009 fd27 	bl	8009c60 <memcpy>

q->tail = (q->tail + size) % q->buffer_size;
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	68da      	ldr	r2, [r3, #12]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	6852      	ldr	r2, [r2, #4]
 800021e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000222:	fb01 f202 	mul.w	r2, r1, r2
 8000226:	1a9a      	subs	r2, r3, r2
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	60da      	str	r2, [r3, #12]
q->bytes_avail += size;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	691a      	ldr	r2, [r3, #16]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	441a      	add	r2, r3
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	611a      	str	r2, [r3, #16]
return 1;
 8000238:	2301      	movs	r3, #1

}
 800023a:	4618      	mov	r0, r3
 800023c:	3718      	adds	r7, #24
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <get>:



int get(queue_t *q, uint8_t *data, size_t size) {
 8000242:	b580      	push	{r7, lr}
 8000244:	b086      	sub	sp, #24
 8000246:	af00      	add	r7, sp, #0
 8000248:	60f8      	str	r0, [r7, #12]
 800024a:	60b9      	str	r1, [r7, #8]
 800024c:	607a      	str	r2, [r7, #4]
    if(q->bytes_avail < size){
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	429a      	cmp	r2, r3
 8000256:	d901      	bls.n	800025c <get+0x1a>
        return 0;
 8000258:	2300      	movs	r3, #0
 800025a:	e034      	b.n	80002c6 <get+0x84>
    }
const size_t part1 = min(size, q->buffer_size - q->head);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	685a      	ldr	r2, [r3, #4]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	4293      	cmp	r3, r2
 800026a:	bf28      	it	cs
 800026c:	4613      	movcs	r3, r2
 800026e:	617b      	str	r3, [r7, #20]
const size_t part2 = size - part1;
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	613b      	str	r3, [r7, #16]

memcpy(data,         q->buffer + q->head, part1);
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4413      	add	r3, r2
 8000282:	697a      	ldr	r2, [r7, #20]
 8000284:	4619      	mov	r1, r3
 8000286:	68b8      	ldr	r0, [r7, #8]
 8000288:	f009 fcea 	bl	8009c60 <memcpy>
memcpy(data + part1, q->buffer,           part2);
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	18d0      	adds	r0, r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	693a      	ldr	r2, [r7, #16]
 8000298:	4619      	mov	r1, r3
 800029a:	f009 fce1 	bl	8009c60 <memcpy>

q->head = (q->head + size) % q->buffer_size;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	689a      	ldr	r2, [r3, #8]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80002ae:	fb01 f202 	mul.w	r2, r1, r2
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	609a      	str	r2, [r3, #8]
q->bytes_avail -= size;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	691a      	ldr	r2, [r3, #16]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	1ad2      	subs	r2, r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	611a      	str	r2, [r3, #16]
return 1;
 80002c4:	2301      	movs	r3, #1

}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <HAL_ADC_ConvCpltCallback>:
//  ADC_HandleTypeDef hadc1;
// TIM_HandleTypeDef* htim2;



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	if(hadc1->Instance == ADC1 ){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <HAL_ADC_ConvCpltCallback+0x78>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d12d      	bne.n	800033e <HAL_ADC_ConvCpltCallback+0x6e>

			//HAL_TIM_Base_Start_IT(&htim2);
			//     HAL_ADC_Start_DMA(&hadc1, (uint16_t*)&adc_2, 2);


		HAL_ADC_Stop_DMA(&hadc1);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 ffc7 	bl	8001278 <HAL_ADC_Stop_DMA>

			adc_buf[count]= adc_2[0];
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <HAL_ADC_ConvCpltCallback+0x7c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <HAL_ADC_ConvCpltCallback+0x80>)
 80002f0:	8812      	ldrh	r2, [r2, #0]
 80002f2:	b291      	uxth	r1, r2
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <HAL_ADC_ConvCpltCallback+0x84>)
 80002f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			adc_buf[count+1]= adc_2[1];
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <HAL_ADC_ConvCpltCallback+0x7c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3301      	adds	r3, #1
 8000300:	4a13      	ldr	r2, [pc, #76]	; (8000350 <HAL_ADC_ConvCpltCallback+0x80>)
 8000302:	8852      	ldrh	r2, [r2, #2]
 8000304:	b291      	uxth	r1, r2
 8000306:	4a13      	ldr	r2, [pc, #76]	; (8000354 <HAL_ADC_ConvCpltCallback+0x84>)
 8000308:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			count ++;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_ADC_ConvCpltCallback+0x7c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000314:	6013      	str	r3, [r2, #0]
			count ++;
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <HAL_ADC_ConvCpltCallback+0x7c>)
 800031e:	6013      	str	r3, [r2, #0]

		if(count==20) {
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b14      	cmp	r3, #20
 8000326:	d10a      	bne.n	800033e <HAL_ADC_ConvCpltCallback+0x6e>
			HAL_ADC_Stop_DMA(hadc1); ADC_Result(hadc1); count =0;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 ffa4 	bl	8001278 <HAL_ADC_Stop_DMA>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f820 	bl	8000378 <ADC_Result>
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <HAL_ADC_ConvCpltCallback+0x7c>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
		}


	 }
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40012400 	.word	0x40012400
 800034c:	200002a4 	.word	0x200002a4
 8000350:	20000290 	.word	0x20000290
 8000354:	20000268 	.word	0x20000268

08000358 <ADC_Start>:
void ADC_Start(ADC_HandleTypeDef* hadc1){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start_DMA(hadc1, (uint16_t*) &adc_2, 2);
 8000360:	2202      	movs	r2, #2
 8000362:	4904      	ldr	r1, [pc, #16]	; (8000374 <ADC_Start+0x1c>)
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f000 fea9 	bl	80010bc <HAL_ADC_Start_DMA>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000290 	.word	0x20000290

08000378 <ADC_Result>:


void ADC_Result(ADC_HandleTypeDef* hadc1){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

	HAL_ADC_Stop_DMA(hadc1); // это необязательно
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f000 ff79 	bl	8001278 <HAL_ADC_Stop_DMA>
//HAL_TIM_Base_Stop_IT(&htim2);

	int AdcResult = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]

	for (int a =0; a<20; a++){
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	e00a      	b.n	80003a6 <ADC_Result+0x2e>

		AdcResult += adc_buf[a];
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <ADC_Result+0x74>)
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000398:	461a      	mov	r2, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	4413      	add	r3, r2
 800039e:	60fb      	str	r3, [r7, #12]
	for (int a =0; a<20; a++){
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	2b13      	cmp	r3, #19
 80003aa:	ddf1      	ble.n	8000390 <ADC_Result+0x18>


	}

	AdcResult = AdcResult/20;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	4a10      	ldr	r2, [pc, #64]	; (80003f0 <ADC_Result+0x78>)
 80003b0:	fb82 1203 	smull	r1, r2, r2, r3
 80003b4:	10d2      	asrs	r2, r2, #3
 80003b6:	17db      	asrs	r3, r3, #31
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	60fb      	str	r3, [r7, #12]

	 //  sprintf (str, "\r\n ADC %d %d ", adc_2[0], adc_2[1]);
	sprintf (str, "\r\n ADC %d ", AdcResult);
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <ADC_Result+0x7c>)
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <ADC_Result+0x80>)
 80003c2:	f009 fd4f 	bl	8009e64 <siprintf>
				  		   adc_2[0]=0;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <ADC_Result+0x84>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	801a      	strh	r2, [r3, #0]
				  		   adc_2[1]=0;
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <ADC_Result+0x84>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	805a      	strh	r2, [r3, #2]



	 // BusyFlag = CDC_Transmit_FS(str,11);
	  OutputStack(str,11);
 80003d2:	210b      	movs	r1, #11
 80003d4:	4808      	ldr	r0, [pc, #32]	; (80003f8 <ADC_Result+0x80>)
 80003d6:	f000 fb61 	bl	8000a9c <OutputStack>

	 str[16]= " ";
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <ADC_Result+0x88>)
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <ADC_Result+0x80>)
 80003e0:	741a      	strb	r2, [r3, #16]

//	 HAL_TIM_Base_Start_IT(&htim2);
	  //	 HAL_ADC_Start_DMA(&hadc1, (uint16_t*)&adc_2, 2);
}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000268 	.word	0x20000268
 80003f0:	66666667 	.word	0x66666667
 80003f4:	0800a57c 	.word	0x0800a57c
 80003f8:	20000294 	.word	0x20000294
 80003fc:	20000290 	.word	0x20000290
 8000400:	0800a588 	.word	0x0800a588

08000404 <ADCstop>:




void ADCstop(ADC_HandleTypeDef* hadc1,TIM_HandleTypeDef* htim2 ){
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]

	HAL_ADC_Stop_DMA(hadc1);
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f000 ff32 	bl	8001278 <HAL_ADC_Stop_DMA>
    HAL_TIM_Base_Stop_IT(htim2);
 8000414:	6838      	ldr	r0, [r7, #0]
 8000416:	f004 fa6b 	bl	80048f0 <HAL_TIM_Base_Stop_IT>


}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <StartMenu>:
#include <stdio.h>

char Start_Menu_1[]= "\r\n STM32F103C8T6 \r\n v - version\r\n a - ADC start\r\n l - LED ON/OFF";


void StartMenu(void){
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0


	 OutputStack( Start_Menu_1,sizeof(Start_Menu_1) );
 8000428:	2141      	movs	r1, #65	; 0x41
 800042a:	4802      	ldr	r0, [pc, #8]	; (8000434 <StartMenu+0x10>)
 800042c:	f000 fb36 	bl	8000a9c <OutputStack>

	//BusyFlag = CDC_Transmit_FS(Start_Menu_1,sizeof(Start_Menu_1));


}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000000 	.word	0x20000000

08000438 <IfReceivedV>:


void IfReceivedV(void){
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0


	char str_V[23] = {0};
 800043e:	2300      	movs	r3, #0
 8000440:	603b      	str	r3, [r7, #0]
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	f8c3 200f 	str.w	r2, [r3, #15]
	sprintf (str_V, "\r\n %s %s", __DATE__ , __TIME__);
 8000452:	4638      	mov	r0, r7
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <IfReceivedV+0x38>)
 8000456:	4a07      	ldr	r2, [pc, #28]	; (8000474 <IfReceivedV+0x3c>)
 8000458:	4907      	ldr	r1, [pc, #28]	; (8000478 <IfReceivedV+0x40>)
 800045a:	f009 fd03 	bl	8009e64 <siprintf>
	//BusyFlag = CDC_Transmit_FS("\r\n"__DATE__ " " __TIME__ ,sizeof("\r\n"__DATE__ " " __TIME__ ));

	//BusyFlag = CDC_Transmit_FS(str_V,23);

	OutputStack(str_V,23 );
 800045e:	463b      	mov	r3, r7
 8000460:	2117      	movs	r1, #23
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fb1a 	bl	8000a9c <OutputStack>

}
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800a58c 	.word	0x0800a58c
 8000474:	0800a598 	.word	0x0800a598
 8000478:	0800a5a4 	.word	0x0800a5a4

0800047c <IfReceivedA>:


void IfReceivedA(TIM_HandleTypeDef* htim2){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]

	//HAL_ADC_Start_DMA(&hadc1, (uint16_t*) &adc_2, 2);

			//FlagStartADC =1;

	HAL_TIM_Base_Start_IT(htim2);
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f004 f9e1 	bl	800484c <HAL_TIM_Base_Start_IT>

}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <IfReceivedL>:



void IfReceivedL(void){
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
	  char Led_Off[] = "\r\n LED OFF";
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <IfReceivedL+0x5c>)
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80004a2:	c303      	stmia	r3!, {r0, r1}
 80004a4:	801a      	strh	r2, [r3, #0]
 80004a6:	3302      	adds	r3, #2
 80004a8:	0c12      	lsrs	r2, r2, #16
 80004aa:	701a      	strb	r2, [r3, #0]
	  char Led_On[] = "\r\n LED ON";
 80004ac:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <IfReceivedL+0x60>)
 80004ae:	463b      	mov	r3, r7
 80004b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80004b2:	c303      	stmia	r3!, {r0, r1}
 80004b4:	801a      	strh	r2, [r3, #0]

	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	480f      	ldr	r0, [pc, #60]	; (80004f8 <IfReceivedL+0x64>)
 80004bc:	f001 fefb 	bl	80022b6 <HAL_GPIO_TogglePin>
	   if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET ) {
 80004c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <IfReceivedL+0x64>)
 80004c6:	f001 fec7 	bl	8002258 <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d106      	bne.n	80004de <IfReceivedL+0x4a>


		   //BusyFlag =   CDC_Transmit_FS("\r\n LED OFF",sizeof("\r\n LED OFF"));

		   OutputStack(Led_Off,10 );
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	210a      	movs	r1, #10
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fae0 	bl	8000a9c <OutputStack>

		   //BusyFlag =  CDC_Transmit_FS("\r\n LED ON",sizeof("\r\n LED ON"));
		   OutputStack(Led_On,9 );
	   }

}
 80004dc:	e004      	b.n	80004e8 <IfReceivedL+0x54>
		   OutputStack(Led_On,9 );
 80004de:	463b      	mov	r3, r7
 80004e0:	2109      	movs	r1, #9
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fada 	bl	8000a9c <OutputStack>
}
 80004e8:	bf00      	nop
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	0800a5b0 	.word	0x0800a5b0
 80004f4:	0800a5bc 	.word	0x0800a5bc
 80004f8:	40011000 	.word	0x40011000

080004fc <button_state>:





void button_state(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000502:	2006      	movs	r0, #6
 8000504:	f001 fae1 	bl	8001aca <HAL_NVIC_DisableIRQ>
	 int btn_cnt =0;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]

	 char Led_Off[] = "\r\n LED OFF";
 800050c:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <button_state+0xa4>)
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	ca07      	ldmia	r2, {r0, r1, r2}
 8000514:	c303      	stmia	r3!, {r0, r1}
 8000516:	801a      	strh	r2, [r3, #0]
 8000518:	3302      	adds	r3, #2
 800051a:	0c12      	lsrs	r2, r2, #16
 800051c:	701a      	strb	r2, [r3, #0]
	 	  char Led_On[] = "\r\n LED ON";
 800051e:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <button_state+0xa8>)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	ca07      	ldmia	r2, {r0, r1, r2}
 8000524:	c303      	stmia	r3!, {r0, r1}
 8000526:	801a      	strh	r2, [r3, #0]

while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET){
 8000528:	e029      	b.n	800057e <button_state+0x82>
	btn_cnt++;
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3301      	adds	r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
	if( btn_cnt==12000){           /// TIME = 15 ms
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000536:	4293      	cmp	r3, r2
 8000538:	d121      	bne.n	800057e <button_state+0x82>
		 while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET){};
 800053a:	bf00      	nop
 800053c:	2101      	movs	r1, #1
 800053e:	481a      	ldr	r0, [pc, #104]	; (80005a8 <button_state+0xac>)
 8000540:	f001 fe8a 	bl	8002258 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b01      	cmp	r3, #1
 8000548:	d0f8      	beq.n	800053c <button_state+0x40>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <button_state+0xb0>)
 8000550:	f001 feb1 	bl	80022b6 <HAL_GPIO_TogglePin>

		 if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET )
 8000554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000558:	4814      	ldr	r0, [pc, #80]	; (80005ac <button_state+0xb0>)
 800055a:	f001 fe7d 	bl	8002258 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d106      	bne.n	8000572 <button_state+0x76>
		 	   {

			  // BusyFlag =   CDC_Transmit_FS("\r\n LED OFF",sizeof("\r\n LED OFF"));
			    OutputStack(Led_Off,10 );
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	210a      	movs	r1, #10
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fa96 	bl	8000a9c <OutputStack>
		 else {
			   //BusyFlag =  CDC_Transmit_FS("\r\n LED ON",sizeof("\r\n LED ON"));
			   OutputStack(Led_On,9 );
		 	  }

		 	break;
 8000570:	e00c      	b.n	800058c <button_state+0x90>
			   OutputStack(Led_On,9 );
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2109      	movs	r1, #9
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fa90 	bl	8000a9c <OutputStack>
		 	break;
 800057c:	e006      	b.n	800058c <button_state+0x90>
while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET){
 800057e:	2101      	movs	r1, #1
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <button_state+0xac>)
 8000582:	f001 fe69 	bl	8002258 <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d0ce      	beq.n	800052a <button_state+0x2e>
			}


	}

     btn_cnt=0;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
	 HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000590:	2006      	movs	r0, #6
 8000592:	f001 fa8c 	bl	8001aae <HAL_NVIC_EnableIRQ>
}
 8000596:	bf00      	nop
 8000598:	3720      	adds	r7, #32
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	0800a5b0 	.word	0x0800a5b0
 80005a4:	0800a5bc 	.word	0x0800a5bc
 80005a8:	40010c00 	.word	0x40010c00
 80005ac:	40011000 	.word	0x40011000

080005b0 <SystemClock_Config>:
extern TIM_HandleTypeDef htim2;
extern ADC_HandleTypeDef hadc1;


void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ba:	2228      	movs	r2, #40	; 0x28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f009 fb5c 	bl	8009c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	2301      	movs	r3, #1
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fb54 	bl	8003cb4 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000612:	f000 faa0 	bl	8000b56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800061e:	2390      	movs	r3, #144	; 0x90
 8000620:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2101      	movs	r1, #1
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fdc1 	bl	80041b8 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800063c:	f000 fa8b 	bl	8000b56 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000640:	2312      	movs	r3, #18
 8000642:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000644:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000648:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f003 ff34 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800065e:	f000 fa7a 	bl	8000b56 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <MX_GPIO_Init>:

 void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4b2e      	ldr	r3, [pc, #184]	; (800073c <MX_GPIO_Init+0xd0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a2d      	ldr	r2, [pc, #180]	; (800073c <MX_GPIO_Init+0xd0>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_GPIO_Init+0xd0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0310 	and.w	r3, r3, #16
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0xd0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a27      	ldr	r2, [pc, #156]	; (800073c <MX_GPIO_Init+0xd0>)
 800069e:	f043 0320 	orr.w	r3, r3, #32
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <MX_GPIO_Init+0xd0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_GPIO_Init+0xd0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <MX_GPIO_Init+0xd0>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_GPIO_Init+0xd0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_GPIO_Init+0xd0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <MX_GPIO_Init+0xd0>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0xd0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0308 	and.w	r3, r3, #8
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4816      	ldr	r0, [pc, #88]	; (8000740 <MX_GPIO_Init+0xd4>)
 80006e8:	f001 fdcd 	bl	8002286 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	480e      	ldr	r0, [pc, #56]	; (8000740 <MX_GPIO_Init+0xd4>)
 8000706:	f001 fc23 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800070a:	2301      	movs	r3, #1
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_GPIO_Init+0xd8>)
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	480a      	ldr	r0, [pc, #40]	; (8000748 <MX_GPIO_Init+0xdc>)
 800071e:	f001 fc17 	bl	8001f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2103      	movs	r1, #3
 8000726:	2006      	movs	r0, #6
 8000728:	f001 f9a5 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800072c:	2006      	movs	r0, #6
 800072e:	f001 f9be 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	40011000 	.word	0x40011000
 8000744:	10310000 	.word	0x10310000
 8000748:	40010c00 	.word	0x40010c00

0800074c <MX_ADC1_Init>:




void MX_ADC1_Init()
 {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN ADC1_Init 0 */

   /* USER CODE END ADC1_Init 0 */

   ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]

   /* USER CODE END ADC1_Init 1 */

   /** Common config
   */
   hadc1.Instance = ADC1;
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0x98>)
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <MX_ADC1_Init+0x9c>)
 8000760:	601a      	str	r2, [r3, #0]
   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	609a      	str	r2, [r3, #8]
   hadc1.Init.ContinuousConvMode = DISABLE;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	731a      	strb	r2, [r3, #12]
   hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	751a      	strb	r2, [r3, #20]
   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000778:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800077c:	61da      	str	r2, [r3, #28]
   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
   hadc1.Init.NbrOfConversion = 2;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000786:	2202      	movs	r2, #2
 8000788:	611a      	str	r2, [r3, #16]
   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078a:	4816      	ldr	r0, [pc, #88]	; (80007e4 <MX_ADC1_Init+0x98>)
 800078c:	f000 fbbe 	bl	8000f0c <HAL_ADC_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x4e>
   {
     Error_Handler();
 8000796:	f000 f9de 	bl	8000b56 <Error_Handler>
   }

   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_0;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_1;
 800079e:	2301      	movs	r3, #1
 80007a0:	60bb      	str	r3, [r7, #8]
   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80007a2:	2301      	movs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)  // &&
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007ac:	f000 fdc2 	bl	8001334 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x6e>
   {
     Error_Handler();
 80007b6:	f000 f9ce 	bl	8000b56 <Error_Handler>
   }

   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_2;
 80007be:	2302      	movs	r3, #2
 80007c0:	60bb      	str	r3, [r7, #8]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)  //&&
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007c8:	f000 fdb4 	bl	8001334 <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0x8a>
   {
     Error_Handler();
 80007d2:	f000 f9c0 	bl	8000b56 <Error_Handler>
   }
   /* USER CODE BEGIN ADC1_Init 2 */
   HAL_ADCEx_Calibration_Start(&hadc1);  //&&
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007d8:	f000 ffa6 	bl	8001728 <HAL_ADCEx_Calibration_Start>
   /* USER CODE END ADC1_Init 2 */

 }
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200002ac 	.word	0x200002ac
 80007e8:	40012400 	.word	0x40012400

080007ec <MX_DMA_Init>:




void MX_DMA_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_DMA_Init+0x38>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <MX_DMA_Init+0x38>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_DMA_Init+0x38>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	200b      	movs	r0, #11
 8000810:	f001 f931 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000814:	200b      	movs	r0, #11
 8000816:	f001 f94a 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <MX_TIM2_Init>:

void MX_TIM2_Init()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM2_Init+0x98>)
 800084e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_TIM2_Init+0x98>)
 800085c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000870:	f003 ff9c 	bl	80047ac <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800087a:	f000 f96c 	bl	8000b56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_TIM2_Init+0x98>)
 800088c:	f004 f966 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000896:	f000 f95e 	bl	8000b56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_TIM2_Init+0x98>)
 80008a8:	f004 fb42 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008b2:	f000 f950 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000320 	.word	0x20000320

080008c4 <StackHandler>:
extern TIM_HandleTypeDef htim2;
extern ADC_HandleTypeDef hadc1;

uint8_t BusyFlag = 0;

void StackHandler(uint8_t* Data, uint32_t Len){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	short OvfIn;
	if(Len>4){Len =4;}
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d901      	bls.n	80008d8 <StackHandler+0x14>
 80008d4:	2304      	movs	r3, #4
 80008d6:	603b      	str	r3, [r7, #0]

	OvfIn = put(&queueIn, Data, Len);
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4812      	ldr	r0, [pc, #72]	; (8000928 <StackHandler+0x64>)
 80008de:	f7ff fc67 	bl	80001b0 <put>
 80008e2:	4603      	mov	r3, r0
 80008e4:	81fb      	strh	r3, [r7, #14]

     if(OvfIn==0){
 80008e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d118      	bne.n	8000920 <StackHandler+0x5c>

    	 while(BusyFlag != USBD_OK){
 80008ee:	e013      	b.n	8000918 <StackHandler+0x54>
    	      BusyFlag = BusyCheck();
 80008f0:	f008 fdb4 	bl	800945c <BusyCheck>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <StackHandler+0x68>)
 80008fa:	701a      	strb	r2, [r3, #0]
    	      if(BusyFlag == USBD_OK)
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <StackHandler+0x68>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d109      	bne.n	8000918 <StackHandler+0x54>
    	      {BusyFlag = CDC_Transmit_FS("\r\n Input Stack Overflow",23);
 8000904:	2117      	movs	r1, #23
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <StackHandler+0x6c>)
 8000908:	f008 fd82 	bl	8009410 <CDC_Transmit_FS>
 800090c:	4603      	mov	r3, r0
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <StackHandler+0x68>)
 8000912:	701a      	strb	r2, [r3, #0]
    	         break;}
 8000914:	bf00      	nop
    	   }

     }


}
 8000916:	e003      	b.n	8000920 <StackHandler+0x5c>
    	 while(BusyFlag != USBD_OK){
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <StackHandler+0x68>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1e7      	bne.n	80008f0 <StackHandler+0x2c>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000240 	.word	0x20000240
 800092c:	200002a8 	.word	0x200002a8
 8000930:	0800a5c8 	.word	0x0800a5c8

08000934 <ReceiveHandler>:


void ReceiveHandler(){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	char InputSymb[2];


	//  CDC_Transmit_FS(Rec_Len,sizeof(Rec_Len));

	get(&queueIn, (uint8_t *) InputSymb, 1);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2201      	movs	r2, #1
 800093e:	4619      	mov	r1, r3
 8000940:	4826      	ldr	r0, [pc, #152]	; (80009dc <ReceiveHandler+0xa8>)
 8000942:	f7ff fc7e 	bl	8000242 <get>



	switch( InputSymb[0] )
 8000946:	793b      	ldrb	r3, [r7, #4]
 8000948:	3b61      	subs	r3, #97	; 0x61
 800094a:	2b15      	cmp	r3, #21
 800094c:	d83f      	bhi.n	80009ce <ReceiveHandler+0x9a>
 800094e:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <ReceiveHandler+0x20>)
 8000950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000954:	080009b9 	.word	0x080009b9
 8000958:	080009cf 	.word	0x080009cf
 800095c:	080009cf 	.word	0x080009cf
 8000960:	080009cf 	.word	0x080009cf
 8000964:	080009c1 	.word	0x080009c1
 8000968:	080009cf 	.word	0x080009cf
 800096c:	080009cf 	.word	0x080009cf
 8000970:	080009cf 	.word	0x080009cf
 8000974:	080009cf 	.word	0x080009cf
 8000978:	080009cf 	.word	0x080009cf
 800097c:	080009cf 	.word	0x080009cf
 8000980:	080009ad 	.word	0x080009ad
 8000984:	080009cf 	.word	0x080009cf
 8000988:	080009cf 	.word	0x080009cf
 800098c:	080009cf 	.word	0x080009cf
 8000990:	080009cf 	.word	0x080009cf
 8000994:	080009cf 	.word	0x080009cf
 8000998:	080009cf 	.word	0x080009cf
 800099c:	080009cf 	.word	0x080009cf
 80009a0:	080009cf 	.word	0x080009cf
 80009a4:	080009cf 	.word	0x080009cf
 80009a8:	080009b3 	.word	0x080009b3
	{
	    case 'l':{
	    	IfReceivedL();
 80009ac:	f7ff fd72 	bl	8000494 <IfReceivedL>
	    	break;
 80009b0:	e010      	b.n	80009d4 <ReceiveHandler+0xa0>
	    }
	    case 'v':{
	    	IfReceivedV();
 80009b2:	f7ff fd41 	bl	8000438 <IfReceivedV>
	    	break;
 80009b6:	e00d      	b.n	80009d4 <ReceiveHandler+0xa0>
	    }
	    case 'a':{
	    	IfReceivedA(&htim2);
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <ReceiveHandler+0xac>)
 80009ba:	f7ff fd5f 	bl	800047c <IfReceivedA>
	    	break;
 80009be:	e009      	b.n	80009d4 <ReceiveHandler+0xa0>
	    }
	    case 'e':{
	    		ADCstop(&hadc1, &htim2);
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <ReceiveHandler+0xac>)
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <ReceiveHandler+0xb0>)
 80009c4:	f7ff fd1e 	bl	8000404 <ADCstop>
	  	    	StartMenu();
 80009c8:	f7ff fd2c 	bl	8000424 <StartMenu>
	  	    	break;
 80009cc:	e002      	b.n	80009d4 <ReceiveHandler+0xa0>
	  	    }
	    default :
	    	StartMenu();
 80009ce:	f7ff fd29 	bl	8000424 <StartMenu>
	}



}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000240 	.word	0x20000240
 80009e0:	20000320 	.word	0x20000320
 80009e4:	200002ac 	.word	0x200002ac

080009e8 <OutputHandler>:





int OutputHandler(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
	char Out[8];
    int Cond =0;  // переименовать
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
    BusyFlag = USBD_BUSY;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <OutputHandler+0xac>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]

    Cond = get(&queueOut,(uint8_t *) Out, 8);// нужна переменная  8!! check if you have 8
 80009f8:	463b      	mov	r3, r7
 80009fa:	2208      	movs	r2, #8
 80009fc:	4619      	mov	r1, r3
 80009fe:	4826      	ldr	r0, [pc, #152]	; (8000a98 <OutputHandler+0xb0>)
 8000a00:	f7ff fc1f 	bl	8000242 <get>
 8000a04:	60f8      	str	r0, [r7, #12]
      if (Cond == 0){
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d13a      	bne.n	8000a82 <OutputHandler+0x9a>
    	  short LenOfMess = queueOut.bytes_avail;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <OutputHandler+0xb0>)
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	817b      	strh	r3, [r7, #10]
    	  get(&queueOut,(uint8_t *) Out,LenOfMess);
 8000a12:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481f      	ldr	r0, [pc, #124]	; (8000a98 <OutputHandler+0xb0>)
 8000a1c:	f7ff fc11 	bl	8000242 <get>


    	  /// busy check here
    	  while(BusyFlag != USBD_OK){
 8000a20:	e015      	b.n	8000a4e <OutputHandler+0x66>
    	  	         	  BusyFlag = BusyCheck();
 8000a22:	f008 fd1b 	bl	800945c <BusyCheck>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <OutputHandler+0xac>)
 8000a2c:	701a      	strb	r2, [r3, #0]
                  if(BusyFlag == USBD_OK){BusyFlag = CDC_Transmit_FS(Out,LenOfMess);
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <OutputHandler+0xac>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10b      	bne.n	8000a4e <OutputHandler+0x66>
 8000a36:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f008 fce6 	bl	8009410 <CDC_Transmit_FS>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <OutputHandler+0xac>)
 8000a4a:	701a      	strb	r2, [r3, #0]
                  break;}
 8000a4c:	e003      	b.n	8000a56 <OutputHandler+0x6e>
    	  while(BusyFlag != USBD_OK){
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <OutputHandler+0xac>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1e5      	bne.n	8000a22 <OutputHandler+0x3a>
    	  	           }
    	 // BusyFlag = CDC_Transmit_FS(Out,LenOfMess);// bytes avail =0
    	  return 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e018      	b.n	8000a8c <OutputHandler+0xa4>
      }

      while(BusyFlag != USBD_OK){
         	  	         	  BusyFlag = BusyCheck();
 8000a5a:	f008 fcff 	bl	800945c <BusyCheck>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <OutputHandler+0xac>)
 8000a64:	701a      	strb	r2, [r3, #0]
         if(BusyFlag == USBD_OK){BusyFlag = CDC_Transmit_FS(Out,8);
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <OutputHandler+0xac>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d109      	bne.n	8000a82 <OutputHandler+0x9a>
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2108      	movs	r1, #8
 8000a72:	4618      	mov	r0, r3
 8000a74:	f008 fccc 	bl	8009410 <CDC_Transmit_FS>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <OutputHandler+0xac>)
 8000a7e:	701a      	strb	r2, [r3, #0]
         break;}
 8000a80:	e003      	b.n	8000a8a <OutputHandler+0xa2>
      while(BusyFlag != USBD_OK){
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <OutputHandler+0xac>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1e7      	bne.n	8000a5a <OutputHandler+0x72>
         	  	           }
	//BusyFlag = CDC_Transmit_FS(Out,8);

	return 1;
 8000a8a:	2301      	movs	r3, #1
	}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200002a8 	.word	0x200002a8
 8000a98:	20000254 	.word	0x20000254

08000a9c <OutputStack>:




void OutputStack(char TransMes[], uint8_t Len){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
	int OvfOut;
        // ovf
		OvfOut =put(&queueOut, TransMes, Len);
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	480f      	ldr	r0, [pc, #60]	; (8000aec <OutputStack+0x50>)
 8000ab0:	f7ff fb7e 	bl	80001b0 <put>
 8000ab4:	60f8      	str	r0, [r7, #12]
		if (OvfOut==0)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d112      	bne.n	8000ae2 <OutputStack+0x46>
		{
			queueIn.bytes_avail++;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <OutputStack+0x54>)
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <OutputStack+0x54>)
 8000ac4:	6113      	str	r3, [r2, #16]
			queueIn.head = (queueIn.head--) % queueIn.buffer_size;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <OutputStack+0x54>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4908      	ldr	r1, [pc, #32]	; (8000af0 <OutputStack+0x54>)
 8000ace:	608a      	str	r2, [r1, #8]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <OutputStack+0x54>)
 8000ad2:	6852      	ldr	r2, [r2, #4]
 8000ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ad8:	fb01 f202 	mul.w	r2, r1, r2
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <OutputStack+0x54>)
 8000ae0:	6093      	str	r3, [r2, #8]
		} // else  вынести сообщение о переполнении выходного стека


}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000254 	.word	0x20000254
 8000af0:	20000240 	.word	0x20000240

08000af4 <LogicReadInpStack>:

///



void LogicReadInpStack(){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0


	  if(queueIn.tail != queueIn.head ){
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <LogicReadInpStack+0x18>)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <LogicReadInpStack+0x18>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d001      	beq.n	8000b08 <LogicReadInpStack+0x14>
		    	  ReceiveHandler();
 8000b04:	f7ff ff16 	bl	8000934 <ReceiveHandler>

		    	//  if(BusyFlag == USBD_BUSY && i!=0){i--;}
		      }
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000240 	.word	0x20000240

08000b10 <LogicOutpStackCheck>:




void LogicOutpStackCheck(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

	if(queueOut.bytes_avail!=0 ){
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <LogicOutpStackCheck+0x14>)
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <LogicOutpStackCheck+0x10>
		    	  OutputHandler();
 8000b1c:	f7ff ff64 	bl	80009e8 <OutputHandler>
		      }
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000254 	.word	0x20000254

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */




		BuffInit();
 8000b2c:	f7ff fb0e 	bl	800014c <BuffInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 f98a 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f7ff fd3c 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f7ff fd98 	bl	800066c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000b3c:	f008 fba4 	bl	8009288 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8000b40:	f7ff fe54 	bl	80007ec <MX_DMA_Init>
  MX_ADC1_Init();  /// пересмотреть без передачи
 8000b44:	f7ff fe02 	bl	800074c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b48:	f7ff fe6e 	bl	8000828 <MX_TIM2_Init>



		//  if(BusyFlag == USBD_OK && Sum_Len!=i ){

	      LogicReadInpStack();
 8000b4c:	f7ff ffd2 	bl	8000af4 <LogicReadInpStack>



	     // if(BusyFlag == USBD_OK && queueOut.bytes_avail!=0 ){

	      LogicOutpStackCheck();
 8000b50:	f7ff ffde 	bl	8000b10 <LogicOutpStackCheck>
  {
 8000b54:	e7fa      	b.n	8000b4c <main+0x24>

08000b56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5a:	b672      	cpsid	i
}
 8000b5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <Error_Handler+0x8>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_MspInit+0x60>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_MspInit+0x60>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <HAL_ADC_MspInit+0xc0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d14a      	bne.n	8000c7a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <HAL_ADC_MspInit+0xc4>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a27      	ldr	r2, [pc, #156]	; (8000c88 <HAL_ADC_MspInit+0xc4>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <HAL_ADC_MspInit+0xc4>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <HAL_ADC_MspInit+0xc4>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_ADC_MspInit+0xc4>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <HAL_ADC_MspInit+0xc4>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c14:	2303      	movs	r3, #3
 8000c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000c24:	f001 f994 	bl	8001f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c2a:	4a1a      	ldr	r2, [pc, #104]	; (8000c94 <HAL_ADC_MspInit+0xd0>)
 8000c2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c60:	f000 ff4e 	bl	8001b00 <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000c6a:	f7ff ff74 	bl	8000b56 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c72:	621a      	str	r2, [r3, #32]
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40012400 	.word	0x40012400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	200002dc 	.word	0x200002dc
 8000c94:	40020008 	.word	0x40020008

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d113      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_TIM_Base_MspInit+0x44>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_TIM_Base_MspInit+0x44>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x44>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	201c      	movs	r0, #28
 8000cc8:	f000 fed5 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ccc:	201c      	movs	r0, #28
 8000cce:	f000 feee 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 f8d5 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f001 fad8 	bl	80022e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  button_state();
 8000d38:	f7ff fbe0 	bl	80004fc <button_state>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA1_Channel1_IRQHandler+0x10>)
 8000d46:	f000 ffcf 	bl	8001ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 // ADC_Result();
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200002dc 	.word	0x200002dc

08000d54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d5a:	f001 fc18 	bl	800258e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20001008 	.word	0x20001008

08000d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <TIM2_IRQHandler+0x14>)
 8000d6e:	f003 fded 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  ADC_Start(&hadc1);
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <TIM2_IRQHandler+0x18>)
 8000d74:	f7ff faf0 	bl	8000358 <ADC_Start>

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000320 	.word	0x20000320
 8000d80:	200002ac 	.word	0x200002ac

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f008 ff22 	bl	8009bfc <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20005000 	.word	0x20005000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	20000368 	.word	0x20000368
 8000dec:	20001528 	.word	0x20001528

08000df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <Reset_Handler>:
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopFillZerobss+0x12>)
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopFillZerobss+0x1a>)
 8000e02:	2300      	movs	r3, #0
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:
 8000e06:	58d4      	ldr	r4, [r2, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:
 8000e0c:	18c4      	adds	r4, r0, r3
 8000e0e:	428c      	cmp	r4, r1
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopFillZerobss+0x1e>)
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopFillZerobss+0x22>)
 8000e16:	2300      	movs	r3, #0
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:
 8000e1e:	42a2      	cmp	r2, r4
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>
 8000e22:	f7ff ffe5 	bl	8000df0 <SystemInit>
 8000e26:	f008 feef 	bl	8009c08 <__libc_init_array>
 8000e2a:	f7ff fe7d 	bl	8000b28 <main>
 8000e2e:	4770      	bx	lr
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000224 	.word	0x20000224
 8000e38:	0800a69c 	.word	0x0800a69c
 8000e3c:	20000224 	.word	0x20000224
 8000e40:	20001524 	.word	0x20001524

08000e44 <ADC1_2_IRQHandler>:
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x28>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fe01 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe7c 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fe27 	bl	8001ae6 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 fde1 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000044 	.word	0x20000044
 8000ecc:	2000004c 	.word	0x2000004c
 8000ed0:	20000048 	.word	0x20000048

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	2000004c 	.word	0x2000004c
 8000ef4:	2000036c 	.word	0x2000036c

08000ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	2000036c 	.word	0x2000036c

08000f0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e0be      	b.n	80010ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d109      	bne.n	8000f50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fe3a 	bl	8000bc4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fb41 	bl	80015d8 <ADC_ConversionStop_Disable>
 8000f56:	4603      	mov	r3, r0
 8000f58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f040 8099 	bne.w	800109a <HAL_ADC_Init+0x18e>
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 8095 	bne.w	800109a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f78:	f023 0302 	bic.w	r3, r3, #2
 8000f7c:	f043 0202 	orr.w	r2, r3, #2
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7b1b      	ldrb	r3, [r3, #12]
 8000f92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fa4:	d003      	beq.n	8000fae <HAL_ADC_Init+0xa2>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d102      	bne.n	8000fb4 <HAL_ADC_Init+0xa8>
 8000fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb2:	e000      	b.n	8000fb6 <HAL_ADC_Init+0xaa>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7d1b      	ldrb	r3, [r3, #20]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d119      	bne.n	8000ff8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7b1b      	ldrb	r3, [r3, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d109      	bne.n	8000fe0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	035a      	lsls	r2, r3, #13
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	e00b      	b.n	8000ff8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	f043 0220 	orr.w	r2, r3, #32
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	f043 0201 	orr.w	r2, r3, #1
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	430a      	orrs	r2, r1
 800100a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_ADC_Init+0x1a8>)
 8001014:	4013      	ands	r3, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	430b      	orrs	r3, r1
 800101e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001028:	d003      	beq.n	8001032 <HAL_ADC_Init+0x126>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d104      	bne.n	800103c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	3b01      	subs	r3, #1
 8001038:	051b      	lsls	r3, r3, #20
 800103a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	430a      	orrs	r2, r1
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_ADC_Init+0x1ac>)
 8001058:	4013      	ands	r3, r2
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	429a      	cmp	r2, r3
 800105e:	d10b      	bne.n	8001078 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	f023 0303 	bic.w	r3, r3, #3
 800106e:	f043 0201 	orr.w	r2, r3, #1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001076:	e018      	b.n	80010aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	f023 0312 	bic.w	r3, r3, #18
 8001080:	f043 0210 	orr.w	r2, r3, #16
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001098:	e007      	b.n	80010aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109e:	f043 0210 	orr.w	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	ffe1f7fd 	.word	0xffe1f7fd
 80010b8:	ff1f0efe 	.word	0xff1f0efe

080010bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a64      	ldr	r2, [pc, #400]	; (8001264 <HAL_ADC_Start_DMA+0x1a8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d004      	beq.n	80010e0 <HAL_ADC_Start_DMA+0x24>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a63      	ldr	r2, [pc, #396]	; (8001268 <HAL_ADC_Start_DMA+0x1ac>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d106      	bne.n	80010ee <HAL_ADC_Start_DMA+0x32>
 80010e0:	4b60      	ldr	r3, [pc, #384]	; (8001264 <HAL_ADC_Start_DMA+0x1a8>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f040 80b3 	bne.w	8001254 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_ADC_Start_DMA+0x40>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e0ae      	b.n	800125a <HAL_ADC_Start_DMA+0x19e>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 fa0d 	bl	8001524 <ADC_Enable>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	2b00      	cmp	r3, #0
 8001112:	f040 809a 	bne.w	800124a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a4e      	ldr	r2, [pc, #312]	; (8001268 <HAL_ADC_Start_DMA+0x1ac>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d105      	bne.n	8001140 <HAL_ADC_Start_DMA+0x84>
 8001134:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <HAL_ADC_Start_DMA+0x1a8>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d115      	bne.n	800116c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	2b00      	cmp	r3, #0
 8001158:	d026      	beq.n	80011a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001162:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116a:	e01d      	b.n	80011a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a39      	ldr	r2, [pc, #228]	; (8001264 <HAL_ADC_Start_DMA+0x1a8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d004      	beq.n	800118c <HAL_ADC_Start_DMA+0xd0>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a38      	ldr	r2, [pc, #224]	; (8001268 <HAL_ADC_Start_DMA+0x1ac>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d10d      	bne.n	80011a8 <HAL_ADC_Start_DMA+0xec>
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <HAL_ADC_Start_DMA+0x1a8>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	f023 0206 	bic.w	r2, r3, #6
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
 80011c0:	e002      	b.n	80011c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a25      	ldr	r2, [pc, #148]	; (800126c <HAL_ADC_Start_DMA+0x1b0>)
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a24      	ldr	r2, [pc, #144]	; (8001270 <HAL_ADC_Start_DMA+0x1b4>)
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a23      	ldr	r2, [pc, #140]	; (8001274 <HAL_ADC_Start_DMA+0x1b8>)
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f06f 0202 	mvn.w	r2, #2
 80011f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001200:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a18      	ldr	r0, [r3, #32]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	334c      	adds	r3, #76	; 0x4c
 800120c:	4619      	mov	r1, r3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f000 fccf 	bl	8001bb4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001220:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001224:	d108      	bne.n	8001238 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001234:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001236:	e00f      	b.n	8001258 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001246:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001248:	e006      	b.n	8001258 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001252:	e001      	b.n	8001258 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001258:	7dfb      	ldrb	r3, [r7, #23]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40012400 	.word	0x40012400
 8001268:	40012800 	.word	0x40012800
 800126c:	0800165b 	.word	0x0800165b
 8001270:	080016d7 	.word	0x080016d7
 8001274:	080016f3 	.word	0x080016f3

08001278 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Stop_DMA+0x1a>
 800128e:	2302      	movs	r3, #2
 8001290:	e039      	b.n	8001306 <HAL_ADC_Stop_DMA+0x8e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f99c 	bl	80015d8 <ADC_ConversionStop_Disable>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d128      	bne.n	80012fc <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d11a      	bne.n	80012fc <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fcd1 	bl	8001c72 <HAL_DMA_Abort>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10a      	bne.n	80012f0 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
 80012ee:	e005      	b.n	80012fc <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
	...

08001334 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x20>
 8001350:	2302      	movs	r3, #2
 8001352:	e0dc      	b.n	800150e <HAL_ADC_ConfigChannel+0x1da>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b06      	cmp	r3, #6
 8001362:	d81c      	bhi.n	800139e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	3b05      	subs	r3, #5
 8001376:	221f      	movs	r2, #31
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	4019      	ands	r1, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	3b05      	subs	r3, #5
 8001390:	fa00 f203 	lsl.w	r2, r0, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	635a      	str	r2, [r3, #52]	; 0x34
 800139c:	e03c      	b.n	8001418 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d81c      	bhi.n	80013e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b23      	subs	r3, #35	; 0x23
 80013b8:	221f      	movs	r2, #31
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	4019      	ands	r1, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	3b23      	subs	r3, #35	; 0x23
 80013d2:	fa00 f203 	lsl.w	r2, r0, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	631a      	str	r2, [r3, #48]	; 0x30
 80013de:	e01b      	b.n	8001418 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	3b41      	subs	r3, #65	; 0x41
 80013f2:	221f      	movs	r2, #31
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	4019      	ands	r1, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3b41      	subs	r3, #65	; 0x41
 800140c:	fa00 f203 	lsl.w	r2, r0, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b09      	cmp	r3, #9
 800141e:	d91c      	bls.n	800145a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68d9      	ldr	r1, [r3, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	3b1e      	subs	r3, #30
 8001432:	2207      	movs	r2, #7
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	4019      	ands	r1, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6898      	ldr	r0, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	3b1e      	subs	r3, #30
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	e019      	b.n	800148e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6919      	ldr	r1, [r3, #16]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	2207      	movs	r2, #7
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	4019      	ands	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6898      	ldr	r0, [r3, #8]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	fa00 f203 	lsl.w	r2, r0, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b10      	cmp	r3, #16
 8001494:	d003      	beq.n	800149e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800149a:	2b11      	cmp	r3, #17
 800149c:	d132      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_ADC_ConfigChannel+0x1e4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d125      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d126      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d11a      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_ADC_ConfigChannel+0x1e8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <HAL_ADC_ConfigChannel+0x1ec>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	0c9a      	lsrs	r2, r3, #18
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e4:	e002      	b.n	80014ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f9      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x1b2>
 80014f2:	e007      	b.n	8001504 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	f043 0220 	orr.w	r2, r3, #32
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	40012400 	.word	0x40012400
 800151c:	20000044 	.word	0x20000044
 8001520:	431bde83 	.word	0x431bde83

08001524 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b01      	cmp	r3, #1
 8001540:	d040      	beq.n	80015c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 0201 	orr.w	r2, r2, #1
 8001550:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001552:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <ADC_Enable+0xac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <ADC_Enable+0xb0>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001560:	e002      	b.n	8001568 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3b01      	subs	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f9      	bne.n	8001562 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800156e:	f7ff fcc3 	bl	8000ef8 <HAL_GetTick>
 8001572:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001574:	e01f      	b.n	80015b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001576:	f7ff fcbf 	bl	8000ef8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d918      	bls.n	80015b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d011      	beq.n	80015b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f043 0210 	orr.w	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e007      	b.n	80015c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d1d8      	bne.n	8001576 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000044 	.word	0x20000044
 80015d4:	431bde83 	.word	0x431bde83

080015d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d12e      	bne.n	8001650 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0201 	bic.w	r2, r2, #1
 8001600:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001602:	f7ff fc79 	bl	8000ef8 <HAL_GetTick>
 8001606:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001608:	e01b      	b.n	8001642 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800160a:	f7ff fc75 	bl	8000ef8 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d914      	bls.n	8001642 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b01      	cmp	r3, #1
 8001624:	d10d      	bne.n	8001642 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e007      	b.n	8001652 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b01      	cmp	r3, #1
 800164e:	d0dc      	beq.n	800160a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001670:	2b00      	cmp	r3, #0
 8001672:	d127      	bne.n	80016c4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800168a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800168e:	d115      	bne.n	80016bc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001694:	2b00      	cmp	r3, #0
 8001696:	d111      	bne.n	80016bc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7fe fe07 	bl	80002d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80016c2:	e004      	b.n	80016ce <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	4798      	blx	r3
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff fe12 	bl	800130e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f043 0204 	orr.w	r2, r3, #4
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff fe01 	bl	8001320 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_ADCEx_Calibration_Start+0x1e>
 8001742:	2302      	movs	r3, #2
 8001744:	e095      	b.n	8001872 <HAL_ADCEx_Calibration_Start+0x14a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff42 	bl	80015d8 <ADC_ConversionStop_Disable>
 8001754:	4603      	mov	r3, r0
 8001756:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 8084 	bne.w	8001868 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001768:	f023 0302 	bic.w	r3, r3, #2
 800176c:	f043 0202 	orr.w	r2, r3, #2
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_ADCEx_Calibration_Start+0x154>)
 8001776:	681c      	ldr	r4, [r3, #0]
 8001778:	2002      	movs	r0, #2
 800177a:	f002 ff57 	bl	800462c <HAL_RCCEx_GetPeriphCLKFreq>
 800177e:	4603      	mov	r3, r0
 8001780:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001784:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001786:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001788:	e002      	b.n	8001790 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3b01      	subs	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f9      	bne.n	800178a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fec4 	bl	8001524 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0208 	orr.w	r2, r2, #8
 80017aa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80017ac:	f7ff fba4 	bl	8000ef8 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017b2:	e01b      	b.n	80017ec <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017b4:	f7ff fba0 	bl	8000ef8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b0a      	cmp	r3, #10
 80017c0:	d914      	bls.n	80017ec <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00d      	beq.n	80017ec <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f023 0312 	bic.w	r3, r3, #18
 80017d8:	f043 0210 	orr.w	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e042      	b.n	8001872 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1dc      	bne.n	80017b4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0204 	orr.w	r2, r2, #4
 8001808:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800180a:	f7ff fb75 	bl	8000ef8 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001810:	e01b      	b.n	800184a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001812:	f7ff fb71 	bl	8000ef8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b0a      	cmp	r3, #10
 800181e:	d914      	bls.n	800184a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00d      	beq.n	800184a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	f023 0312 	bic.w	r3, r3, #18
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e013      	b.n	8001872 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1dc      	bne.n	8001812 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f023 0303 	bic.w	r3, r3, #3
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001870:	7dfb      	ldrb	r3, [r7, #23]
}
 8001872:	4618      	mov	r0, r3
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd90      	pop	{r4, r7, pc}
 800187a:	bf00      	nop
 800187c:	20000044 	.word	0x20000044

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4906      	ldr	r1, [pc, #24]	; (8001918 <__NVIC_EnableIRQ+0x34>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db12      	blt.n	8001954 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	490a      	ldr	r1, [pc, #40]	; (8001960 <__NVIC_DisableIRQ+0x44>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	3320      	adds	r3, #32
 8001944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001948:	f3bf 8f4f 	dsb	sy
}
 800194c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800194e:	f3bf 8f6f 	isb	sy
}
 8001952:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff90 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff09 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff1e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff90 	bl	80019b8 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5f 	bl	8001964 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff11 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff1f 	bl	800191c <__NVIC_DisableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff94 	bl	8001a1c <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e043      	b.n	8001b9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_DMA_Init+0xa8>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a22      	ldr	r2, [pc, #136]	; (8001bac <HAL_DMA_Init+0xac>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	009a      	lsls	r2, r3, #2
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <HAL_DMA_Init+0xb0>)
 8001b32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	bffdfff8 	.word	0xbffdfff8
 8001bac:	cccccccd 	.word	0xcccccccd
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_DMA_Start_IT+0x20>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e04a      	b.n	8001c6a <HAL_DMA_Start_IT+0xb6>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d13a      	bne.n	8001c5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f972 	bl	8001ef4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 020e 	orr.w	r2, r2, #14
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e00f      	b.n	8001c4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0204 	bic.w	r2, r2, #4
 8001c38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 020a 	orr.w	r2, r2, #10
 8001c48:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e005      	b.n	8001c68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
 8001c66:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d008      	beq.n	8001c9a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e020      	b.n	8001cdc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 020e 	bic.w	r2, r2, #14
 8001ca8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	2204      	movs	r2, #4
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d04f      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xc8>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d04a      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0204 	bic.w	r2, r2, #4
 8001d36:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a66      	ldr	r2, [pc, #408]	; (8001ed8 <HAL_DMA_IRQHandler+0x1f0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d029      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xae>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a65      	ldr	r2, [pc, #404]	; (8001edc <HAL_DMA_IRQHandler+0x1f4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d022      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xaa>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a63      	ldr	r2, [pc, #396]	; (8001ee0 <HAL_DMA_IRQHandler+0x1f8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01a      	beq.n	8001d8c <HAL_DMA_IRQHandler+0xa4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a62      	ldr	r2, [pc, #392]	; (8001ee4 <HAL_DMA_IRQHandler+0x1fc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d012      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x9e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <HAL_DMA_IRQHandler+0x200>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00a      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x98>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a5f      	ldr	r2, [pc, #380]	; (8001eec <HAL_DMA_IRQHandler+0x204>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d102      	bne.n	8001d7a <HAL_DMA_IRQHandler+0x92>
 8001d74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d78:	e00e      	b.n	8001d98 <HAL_DMA_IRQHandler+0xb0>
 8001d7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d7e:	e00b      	b.n	8001d98 <HAL_DMA_IRQHandler+0xb0>
 8001d80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d84:	e008      	b.n	8001d98 <HAL_DMA_IRQHandler+0xb0>
 8001d86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d8a:	e005      	b.n	8001d98 <HAL_DMA_IRQHandler+0xb0>
 8001d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d90:	e002      	b.n	8001d98 <HAL_DMA_IRQHandler+0xb0>
 8001d92:	2340      	movs	r3, #64	; 0x40
 8001d94:	e000      	b.n	8001d98 <HAL_DMA_IRQHandler+0xb0>
 8001d96:	2304      	movs	r3, #4
 8001d98:	4a55      	ldr	r2, [pc, #340]	; (8001ef0 <HAL_DMA_IRQHandler+0x208>)
 8001d9a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8094 	beq.w	8001ece <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001dae:	e08e      	b.n	8001ece <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	2202      	movs	r2, #2
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d056      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x186>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d051      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 020a 	bic.w	r2, r2, #10
 8001de6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a38      	ldr	r2, [pc, #224]	; (8001ed8 <HAL_DMA_IRQHandler+0x1f0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d029      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x166>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a37      	ldr	r2, [pc, #220]	; (8001edc <HAL_DMA_IRQHandler+0x1f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x162>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a35      	ldr	r2, [pc, #212]	; (8001ee0 <HAL_DMA_IRQHandler+0x1f8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01a      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x15c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a34      	ldr	r2, [pc, #208]	; (8001ee4 <HAL_DMA_IRQHandler+0x1fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d012      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x156>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_DMA_IRQHandler+0x200>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x150>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a31      	ldr	r2, [pc, #196]	; (8001eec <HAL_DMA_IRQHandler+0x204>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d102      	bne.n	8001e32 <HAL_DMA_IRQHandler+0x14a>
 8001e2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e30:	e00e      	b.n	8001e50 <HAL_DMA_IRQHandler+0x168>
 8001e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e36:	e00b      	b.n	8001e50 <HAL_DMA_IRQHandler+0x168>
 8001e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e3c:	e008      	b.n	8001e50 <HAL_DMA_IRQHandler+0x168>
 8001e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e42:	e005      	b.n	8001e50 <HAL_DMA_IRQHandler+0x168>
 8001e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e48:	e002      	b.n	8001e50 <HAL_DMA_IRQHandler+0x168>
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	e000      	b.n	8001e50 <HAL_DMA_IRQHandler+0x168>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_DMA_IRQHandler+0x208>)
 8001e52:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d034      	beq.n	8001ece <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e6c:	e02f      	b.n	8001ece <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2208      	movs	r2, #8
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d028      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x1e8>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d023      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 020e 	bic.w	r2, r2, #14
 8001e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
    }
  }
  return;
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
}
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40020008 	.word	0x40020008
 8001edc:	4002001c 	.word	0x4002001c
 8001ee0:	40020030 	.word	0x40020030
 8001ee4:	40020044 	.word	0x40020044
 8001ee8:	40020058 	.word	0x40020058
 8001eec:	4002006c 	.word	0x4002006c
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d108      	bne.n	8001f34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f32:	e007      	b.n	8001f44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b08b      	sub	sp, #44	; 0x2c
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f62:	e169      	b.n	8002238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f64:	2201      	movs	r2, #1
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8158 	bne.w	8002232 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a9a      	ldr	r2, [pc, #616]	; (80021f0 <HAL_GPIO_Init+0x2a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d05e      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001f8c:	4a98      	ldr	r2, [pc, #608]	; (80021f0 <HAL_GPIO_Init+0x2a0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d875      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001f92:	4a98      	ldr	r2, [pc, #608]	; (80021f4 <HAL_GPIO_Init+0x2a4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d058      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001f98:	4a96      	ldr	r2, [pc, #600]	; (80021f4 <HAL_GPIO_Init+0x2a4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d86f      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001f9e:	4a96      	ldr	r2, [pc, #600]	; (80021f8 <HAL_GPIO_Init+0x2a8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d052      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fa4:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <HAL_GPIO_Init+0x2a8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d869      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001faa:	4a94      	ldr	r2, [pc, #592]	; (80021fc <HAL_GPIO_Init+0x2ac>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d04c      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fb0:	4a92      	ldr	r2, [pc, #584]	; (80021fc <HAL_GPIO_Init+0x2ac>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d863      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fb6:	4a92      	ldr	r2, [pc, #584]	; (8002200 <HAL_GPIO_Init+0x2b0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d046      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fbc:	4a90      	ldr	r2, [pc, #576]	; (8002200 <HAL_GPIO_Init+0x2b0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d85d      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d82a      	bhi.n	800201c <HAL_GPIO_Init+0xcc>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d859      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_GPIO_Init+0x80>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	0800204b 	.word	0x0800204b
 8001fd4:	08002025 	.word	0x08002025
 8001fd8:	08002037 	.word	0x08002037
 8001fdc:	08002079 	.word	0x08002079
 8001fe0:	0800207f 	.word	0x0800207f
 8001fe4:	0800207f 	.word	0x0800207f
 8001fe8:	0800207f 	.word	0x0800207f
 8001fec:	0800207f 	.word	0x0800207f
 8001ff0:	0800207f 	.word	0x0800207f
 8001ff4:	0800207f 	.word	0x0800207f
 8001ff8:	0800207f 	.word	0x0800207f
 8001ffc:	0800207f 	.word	0x0800207f
 8002000:	0800207f 	.word	0x0800207f
 8002004:	0800207f 	.word	0x0800207f
 8002008:	0800207f 	.word	0x0800207f
 800200c:	0800207f 	.word	0x0800207f
 8002010:	0800207f 	.word	0x0800207f
 8002014:	0800202d 	.word	0x0800202d
 8002018:	08002041 	.word	0x08002041
 800201c:	4a79      	ldr	r2, [pc, #484]	; (8002204 <HAL_GPIO_Init+0x2b4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002022:	e02c      	b.n	800207e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	623b      	str	r3, [r7, #32]
          break;
 800202a:	e029      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	3304      	adds	r3, #4
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e024      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	3308      	adds	r3, #8
 800203c:	623b      	str	r3, [r7, #32]
          break;
 800203e:	e01f      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	330c      	adds	r3, #12
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e01a      	b.n	8002080 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002052:	2304      	movs	r3, #4
 8002054:	623b      	str	r3, [r7, #32]
          break;
 8002056:	e013      	b.n	8002080 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	611a      	str	r2, [r3, #16]
          break;
 800206a:	e009      	b.n	8002080 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800206c:	2308      	movs	r3, #8
 800206e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	615a      	str	r2, [r3, #20]
          break;
 8002076:	e003      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x130>
          break;
 800207e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d801      	bhi.n	800208a <HAL_GPIO_Init+0x13a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	e001      	b.n	800208e <HAL_GPIO_Init+0x13e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2bff      	cmp	r3, #255	; 0xff
 8002094:	d802      	bhi.n	800209c <HAL_GPIO_Init+0x14c>
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x152>
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	3b08      	subs	r3, #8
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	210f      	movs	r1, #15
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	6a39      	ldr	r1, [r7, #32]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	431a      	orrs	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80b1 	beq.w	8002232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d0:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a4c      	ldr	r2, [pc, #304]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_GPIO_Init+0x2bc>)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a40      	ldr	r2, [pc, #256]	; (8002210 <HAL_GPIO_Init+0x2c0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_GPIO_Init+0x1ec>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_GPIO_Init+0x2c4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1e8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <HAL_GPIO_Init+0x2c8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1e4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_GPIO_Init+0x2cc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1e0>
 800212c:	2303      	movs	r3, #3
 800212e:	e006      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002130:	2304      	movs	r3, #4
 8002132:	e004      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002134:	2302      	movs	r3, #2
 8002136:	e002      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 800213c:	2300      	movs	r3, #0
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	f002 0203 	and.w	r2, r2, #3
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	4093      	lsls	r3, r2
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800214e:	492f      	ldr	r1, [pc, #188]	; (800220c <HAL_GPIO_Init+0x2bc>)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	492c      	ldr	r1, [pc, #176]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	43db      	mvns	r3, r3
 800217e:	4928      	ldr	r1, [pc, #160]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002180:	4013      	ands	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	491e      	ldr	r1, [pc, #120]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4918      	ldr	r1, [pc, #96]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4914      	ldr	r1, [pc, #80]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d021      	beq.n	8002224 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
 80021ec:	e021      	b.n	8002232 <HAL_GPIO_Init+0x2e2>
 80021ee:	bf00      	nop
 80021f0:	10320000 	.word	0x10320000
 80021f4:	10310000 	.word	0x10310000
 80021f8:	10220000 	.word	0x10220000
 80021fc:	10210000 	.word	0x10210000
 8002200:	10120000 	.word	0x10120000
 8002204:	10110000 	.word	0x10110000
 8002208:	40021000 	.word	0x40021000
 800220c:	40010000 	.word	0x40010000
 8002210:	40010800 	.word	0x40010800
 8002214:	40010c00 	.word	0x40010c00
 8002218:	40011000 	.word	0x40011000
 800221c:	40011400 	.word	0x40011400
 8002220:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_GPIO_Init+0x304>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	43db      	mvns	r3, r3
 800222c:	4909      	ldr	r1, [pc, #36]	; (8002254 <HAL_GPIO_Init+0x304>)
 800222e:	4013      	ands	r3, r2
 8002230:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	f47f ae8e 	bne.w	8001f64 <HAL_GPIO_Init+0x14>
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	372c      	adds	r7, #44	; 0x2c
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e001      	b.n	800227a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]
 8002292:	4613      	mov	r3, r2
 8002294:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002296:	787b      	ldrb	r3, [r7, #1]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022a2:	e003      	b.n	80022ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	041a      	lsls	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	611a      	str	r2, [r3, #16]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	041a      	lsls	r2, r3, #16
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d006      	beq.n	800230c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f806 	bl	8002318 <HAL_GPIO_EXTI_Callback>
  }
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800232c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232e:	b08b      	sub	sp, #44	; 0x2c
 8002330:	af06      	add	r7, sp, #24
 8002332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0fd      	b.n	800253a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f007 f9a8 	bl	80096a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2203      	movs	r2, #3
 800235c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f002 fe79 	bl	800505c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	687e      	ldr	r6, [r7, #4]
 8002372:	466d      	mov	r5, sp
 8002374:	f106 0410 	add.w	r4, r6, #16
 8002378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	602b      	str	r3, [r5, #0]
 8002380:	1d33      	adds	r3, r6, #4
 8002382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	f002 fe43 	bl	8005010 <USB_CoreInit>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0ce      	b.n	800253a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fe74 	bl	8005090 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e04c      	b.n	8002448 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	3301      	adds	r3, #1
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	b298      	uxth	r0, r3
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3336      	adds	r3, #54	; 0x36
 80023ec:	4602      	mov	r2, r0
 80023ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3303      	adds	r3, #3
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	3338      	adds	r3, #56	; 0x38
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	333c      	adds	r3, #60	; 0x3c
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3340      	adds	r3, #64	; 0x40
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	3301      	adds	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	d3ad      	bcc.n	80023ae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e044      	b.n	80024e2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	f203 1369 	addw	r3, r3, #361	; 0x169
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	3301      	adds	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d3b5      	bcc.n	8002458 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	687e      	ldr	r6, [r7, #4]
 80024f4:	466d      	mov	r5, sp
 80024f6:	f106 0410 	add.w	r4, r6, #16
 80024fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	602b      	str	r3, [r5, #0]
 8002502:	1d33      	adds	r3, r6, #4
 8002504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	f002 fdce 	bl	80050a8 <USB_DevInit>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e00d      	b.n	800253a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f005 fa80 	bl	8007a38 <USB_DevDisconnect>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002542 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_PCD_Start+0x16>
 8002554:	2302      	movs	r3, #2
 8002556:	e016      	b.n	8002586 <HAL_PCD_Start+0x44>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fd63 	bl	8005030 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800256a:	2101      	movs	r1, #1
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f007 fb0e 	bl	8009b8e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f005 fa54 	bl	8007a24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b088      	sub	sp, #32
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f005 fa56 	bl	8007a4c <USB_ReadInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025aa:	d102      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fb5f 	bl	8002c70 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f005 fa48 	bl	8007a4c <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c6:	d112      	bne.n	80025ee <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025da:	b292      	uxth	r2, r2
 80025dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f007 f8dc 	bl	800979e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025e6:	2100      	movs	r1, #0
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f923 	bl	8002834 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 fa2a 	bl	8007a4c <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002602:	d10b      	bne.n	800261c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800260c:	b29a      	uxth	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002616:	b292      	uxth	r2, r2
 8002618:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f005 fa13 	bl	8007a4c <USB_ReadInterrupts>
 8002626:	4603      	mov	r3, r0
 8002628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002630:	d10b      	bne.n	800264a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002644:	b292      	uxth	r2, r2
 8002646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f005 f9fc 	bl	8007a4c <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265e:	d126      	bne.n	80026ae <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	b292      	uxth	r2, r2
 8002674:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0208 	bic.w	r2, r2, #8
 800268a:	b292      	uxth	r2, r2
 800268c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f007 f8bd 	bl	8009810 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026a8:	b292      	uxth	r2, r2
 80026aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f005 f9ca 	bl	8007a4c <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c2:	f040 8082 	bne.w	80027ca <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	77fb      	strb	r3, [r7, #31]
 80026ca:	e010      	b.n	80026ee <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	7ffb      	ldrb	r3, [r7, #31]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	441a      	add	r2, r3
 80026d8:	7ffb      	ldrb	r3, [r7, #31]
 80026da:	8812      	ldrh	r2, [r2, #0]
 80026dc:	b292      	uxth	r2, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	3320      	adds	r3, #32
 80026e2:	443b      	add	r3, r7
 80026e4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	3301      	adds	r3, #1
 80026ec:	77fb      	strb	r3, [r7, #31]
 80026ee:	7ffb      	ldrb	r3, [r7, #31]
 80026f0:	2b07      	cmp	r3, #7
 80026f2:	d9eb      	bls.n	80026cc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	b292      	uxth	r2, r2
 8002708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	b292      	uxth	r2, r2
 8002720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002724:	bf00      	nop
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800272e:	b29b      	uxth	r3, r3
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f6      	beq.n	8002726 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274a:	b292      	uxth	r2, r2
 800274c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002750:	2300      	movs	r3, #0
 8002752:	77fb      	strb	r3, [r7, #31]
 8002754:	e00f      	b.n	8002776 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002756:	7ffb      	ldrb	r3, [r7, #31]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4611      	mov	r1, r2
 800275e:	7ffa      	ldrb	r2, [r7, #31]
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	440a      	add	r2, r1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	3320      	adds	r3, #32
 8002768:	443b      	add	r3, r7
 800276a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800276e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002770:	7ffb      	ldrb	r3, [r7, #31]
 8002772:	3301      	adds	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	7ffb      	ldrb	r3, [r7, #31]
 8002778:	2b07      	cmp	r3, #7
 800277a:	d9ec      	bls.n	8002756 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002784:	b29a      	uxth	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0208 	orr.w	r2, r2, #8
 800278e:	b292      	uxth	r2, r2
 8002790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800279c:	b29a      	uxth	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a6:	b292      	uxth	r2, r2
 80027a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0204 	orr.w	r2, r2, #4
 80027be:	b292      	uxth	r2, r2
 80027c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f007 f809 	bl	80097dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 f93c 	bl	8007a4c <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027de:	d10e      	bne.n	80027fe <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027f2:	b292      	uxth	r2, r2
 80027f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f006 ffc2 	bl	8009782 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f005 f922 	bl	8007a4c <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002812:	d10b      	bne.n	800282c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002826:	b292      	uxth	r2, r2
 8002828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800282c:	bf00      	nop
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_PCD_SetAddress+0x1a>
 800284a:	2302      	movs	r3, #2
 800284c:	e013      	b.n	8002876 <HAL_PCD_SetAddress+0x42>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f005 f8c9 	bl	80079fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	4608      	mov	r0, r1
 8002888:	4611      	mov	r1, r2
 800288a:	461a      	mov	r2, r3
 800288c:	4603      	mov	r3, r0
 800288e:	70fb      	strb	r3, [r7, #3]
 8002890:	460b      	mov	r3, r1
 8002892:	803b      	strh	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800289c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da0e      	bge.n	80028c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00e      	b.n	80028e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 0207 	and.w	r2, r3, #7
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028ec:	883a      	ldrh	r2, [r7, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	78ba      	ldrb	r2, [r7, #2]
 80028f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	785b      	ldrb	r3, [r3, #1]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800290a:	78bb      	ldrb	r3, [r7, #2]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d102      	bne.n	8002916 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_PCD_EP_Open+0xa6>
 8002920:	2302      	movs	r3, #2
 8002922:	e00e      	b.n	8002942 <HAL_PCD_EP_Open+0xc4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68f9      	ldr	r1, [r7, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	f002 fbd8 	bl	80050e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002940:	7afb      	ldrb	r3, [r7, #11]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800295a:	2b00      	cmp	r3, #0
 800295c:	da0e      	bge.n	800297c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	705a      	strb	r2, [r3, #1]
 800297a:	e00e      	b.n	800299a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_PCD_EP_Close+0x6a>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e00e      	b.n	80029d2 <HAL_PCD_EP_Close+0x88>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68f9      	ldr	r1, [r7, #12]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fefa 	bl	80057bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	460b      	mov	r3, r1
 80029e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	f003 0207 	and.w	r2, r3, #7
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2200      	movs	r2, #0
 8002a18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6979      	ldr	r1, [r7, #20]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 f8ac 	bl	8005b94 <USB_EPStartXfer>
 8002a3c:	e005      	b.n	8002a4a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6979      	ldr	r1, [r7, #20]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 f8a5 	bl	8005b94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	f003 0207 	and.w	r2, r3, #7
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a92:	7afb      	ldrb	r3, [r7, #11]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2201      	movs	r2, #1
 8002acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d106      	bne.n	8002af2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6979      	ldr	r1, [r7, #20]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 f852 	bl	8005b94 <USB_EPStartXfer>
 8002af0:	e005      	b.n	8002afe <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6979      	ldr	r1, [r7, #20]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 f84b 	bl	8005b94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	f003 0207 	and.w	r2, r3, #7
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d901      	bls.n	8002b26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e04c      	b.n	8002bc0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	da0e      	bge.n	8002b4c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	705a      	strb	r2, [r3, #1]
 8002b4a:	e00c      	b.n	8002b66 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_PCD_EP_SetStall+0x7e>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e01c      	b.n	8002bc0 <HAL_PCD_EP_SetStall+0xb8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68f9      	ldr	r1, [r7, #12]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 fe35 	bl	8007804 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d108      	bne.n	8002bb6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f004 ff5a 	bl	8007a6a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 020f 	and.w	r2, r3, #15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d901      	bls.n	8002be6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e040      	b.n	8002c68 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	da0e      	bge.n	8002c0c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	705a      	strb	r2, [r3, #1]
 8002c0a:	e00e      	b.n	8002c2a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 0207 	and.w	r2, r3, #7
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_PCD_EP_ClrStall+0x82>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e00e      	b.n	8002c68 <HAL_PCD_EP_ClrStall+0xa0>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fe23 	bl	80078a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08e      	sub	sp, #56	; 0x38
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c78:	e2ec      	b.n	8003254 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c82:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002c90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 8161 	bne.w	8002f5c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d152      	bne.n	8002d4a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb4:	81fb      	strh	r3, [r7, #14]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3328      	adds	r3, #40	; 0x28
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	441a      	add	r2, r3
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d08:	2100      	movs	r1, #0
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f006 fd1f 	bl	800974e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 829b 	beq.w	8003254 <PCD_EP_ISR_Handler+0x5e4>
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 8296 	bne.w	8003254 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d48:	e284      	b.n	8003254 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d034      	beq.n	8002dce <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	3306      	adds	r3, #6
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f004 feb1 	bl	8007b0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002db4:	4013      	ands	r3, r2
 8002db6:	823b      	strh	r3, [r7, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	8a3a      	ldrh	r2, [r7, #16]
 8002dbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f006 fc94 	bl	80096f4 <HAL_PCD_SetupStageCallback>
 8002dcc:	e242      	b.n	8003254 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f280 823e 	bge.w	8003254 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002de4:	4013      	ands	r3, r2
 8002de6:	83bb      	strh	r3, [r7, #28]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	8bba      	ldrh	r2, [r7, #28]
 8002dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002df2:	b292      	uxth	r2, r2
 8002df4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3306      	adds	r3, #6
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d019      	beq.n	8002e5e <PCD_EP_ISR_Handler+0x1ee>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d015      	beq.n	8002e5e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	6959      	ldr	r1, [r3, #20]
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f004 fe61 	bl	8007b0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	441a      	add	r2, r3
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e56:	2100      	movs	r1, #0
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f006 fc5d 	bl	8009718 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 81f2 	bne.w	8003254 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4413      	add	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d112      	bne.n	8002ebe <PCD_EP_ISR_Handler+0x24e>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	801a      	strh	r2, [r3, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	e02f      	b.n	8002f1e <PCD_EP_ISR_Handler+0x2ae>
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ec4:	d813      	bhi.n	8002eee <PCD_EP_ISR_Handler+0x27e>
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <PCD_EP_ISR_Handler+0x270>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	3301      	adds	r3, #1
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	029b      	lsls	r3, r3, #10
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	e017      	b.n	8002f1e <PCD_EP_ISR_Handler+0x2ae>
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <PCD_EP_ISR_Handler+0x298>
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	3b01      	subs	r3, #1
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	029b      	lsls	r3, r3, #10
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2e:	827b      	strh	r3, [r7, #18]
 8002f30:	8a7b      	ldrh	r3, [r7, #18]
 8002f32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f36:	827b      	strh	r3, [r7, #18]
 8002f38:	8a7b      	ldrh	r3, [r7, #18]
 8002f3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f3e:	827b      	strh	r3, [r7, #18]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	8a7b      	ldrh	r3, [r7, #18]
 8002f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	8013      	strh	r3, [r2, #0]
 8002f5a:	e17b      	b.n	8003254 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f6e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f280 80ea 	bge.w	800314c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f8e:	4013      	ands	r3, r2
 8002f90:	853b      	strh	r3, [r7, #40]	; 0x28
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fa6:	b292      	uxth	r2, r2
 8002fa8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002faa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	7b1b      	ldrb	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d122      	bne.n	800300e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3306      	adds	r3, #6
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002ff2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8087 	beq.w	8003108 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	6959      	ldr	r1, [r3, #20]
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	88da      	ldrh	r2, [r3, #6]
 8003006:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003008:	f004 fd7f 	bl	8007b0a <USB_ReadPMA>
 800300c:	e07c      	b.n	8003108 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	78db      	ldrb	r3, [r3, #3]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d108      	bne.n	8003028 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003016:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003018:	461a      	mov	r2, r3
 800301a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f927 	bl	8003270 <HAL_PCD_EP_DB_Receive>
 8003022:	4603      	mov	r3, r0
 8003024:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003026:	e06f      	b.n	8003108 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	847b      	strh	r3, [r7, #34]	; 0x22
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	441a      	add	r2, r3
 8003052:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800305c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003064:	b29b      	uxth	r3, r3
 8003066:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d021      	beq.n	80030c6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	3302      	adds	r3, #2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030aa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80030ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02a      	beq.n	8003108 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	6959      	ldr	r1, [r3, #20]
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	891a      	ldrh	r2, [r3, #8]
 80030be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030c0:	f004 fd23 	bl	8007b0a <USB_ReadPMA>
 80030c4:	e020      	b.n	8003108 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	3306      	adds	r3, #6
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80030f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	6959      	ldr	r1, [r3, #20]
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	895a      	ldrh	r2, [r3, #10]
 8003102:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003104:	f004 fd01 	bl	8007b0a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800310e:	441a      	add	r2, r3
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800311a:	441a      	add	r2, r3
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <PCD_EP_ISR_Handler+0x4c2>
 8003128:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	429a      	cmp	r2, r3
 8003130:	d206      	bcs.n	8003140 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f006 faed 	bl	8009718 <HAL_PCD_DataOutStageCallback>
 800313e:	e005      	b.n	800314c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003146:	4618      	mov	r0, r3
 8003148:	f002 fd24 	bl	8005b94 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800314c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d07e      	beq.n	8003254 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003156:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003184:	843b      	strh	r3, [r7, #32]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	441a      	add	r2, r3
 8003194:	8c3b      	ldrh	r3, [r7, #32]
 8003196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800319e:	b29b      	uxth	r3, r3
 80031a0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	78db      	ldrb	r3, [r3, #3]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d00c      	beq.n	80031c4 <PCD_EP_ISR_Handler+0x554>
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d146      	bne.n	8003248 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80031ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d141      	bne.n	8003248 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	3302      	adds	r3, #2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ec:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	8bfb      	ldrh	r3, [r7, #30]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d906      	bls.n	8003206 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	8bfb      	ldrh	r3, [r7, #30]
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	619a      	str	r2, [r3, #24]
 8003204:	e002      	b.n	800320c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f006 fa97 	bl	800974e <HAL_PCD_DataInStageCallback>
 8003220:	e018      	b.n	8003254 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	8bfb      	ldrh	r3, [r7, #30]
 8003228:	441a      	add	r2, r3
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	8bfb      	ldrh	r3, [r7, #30]
 8003234:	441a      	add	r2, r3
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003240:	4618      	mov	r0, r3
 8003242:	f002 fca7 	bl	8005b94 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003246:	e005      	b.n	8003254 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003248:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800324a:	461a      	mov	r2, r3
 800324c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f91b 	bl	800348a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800325c:	b29b      	uxth	r3, r3
 800325e:	b21b      	sxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	f6ff ad0a 	blt.w	8002c7a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3738      	adds	r7, #56	; 0x38
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d07e      	beq.n	8003386 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	3302      	adds	r3, #2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	8b7b      	ldrh	r3, [r7, #26]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d306      	bcc.n	80032ca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	8b7b      	ldrh	r3, [r7, #26]
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	619a      	str	r2, [r3, #24]
 80032c8:	e002      	b.n	80032d0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d123      	bne.n	8003320 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	833b      	strh	r3, [r7, #24]
 80032f4:	8b3b      	ldrh	r3, [r7, #24]
 80032f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032fa:	833b      	strh	r3, [r7, #24]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	8b3b      	ldrh	r3, [r7, #24]
 800330c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	b29b      	uxth	r3, r3
 800331e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01f      	beq.n	800336a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	82fb      	strh	r3, [r7, #22]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	8afb      	ldrh	r3, [r7, #22]
 8003356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003362:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800336a:	8b7b      	ldrh	r3, [r7, #26]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8087 	beq.w	8003480 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6959      	ldr	r1, [r3, #20]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	891a      	ldrh	r2, [r3, #8]
 800337e:	8b7b      	ldrh	r3, [r7, #26]
 8003380:	f004 fbc3 	bl	8007b0a <USB_ReadPMA>
 8003384:	e07c      	b.n	8003480 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338e:	b29b      	uxth	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	3306      	adds	r3, #6
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	8b7b      	ldrh	r3, [r7, #26]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d306      	bcc.n	80033c8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	8b7b      	ldrh	r3, [r7, #26]
 80033c0:	1ad2      	subs	r2, r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	619a      	str	r2, [r3, #24]
 80033c6:	e002      	b.n	80033ce <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d123      	bne.n	800341e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f0:	83fb      	strh	r3, [r7, #30]
 80033f2:	8bfb      	ldrh	r3, [r7, #30]
 80033f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033f8:	83fb      	strh	r3, [r7, #30]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	441a      	add	r2, r3
 8003408:	8bfb      	ldrh	r3, [r7, #30]
 800340a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800340e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341a:	b29b      	uxth	r3, r3
 800341c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11f      	bne.n	8003468 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	83bb      	strh	r3, [r7, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	8bbb      	ldrh	r3, [r7, #28]
 8003454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003464:	b29b      	uxth	r3, r3
 8003466:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003468:	8b7b      	ldrh	r3, [r7, #26]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6959      	ldr	r1, [r3, #20]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	895a      	ldrh	r2, [r3, #10]
 800347a:	8b7b      	ldrh	r3, [r7, #26]
 800347c:	f004 fb45 	bl	8007b0a <USB_ReadPMA>
    }
  }

  return count;
 8003480:	8b7b      	ldrh	r3, [r7, #26]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b0a2      	sub	sp, #136	; 0x88
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	4613      	mov	r3, r2
 8003496:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 81c7 	beq.w	8003832 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	3302      	adds	r3, #2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034d8:	429a      	cmp	r2, r3
 80034da:	d907      	bls.n	80034ec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034e4:	1ad2      	subs	r2, r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	619a      	str	r2, [r3, #24]
 80034ea:	e002      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2200      	movs	r2, #0
 80034f0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 80b9 	bne.w	800366e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	785b      	ldrb	r3, [r3, #1]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d126      	bne.n	8003552 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003512:	b29b      	uxth	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	4413      	add	r3, r2
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	011a      	lsls	r2, r3, #4
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	4413      	add	r3, r2
 8003526:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003536:	b29a      	uxth	r2, r3
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800354a:	b29a      	uxth	r2, r3
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	801a      	strh	r2, [r3, #0]
 8003550:	e01a      	b.n	8003588 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d116      	bne.n	8003588 <HAL_PCD_EP_DB_Transmit+0xfe>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003568:	b29b      	uxth	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	4413      	add	r3, r2
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	011a      	lsls	r2, r3, #4
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	4413      	add	r3, r2
 800357c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2200      	movs	r2, #0
 8003586:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	623b      	str	r3, [r7, #32]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	785b      	ldrb	r3, [r3, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d126      	bne.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4413      	add	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	011a      	lsls	r2, r3, #4
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	4413      	add	r3, r2
 80035b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	801a      	strh	r2, [r3, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035dc:	b29a      	uxth	r2, r3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	e017      	b.n	8003614 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	785b      	ldrb	r3, [r3, #1]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d113      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	4413      	add	r3, r2
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	011a      	lsls	r2, r3, #4
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	4413      	add	r3, r2
 8003608:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2200      	movs	r2, #0
 8003612:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4619      	mov	r1, r3
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f006 f897 	bl	800974e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 82d4 	beq.w	8003bd4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003646:	827b      	strh	r3, [r7, #18]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	8a7b      	ldrh	r3, [r7, #18]
 8003658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800365c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003668:	b29b      	uxth	r3, r3
 800366a:	8013      	strh	r3, [r2, #0]
 800366c:	e2b2      	b.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d021      	beq.n	80036bc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	441a      	add	r2, r3
 80036a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	f040 8286 	bne.w	8003bd4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036d0:	441a      	add	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036de:	441a      	add	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d309      	bcc.n	8003704 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6a1a      	ldr	r2, [r3, #32]
 80036fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fc:	1ad2      	subs	r2, r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	621a      	str	r2, [r3, #32]
 8003702:	e015      	b.n	8003730 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800370c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800371a:	e009      	b.n	8003730 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2200      	movs	r2, #0
 800372e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	785b      	ldrb	r3, [r3, #1]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d155      	bne.n	80037e4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	4413      	add	r3, r2
 800374e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	011a      	lsls	r2, r3, #4
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	4413      	add	r3, r2
 800375a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d112      	bne.n	800378c <HAL_PCD_EP_DB_Transmit+0x302>
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003770:	b29a      	uxth	r2, r3
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	801a      	strh	r2, [r3, #0]
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003784:	b29a      	uxth	r2, r3
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	e047      	b.n	800381c <HAL_PCD_EP_DB_Transmit+0x392>
 800378c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378e:	2b3e      	cmp	r3, #62	; 0x3e
 8003790:	d811      	bhi.n	80037b6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	64bb      	str	r3, [r7, #72]	; 0x48
 8003798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80037a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a4:	3301      	adds	r3, #1
 80037a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	029b      	lsls	r3, r3, #10
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	801a      	strh	r2, [r3, #0]
 80037b4:	e032      	b.n	800381c <HAL_PCD_EP_DB_Transmit+0x392>
 80037b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80037bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_PCD_EP_DB_Transmit+0x342>
 80037c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c8:	3b01      	subs	r3, #1
 80037ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80037cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	029b      	lsls	r3, r3, #10
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037dc:	b29a      	uxth	r2, r3
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	801a      	strh	r2, [r3, #0]
 80037e2:	e01b      	b.n	800381c <HAL_PCD_EP_DB_Transmit+0x392>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d117      	bne.n	800381c <HAL_PCD_EP_DB_Transmit+0x392>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	643b      	str	r3, [r7, #64]	; 0x40
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003800:	4413      	add	r3, r2
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	011a      	lsls	r2, r3, #4
 800380a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380c:	4413      	add	r3, r2
 800380e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003816:	b29a      	uxth	r2, r3
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	6959      	ldr	r1, [r3, #20]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	891a      	ldrh	r2, [r3, #8]
 8003828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382a:	b29b      	uxth	r3, r3
 800382c:	f004 f928 	bl	8007a80 <USB_WritePMA>
 8003830:	e1d0      	b.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383a:	b29b      	uxth	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	3306      	adds	r3, #6
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800385a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003866:	429a      	cmp	r2, r3
 8003868:	d307      	bcc.n	800387a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	619a      	str	r2, [r3, #24]
 8003878:	e002      	b.n	8003880 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 80c4 	bne.w	8003a12 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d126      	bne.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x456>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a6:	4413      	add	r3, r2
 80038a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	011a      	lsls	r2, r3, #4
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	4413      	add	r3, r2
 80038b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80038ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d8:	b29a      	uxth	r2, r3
 80038da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038dc:	801a      	strh	r2, [r3, #0]
 80038de:	e01a      	b.n	8003916 <HAL_PCD_EP_DB_Transmit+0x48c>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d116      	bne.n	8003916 <HAL_PCD_EP_DB_Transmit+0x48c>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	677b      	str	r3, [r7, #116]	; 0x74
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038fc:	4413      	add	r3, r2
 80038fe:	677b      	str	r3, [r7, #116]	; 0x74
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	011a      	lsls	r2, r3, #4
 8003906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003908:	4413      	add	r3, r2
 800390a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800390e:	673b      	str	r3, [r7, #112]	; 0x70
 8003910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003912:	2200      	movs	r2, #0
 8003914:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	67bb      	str	r3, [r7, #120]	; 0x78
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	785b      	ldrb	r3, [r3, #1]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d12f      	bne.n	8003984 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003934:	b29b      	uxth	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800393c:	4413      	add	r3, r2
 800393e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	011a      	lsls	r2, r3, #4
 8003948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800394c:	4413      	add	r3, r2
 800394e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003962:	b29a      	uxth	r2, r3
 8003964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397a:	b29a      	uxth	r2, r3
 800397c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e017      	b.n	80039b4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d113      	bne.n	80039b4 <HAL_PCD_EP_DB_Transmit+0x52a>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003994:	b29b      	uxth	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399a:	4413      	add	r3, r2
 800399c:	67bb      	str	r3, [r7, #120]	; 0x78
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	011a      	lsls	r2, r3, #4
 80039a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a6:	4413      	add	r3, r2
 80039a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039b0:	2200      	movs	r2, #0
 80039b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f005 fec7 	bl	800974e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8104 	bne.w	8003bd4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8013      	strh	r3, [r2, #0]
 8003a10:	e0e0      	b.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d121      	bne.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	f040 80b4 	bne.w	8003bd4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a74:	441a      	add	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a82:	441a      	add	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d309      	bcc.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6a1a      	ldr	r2, [r3, #32]
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	621a      	str	r2, [r3, #32]
 8003aa6:	e015      	b.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d107      	bne.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003ab0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ab4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003abe:	e009      	b.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d155      	bne.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x704>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af6:	4413      	add	r3, r2
 8003af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	011a      	lsls	r2, r3, #4
 8003b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b02:	4413      	add	r3, r2
 8003b04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d112      	bne.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	e044      	b.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b38:	2b3e      	cmp	r3, #62	; 0x3e
 8003b3a:	d811      	bhi.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	657b      	str	r3, [r7, #84]	; 0x54
 8003b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	3301      	adds	r3, #1
 8003b50:	657b      	str	r3, [r7, #84]	; 0x54
 8003b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	e02f      	b.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	657b      	str	r3, [r7, #84]	; 0x54
 8003b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b72:	3b01      	subs	r3, #1
 8003b74:	657b      	str	r3, [r7, #84]	; 0x54
 8003b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	029b      	lsls	r3, r3, #10
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	e018      	b.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	785b      	ldrb	r3, [r3, #1]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d114      	bne.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ba4:	4413      	add	r3, r2
 8003ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	011a      	lsls	r2, r3, #4
 8003bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bbe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6959      	ldr	r1, [r3, #20]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	895a      	ldrh	r2, [r3, #10]
 8003bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f003 ff56 	bl	8007a80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bee:	823b      	strh	r3, [r7, #16]
 8003bf0:	8a3b      	ldrh	r3, [r7, #16]
 8003bf2:	f083 0310 	eor.w	r3, r3, #16
 8003bf6:	823b      	strh	r3, [r7, #16]
 8003bf8:	8a3b      	ldrh	r3, [r7, #16]
 8003bfa:	f083 0320 	eor.w	r3, r3, #32
 8003bfe:	823b      	strh	r3, [r7, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	8a3b      	ldrh	r3, [r7, #16]
 8003c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3788      	adds	r7, #136	; 0x88
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	817b      	strh	r3, [r7, #10]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c40:	897b      	ldrh	r3, [r7, #10]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c4c:	897b      	ldrh	r3, [r7, #10]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e009      	b.n	8003c78 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c64:	897a      	ldrh	r2, [r7, #10]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c78:	893b      	ldrh	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d107      	bne.n	8003c8e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2200      	movs	r2, #0
 8003c82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	80da      	strh	r2, [r3, #6]
 8003c8c:	e00b      	b.n	8003ca6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2201      	movs	r2, #1
 8003c92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e272      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8087 	beq.w	8003de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd4:	4b92      	ldr	r3, [pc, #584]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d00c      	beq.n	8003cfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ce0:	4b8f      	ldr	r3, [pc, #572]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d112      	bne.n	8003d12 <HAL_RCC_OscConfig+0x5e>
 8003cec:	4b8c      	ldr	r3, [pc, #560]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf8:	d10b      	bne.n	8003d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfa:	4b89      	ldr	r3, [pc, #548]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d06c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x12c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d168      	bne.n	8003de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e24c      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x76>
 8003d1c:	4b80      	ldr	r3, [pc, #512]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7f      	ldr	r2, [pc, #508]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e02e      	b.n	8003d88 <HAL_RCC_OscConfig+0xd4>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x98>
 8003d32:	4b7b      	ldr	r3, [pc, #492]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7a      	ldr	r2, [pc, #488]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b78      	ldr	r3, [pc, #480]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a77      	ldr	r2, [pc, #476]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e01d      	b.n	8003d88 <HAL_RCC_OscConfig+0xd4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0xbc>
 8003d56:	4b72      	ldr	r3, [pc, #456]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a71      	ldr	r2, [pc, #452]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b6f      	ldr	r3, [pc, #444]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6e      	ldr	r2, [pc, #440]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0xd4>
 8003d70:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6a      	ldr	r2, [pc, #424]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a67      	ldr	r2, [pc, #412]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd f8b2 	bl	8000ef8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fd f8ae 	bl	8000ef8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e200      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0xe4>
 8003db6:	e014      	b.n	8003de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7fd f89e 	bl	8000ef8 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7fd f89a 	bl	8000ef8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1ec      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	4b53      	ldr	r3, [pc, #332]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x10c>
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d063      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dee:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dfa:	4b49      	ldr	r3, [pc, #292]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d11c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x18c>
 8003e06:	4b46      	ldr	r3, [pc, #280]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e12:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_RCC_OscConfig+0x176>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d001      	beq.n	8003e2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e1c0      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2a:	4b3d      	ldr	r3, [pc, #244]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4939      	ldr	r1, [pc, #228]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	e03a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e48:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd f853 	bl	8000ef8 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e56:	f7fd f84f 	bl	8000ef8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e1a1      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e74:	4b2a      	ldr	r3, [pc, #168]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4927      	ldr	r1, [pc, #156]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
 8003e88:	e015      	b.n	8003eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd f832 	bl	8000ef8 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e98:	f7fd f82e 	bl	8000ef8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e180      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d03a      	beq.n	8003f38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d019      	beq.n	8003efe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed0:	f7fd f812 	bl	8000ef8 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed8:	f7fd f80e 	bl	8000ef8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e160      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eea:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f000 fac4 	bl	8004484 <RCC_Delay>
 8003efc:	e01c      	b.n	8003f38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_RCC_OscConfig+0x274>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fc fff8 	bl	8000ef8 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0a:	e00f      	b.n	8003f2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fc fff4 	bl	8000ef8 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d908      	bls.n	8003f2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e146      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000
 8003f24:	42420000 	.word	0x42420000
 8003f28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	4b92      	ldr	r3, [pc, #584]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e9      	bne.n	8003f0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80a6 	beq.w	8004092 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4a:	4b8b      	ldr	r3, [pc, #556]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f56:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	4a87      	ldr	r2, [pc, #540]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	61d3      	str	r3, [r2, #28]
 8003f62:	4b85      	ldr	r3, [pc, #532]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b82      	ldr	r3, [pc, #520]	; (800417c <HAL_RCC_OscConfig+0x4c8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b7f      	ldr	r3, [pc, #508]	; (800417c <HAL_RCC_OscConfig+0x4c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a7e      	ldr	r2, [pc, #504]	; (800417c <HAL_RCC_OscConfig+0x4c8>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fc ffb5 	bl	8000ef8 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fc ffb1 	bl	8000ef8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b64      	cmp	r3, #100	; 0x64
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e103      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b75      	ldr	r3, [pc, #468]	; (800417c <HAL_RCC_OscConfig+0x4c8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x312>
 8003fb8:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4a6e      	ldr	r2, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6213      	str	r3, [r2, #32]
 8003fc4:	e02d      	b.n	8004022 <HAL_RCC_OscConfig+0x36e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x334>
 8003fce:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4a69      	ldr	r2, [pc, #420]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6213      	str	r3, [r2, #32]
 8003fda:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4a66      	ldr	r2, [pc, #408]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	6213      	str	r3, [r2, #32]
 8003fe6:	e01c      	b.n	8004022 <HAL_RCC_OscConfig+0x36e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d10c      	bne.n	800400a <HAL_RCC_OscConfig+0x356>
 8003ff0:	4b61      	ldr	r3, [pc, #388]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	4a60      	ldr	r2, [pc, #384]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	6213      	str	r3, [r2, #32]
 8003ffc:	4b5e      	ldr	r3, [pc, #376]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4a5d      	ldr	r2, [pc, #372]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6213      	str	r3, [r2, #32]
 8004008:	e00b      	b.n	8004022 <HAL_RCC_OscConfig+0x36e>
 800400a:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4a5a      	ldr	r2, [pc, #360]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6213      	str	r3, [r2, #32]
 8004016:	4b58      	ldr	r3, [pc, #352]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a57      	ldr	r2, [pc, #348]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d015      	beq.n	8004056 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402a:	f7fc ff65 	bl	8000ef8 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fc ff61 	bl	8000ef8 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e0b1      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	4b4b      	ldr	r3, [pc, #300]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ee      	beq.n	8004032 <HAL_RCC_OscConfig+0x37e>
 8004054:	e014      	b.n	8004080 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fc ff4f 	bl	8000ef8 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fc ff4b 	bl	8000ef8 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e09b      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004074:	4b40      	ldr	r3, [pc, #256]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ee      	bne.n	800405e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004086:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004090:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8087 	beq.w	80041aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409c:	4b36      	ldr	r3, [pc, #216]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 030c 	and.w	r3, r3, #12
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d061      	beq.n	800416c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d146      	bne.n	800413e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4b33      	ldr	r3, [pc, #204]	; (8004180 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fc ff1f 	bl	8000ef8 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040be:	f7fc ff1b 	bl	8000ef8 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e06d      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d108      	bne.n	80040f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	4921      	ldr	r1, [pc, #132]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f8:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a19      	ldr	r1, [r3, #32]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	430b      	orrs	r3, r1
 800410a:	491b      	ldr	r1, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x4cc>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fc feef 	bl	8000ef8 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411e:	f7fc feeb 	bl	8000ef8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e03d      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x46a>
 800413c:	e035      	b.n	80041aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCC_OscConfig+0x4cc>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fc fed8 	bl	8000ef8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fc fed4 	bl	8000ef8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e026      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x498>
 800416a:	e01e      	b.n	80041aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e019      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
 8004178:	40021000 	.word	0x40021000
 800417c:	40007000 	.word	0x40007000
 8004180:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x500>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	429a      	cmp	r2, r3
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40021000 	.word	0x40021000

080041b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0d0      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d910      	bls.n	80041fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b67      	ldr	r3, [pc, #412]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 0207 	bic.w	r2, r3, #7
 80041e2:	4965      	ldr	r1, [pc, #404]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0b8      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4a58      	ldr	r2, [pc, #352]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800421e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800422c:	4b53      	ldr	r3, [pc, #332]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b50      	ldr	r3, [pc, #320]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	494d      	ldr	r1, [pc, #308]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	4313      	orrs	r3, r2
 8004248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d040      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d115      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07f      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e073      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e06b      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4936      	ldr	r1, [pc, #216]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a8:	f7fc fe26 	bl	8000ef8 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fc fe22 	bl	8000ef8 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e053      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d210      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	4922      	ldr	r1, [pc, #136]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e032      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4916      	ldr	r1, [pc, #88]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	490e      	ldr	r1, [pc, #56]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004346:	f000 f821 	bl	800438c <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490a      	ldr	r1, [pc, #40]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_RCC_ClockConfig+0x1cc>)
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1d0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fc fd84 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40022000 	.word	0x40022000
 800437c:	40021000 	.word	0x40021000
 8004380:	0800a648 	.word	0x0800a648
 8004384:	20000044 	.word	0x20000044
 8004388:	20000048 	.word	0x20000048

0800438c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	b490      	push	{r4, r7}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004392:	4b29      	ldr	r3, [pc, #164]	; (8004438 <HAL_RCC_GetSysClockFreq+0xac>)
 8004394:	1d3c      	adds	r4, r7, #4
 8004396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800439c:	f240 2301 	movw	r3, #513	; 0x201
 80043a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043b6:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_RCC_GetSysClockFreq+0xb0>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x40>
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x46>
 80043ca:	e02b      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043ce:	623b      	str	r3, [r7, #32]
      break;
 80043d0:	e02b      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	0c9b      	lsrs	r3, r3, #18
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	3328      	adds	r3, #40	; 0x28
 80043dc:	443b      	add	r3, r7
 80043de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_RCC_GetSysClockFreq+0xb0>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	0c5b      	lsrs	r3, r3, #17
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	3328      	adds	r3, #40	; 0x28
 80043fa:	443b      	add	r3, r7
 80043fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004400:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004406:	fb03 f202 	mul.w	r2, r3, r2
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
 8004412:	e004      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	623b      	str	r3, [r7, #32]
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004426:	623b      	str	r3, [r7, #32]
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	6a3b      	ldr	r3, [r7, #32]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3728      	adds	r7, #40	; 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bc90      	pop	{r4, r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	0800a5e0 	.word	0x0800a5e0
 800443c:	40021000 	.word	0x40021000
 8004440:	007a1200 	.word	0x007a1200
 8004444:	003d0900 	.word	0x003d0900

08004448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <HAL_RCC_GetHCLKFreq+0x10>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	20000044 	.word	0x20000044

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004460:	f7ff fff2 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	0adb      	lsrs	r3, r3, #11
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	0800a658 	.word	0x0800a658

08004484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <RCC_Delay+0x34>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <RCC_Delay+0x38>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0a5b      	lsrs	r3, r3, #9
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044a0:	bf00      	nop
  }
  while (Delay --);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1e5a      	subs	r2, r3, #1
 80044a6:	60fa      	str	r2, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f9      	bne.n	80044a0 <RCC_Delay+0x1c>
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	20000044 	.word	0x20000044
 80044bc:	10624dd3 	.word	0x10624dd3

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d07d      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e0:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10d      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	4a4b      	ldr	r2, [pc, #300]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	61d3      	str	r3, [r2, #28]
 80044f8:	4b49      	ldr	r3, [pc, #292]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004504:	2301      	movs	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	4b46      	ldr	r3, [pc, #280]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d118      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004514:	4b43      	ldr	r3, [pc, #268]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a42      	ldr	r2, [pc, #264]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004520:	f7fc fcea 	bl	8000ef8 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	e008      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004528:	f7fc fce6 	bl	8000ef8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e06d      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	4b3a      	ldr	r3, [pc, #232]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d02e      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d027      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004564:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800456e:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004570:	2201      	movs	r2, #1
 8004572:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004574:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800457a:	4a29      	ldr	r2, [pc, #164]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d014      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fc fcb5 	bl	8000ef8 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fc fcb1 	bl	8000ef8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e036      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b4:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4917      	ldr	r1, [pc, #92]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	4a13      	ldr	r2, [pc, #76]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	490b      	ldr	r1, [pc, #44]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d008      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	4904      	ldr	r1, [pc, #16]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
 8004628:	42420440 	.word	0x42420440

0800462c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b08d      	sub	sp, #52	; 0x34
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004634:	4b58      	ldr	r3, [pc, #352]	; (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004636:	f107 040c 	add.w	r4, r7, #12
 800463a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800463c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004640:	f240 2301 	movw	r3, #513	; 0x201
 8004644:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	2300      	movs	r3, #0
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464e:	2300      	movs	r3, #0
 8004650:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	2300      	movs	r3, #0
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b10      	cmp	r3, #16
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b10      	cmp	r3, #16
 8004664:	f200 808e 	bhi.w	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d049      	beq.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d079      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004674:	e086      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004676:	4b49      	ldr	r3, [pc, #292]	; (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800467c:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d07f      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	0c9b      	lsrs	r3, r3, #18
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	3330      	adds	r3, #48	; 0x30
 8004692:	443b      	add	r3, r7
 8004694:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004698:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046a4:	4b3d      	ldr	r3, [pc, #244]	; (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	0c5b      	lsrs	r3, r3, #17
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	3330      	adds	r3, #48	; 0x30
 80046b0:	443b      	add	r3, r7
 80046b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046c2:	4a37      	ldr	r2, [pc, #220]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d2:	e004      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	4a33      	ldr	r2, [pc, #204]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046de:	4b2f      	ldr	r3, [pc, #188]	; (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ea:	d102      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80046f0:	e04a      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004700:	e042      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004712:	d108      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
 8004724:	e01f      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004730:	d109      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004732:	4b1a      	ldr	r3, [pc, #104]	; (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800473e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
 8004744:	e00f      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004750:	d11c      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800475e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004764:	e012      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004766:	e011      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004768:	f7ff fe78 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	0b9b      	lsrs	r3, r3, #14
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	3301      	adds	r3, #1
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004782:	e004      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004784:	bf00      	nop
 8004786:	e002      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800478c:	bf00      	nop
    }
  }
  return (frequency);
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004790:	4618      	mov	r0, r3
 8004792:	3734      	adds	r7, #52	; 0x34
 8004794:	46bd      	mov	sp, r7
 8004796:	bd90      	pop	{r4, r7, pc}
 8004798:	0800a5f0 	.word	0x0800a5f0
 800479c:	40021000 	.word	0x40021000
 80047a0:	007a1200 	.word	0x007a1200
 80047a4:	003d0900 	.word	0x003d0900
 80047a8:	aaaaaaab 	.word	0xaaaaaaab

080047ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e041      	b.n	8004842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc fa60 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f000 faa8 	bl	8004d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d001      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e03a      	b.n	80048da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_TIM_Base_Start_IT+0x98>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00e      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x58>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488e:	d009      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x58>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x58>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_TIM_Base_Start_IT+0xa0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d111      	bne.n	80048c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d010      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	e007      	b.n	80048d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800

080048f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10f      	bne.n	8004938 <HAL_TIM_Base_Stop_IT+0x48>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	f240 4344 	movw	r3, #1092	; 0x444
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <HAL_TIM_Base_Stop_IT+0x48>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0202 	mvn.w	r2, #2
 8004978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9ba 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9ad 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f9bc 	bl	8004d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d122      	bne.n	80049fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d11b      	bne.n	80049fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0204 	mvn.w	r2, #4
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f990 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f983 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f992 	bl	8004d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d122      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d11b      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0208 	mvn.w	r2, #8
 8004a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2204      	movs	r2, #4
 8004a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f966 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004a3c:	e005      	b.n	8004a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f959 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f968 	bl	8004d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d122      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0210 	mvn.w	r2, #16
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f93c 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f92f 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f93e 	bl	8004d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0201 	mvn.w	r2, #1
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f90a 	bl	8004ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa81 	bl	8004ffe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f902 	bl	8004d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0220 	mvn.w	r2, #32
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fa4c 	bl	8004fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIM_ConfigClockSource+0x18>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0b3      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x180>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bac:	d03e      	beq.n	8004c2c <HAL_TIM_ConfigClockSource+0xd0>
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb2:	f200 8087 	bhi.w	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	f000 8085 	beq.w	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc2:	d87f      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
 8004bc4:	2b70      	cmp	r3, #112	; 0x70
 8004bc6:	d01a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0xa2>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d87b      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
 8004bcc:	2b60      	cmp	r3, #96	; 0x60
 8004bce:	d050      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x116>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d877      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
 8004bd4:	2b50      	cmp	r3, #80	; 0x50
 8004bd6:	d03c      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0xf6>
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d873      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d058      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x136>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d86f      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d064      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x156>
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d86b      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d060      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x156>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d867      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d05c      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x156>
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d05a      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bfc:	e062      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6899      	ldr	r1, [r3, #8]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f000 f970 	bl	8004ef2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	609a      	str	r2, [r3, #8]
      break;
 8004c2a:	e04e      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	6899      	ldr	r1, [r3, #8]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f000 f959 	bl	8004ef2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c4e:	609a      	str	r2, [r3, #8]
      break;
 8004c50:	e03b      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f000 f8d0 	bl	8004e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2150      	movs	r1, #80	; 0x50
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f927 	bl	8004ebe <TIM_ITRx_SetConfig>
      break;
 8004c70:	e02b      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 f8ee 	bl	8004e60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2160      	movs	r1, #96	; 0x60
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f917 	bl	8004ebe <TIM_ITRx_SetConfig>
      break;
 8004c90:	e01b      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 f8b0 	bl	8004e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2140      	movs	r1, #64	; 0x40
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f907 	bl	8004ebe <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e00b      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f000 f8fe 	bl	8004ebe <TIM_ITRx_SetConfig>
        break;
 8004cc2:	e002      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cc4:	bf00      	nop
 8004cc6:	e000      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr
	...

08004d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a29      	ldr	r2, [pc, #164]	; (8004df8 <TIM_Base_SetConfig+0xb8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <TIM_Base_SetConfig+0x30>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5e:	d007      	beq.n	8004d70 <TIM_Base_SetConfig+0x30>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <TIM_Base_SetConfig+0xbc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_Base_SetConfig+0x30>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <TIM_Base_SetConfig+0xc0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d108      	bne.n	8004d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1c      	ldr	r2, [pc, #112]	; (8004df8 <TIM_Base_SetConfig+0xb8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00b      	beq.n	8004da2 <TIM_Base_SetConfig+0x62>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d007      	beq.n	8004da2 <TIM_Base_SetConfig+0x62>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <TIM_Base_SetConfig+0xbc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_Base_SetConfig+0x62>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <TIM_Base_SetConfig+0xc0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a07      	ldr	r2, [pc, #28]	; (8004df8 <TIM_Base_SetConfig+0xb8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d103      	bne.n	8004de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	615a      	str	r2, [r3, #20]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800

08004e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 030a 	bic.w	r3, r3, #10
 8004e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	031b      	lsls	r3, r3, #12
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f043 0307 	orr.w	r3, r3, #7
 8004ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	609a      	str	r2, [r3, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b087      	sub	sp, #28
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
 8004efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	021a      	lsls	r2, r3, #8
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	609a      	str	r2, [r3, #8]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e046      	b.n	8004fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a16      	ldr	r2, [pc, #88]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d009      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800

08004fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005010:	b084      	sub	sp, #16
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	f107 0014 	add.w	r0, r7, #20
 800501e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	b004      	add	sp, #16
 800502e:	4770      	bx	lr

08005030 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005040:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005044:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005064:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005068:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	b29b      	uxth	r3, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	b29b      	uxth	r3, r3
 800507a:	4013      	ands	r3, r2
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050a8:	b084      	sub	sp, #16
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	f107 0014 	add.w	r0, r7, #20
 80050b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	b004      	add	sp, #16
 80050e6:	4770      	bx	lr

080050e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b09b      	sub	sp, #108	; 0x6c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	78db      	ldrb	r3, [r3, #3]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d81f      	bhi.n	800515a <USB_ActivateEndpoint+0x72>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <USB_ActivateEndpoint+0x38>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005131 	.word	0x08005131
 8005124:	0800514d 	.word	0x0800514d
 8005128:	08005163 	.word	0x08005163
 800512c:	0800513f 	.word	0x0800513f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005130:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005138:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800513c:	e012      	b.n	8005164 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800513e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005142:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005146:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800514a:	e00b      	b.n	8005164 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800514c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005154:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005158:	e004      	b.n	8005164 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005160:	e000      	b.n	8005164 <USB_ActivateEndpoint+0x7c>
      break;
 8005162:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005182:	b29b      	uxth	r3, r3
 8005184:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519c:	b29a      	uxth	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80051b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b1b      	ldrb	r3, [r3, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f040 8149 	bne.w	8005468 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8084 	beq.w	80052e8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	4413      	add	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	011a      	lsls	r2, r3, #4
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	88db      	ldrh	r3, [r3, #6]
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	b29b      	uxth	r3, r3
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	81fb      	strh	r3, [r7, #14]
 8005222:	89fb      	ldrh	r3, [r7, #14]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <USB_ActivateEndpoint+0x17c>
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	81bb      	strh	r3, [r7, #12]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	89bb      	ldrh	r3, [r7, #12]
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d020      	beq.n	80052ae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005282:	813b      	strh	r3, [r7, #8]
 8005284:	893b      	ldrh	r3, [r7, #8]
 8005286:	f083 0320 	eor.w	r3, r3, #32
 800528a:	813b      	strh	r3, [r7, #8]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	893b      	ldrh	r3, [r7, #8]
 8005298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]
 80052ac:	e27f      	b.n	80057ae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c4:	817b      	strh	r3, [r7, #10]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	897b      	ldrh	r3, [r7, #10]
 80052d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	8013      	strh	r3, [r2, #0]
 80052e6:	e262      	b.n	80057ae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	4413      	add	r3, r2
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	011a      	lsls	r2, r3, #4
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	4413      	add	r3, r2
 8005306:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	88db      	ldrh	r3, [r3, #6]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	b29b      	uxth	r3, r3
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	4413      	add	r3, r2
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	011a      	lsls	r2, r3, #4
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	4413      	add	r3, r2
 800533a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d112      	bne.n	800536e <USB_ActivateEndpoint+0x286>
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005352:	b29a      	uxth	r2, r3
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005366:	b29a      	uxth	r2, r3
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e02f      	b.n	80053ce <USB_ActivateEndpoint+0x2e6>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b3e      	cmp	r3, #62	; 0x3e
 8005374:	d813      	bhi.n	800539e <USB_ActivateEndpoint+0x2b6>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	663b      	str	r3, [r7, #96]	; 0x60
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <USB_ActivateEndpoint+0x2a8>
 800538a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800538c:	3301      	adds	r3, #1
 800538e:	663b      	str	r3, [r7, #96]	; 0x60
 8005390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005392:	b29b      	uxth	r3, r3
 8005394:	029b      	lsls	r3, r3, #10
 8005396:	b29a      	uxth	r2, r3
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	e017      	b.n	80053ce <USB_ActivateEndpoint+0x2e6>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	663b      	str	r3, [r7, #96]	; 0x60
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <USB_ActivateEndpoint+0x2d0>
 80053b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b4:	3b01      	subs	r3, #1
 80053b6:	663b      	str	r3, [r7, #96]	; 0x60
 80053b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	b29b      	uxth	r3, r3
 80053c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	83fb      	strh	r3, [r7, #30]
 80053dc:	8bfb      	ldrh	r3, [r7, #30]
 80053de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01b      	beq.n	800541e <USB_ActivateEndpoint+0x336>
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fc:	83bb      	strh	r3, [r7, #28]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	441a      	add	r2, r3
 8005408:	8bbb      	ldrh	r3, [r7, #28]
 800540a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005412:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	837b      	strh	r3, [r7, #26]
 8005436:	8b7b      	ldrh	r3, [r7, #26]
 8005438:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800543c:	837b      	strh	r3, [r7, #26]
 800543e:	8b7b      	ldrh	r3, [r7, #26]
 8005440:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005444:	837b      	strh	r3, [r7, #26]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	8b7b      	ldrh	r3, [r7, #26]
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
 8005466:	e1a2      	b.n	80057ae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	441a      	add	r2, r3
 800548c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005498:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800549c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b4:	4413      	add	r3, r2
 80054b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	011a      	lsls	r2, r3, #4
 80054be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c6:	657b      	str	r3, [r7, #84]	; 0x54
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	891b      	ldrh	r3, [r3, #8]
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	653b      	str	r3, [r7, #80]	; 0x50
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e8:	4413      	add	r3, r2
 80054ea:	653b      	str	r3, [r7, #80]	; 0x50
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	011a      	lsls	r2, r3, #4
 80054f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80054fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	895b      	ldrh	r3, [r3, #10]
 8005500:	085b      	lsrs	r3, r3, #1
 8005502:	b29b      	uxth	r3, r3
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f040 8091 	bne.w	8005638 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005524:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01b      	beq.n	8005566 <USB_ActivateEndpoint+0x47e>
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800555e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005562:	b29b      	uxth	r3, r3
 8005564:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	873b      	strh	r3, [r7, #56]	; 0x38
 8005574:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01b      	beq.n	80055b6 <USB_ActivateEndpoint+0x4ce>
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80055ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80055d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	441a      	add	r2, r3
 80055e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005614:	867b      	strh	r3, [r7, #50]	; 0x32
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	441a      	add	r2, r3
 8005620:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005632:	b29b      	uxth	r3, r3
 8005634:	8013      	strh	r3, [r2, #0]
 8005636:	e0ba      	b.n	80057ae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005648:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800564c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01d      	beq.n	8005690 <USB_ActivateEndpoint+0x5a8>
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	441a      	add	r2, r3
 8005678:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800567c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568c:	b29b      	uxth	r3, r3
 800568e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01d      	beq.n	80056e8 <USB_ActivateEndpoint+0x600>
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80056d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	78db      	ldrb	r3, [r3, #3]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d024      	beq.n	800573a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005706:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800570a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800570e:	f083 0320 	eor.w	r3, r3, #32
 8005712:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005734:	b29b      	uxth	r3, r3
 8005736:	8013      	strh	r3, [r2, #0]
 8005738:	e01d      	b.n	8005776 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005750:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	441a      	add	r2, r3
 800575e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	441a      	add	r2, r3
 8005798:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800579a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80057ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	376c      	adds	r7, #108	; 0x6c
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057bc:	b480      	push	{r7}
 80057be:	b08d      	sub	sp, #52	; 0x34
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	7b1b      	ldrb	r3, [r3, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 808e 	bne.w	80058ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d044      	beq.n	8005862 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	81bb      	strh	r3, [r7, #12]
 80057e6:	89bb      	ldrh	r3, [r7, #12]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01b      	beq.n	8005828 <USB_DeactivateEndpoint+0x6c>
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	817b      	strh	r3, [r7, #10]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	897b      	ldrh	r3, [r7, #10]
 8005814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800581c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005820:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583e:	813b      	strh	r3, [r7, #8]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	441a      	add	r2, r3
 800584a:	893b      	ldrh	r3, [r7, #8]
 800584c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585c:	b29b      	uxth	r3, r3
 800585e:	8013      	strh	r3, [r2, #0]
 8005860:	e192      	b.n	8005b88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	827b      	strh	r3, [r7, #18]
 8005870:	8a7b      	ldrh	r3, [r7, #18]
 8005872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d01b      	beq.n	80058b2 <USB_DeactivateEndpoint+0xf6>
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005890:	823b      	strh	r3, [r7, #16]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	441a      	add	r2, r3
 800589c:	8a3b      	ldrh	r3, [r7, #16]
 800589e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	81fb      	strh	r3, [r7, #14]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	89fb      	ldrh	r3, [r7, #14]
 80058d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]
 80058ea:	e14d      	b.n	8005b88 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f040 80a5 	bne.w	8005a40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	843b      	strh	r3, [r7, #32]
 8005904:	8c3b      	ldrh	r3, [r7, #32]
 8005906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01b      	beq.n	8005946 <USB_DeactivateEndpoint+0x18a>
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005924:	83fb      	strh	r3, [r7, #30]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	8bfb      	ldrh	r3, [r7, #30]
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800593e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	83bb      	strh	r3, [r7, #28]
 8005954:	8bbb      	ldrh	r3, [r7, #28]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01b      	beq.n	8005996 <USB_DeactivateEndpoint+0x1da>
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	837b      	strh	r3, [r7, #26]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	8b7b      	ldrh	r3, [r7, #26]
 8005982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005992:	b29b      	uxth	r3, r3
 8005994:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	833b      	strh	r3, [r7, #24]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	441a      	add	r2, r3
 80059b8:	8b3b      	ldrh	r3, [r7, #24]
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e4:	82fb      	strh	r3, [r7, #22]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	441a      	add	r2, r3
 80059f0:	8afb      	ldrh	r3, [r7, #22]
 80059f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a1c:	82bb      	strh	r3, [r7, #20]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	8abb      	ldrh	r3, [r7, #20]
 8005a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8013      	strh	r3, [r2, #0]
 8005a3e:	e0a3      	b.n	8005b88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01b      	beq.n	8005a90 <USB_DeactivateEndpoint+0x2d4>
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01b      	beq.n	8005ae0 <USB_DeactivateEndpoint+0x324>
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	853b      	strh	r3, [r7, #40]	; 0x28
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3734      	adds	r7, #52	; 0x34
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b0cc      	sub	sp, #304	; 0x130
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ba2:	6018      	str	r0, [r3, #0]
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	f041 817d 	bne.w	8006eba <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699a      	ldr	r2, [r3, #24]
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d908      	bls.n	8005bee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005bec:	e007      	b.n	8005bfe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	7b1b      	ldrb	r3, [r3, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d152      	bne.n	8005cb4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6959      	ldr	r1, [r3, #20]
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	88da      	ldrh	r2, [r3, #6]
 8005c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c30:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c34:	6800      	ldr	r0, [r0, #0]
 8005c36:	f001 ff23 	bl	8007a80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c46:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c6c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	440a      	add	r2, r1
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	011a      	lsls	r2, r3, #4
 8005c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	f001 b8b5 	b.w	8006e1e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	78db      	ldrb	r3, [r3, #3]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	f040 84c6 	bne.w	8006652 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	f240 8443 	bls.w	800656a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	441a      	add	r2, r3
 8005d28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d34:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a1a      	ldr	r2, [r3, #32]
 8005d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d50:	1ad2      	subs	r2, r2, r3
 8005d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 823e 	beq.w	8006202 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d92:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 809a 	bne.w	8005ee0 <USB_EPStartXfer+0x34c>
 8005dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005db8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dde:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	440a      	add	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	011a      	lsls	r2, r3, #4
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4413      	add	r3, r2
 8005e02:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d122      	bne.n	8005e5e <USB_EPStartXfer+0x2ca>
 8005e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e079      	b.n	8005f52 <USB_EPStartXfer+0x3be>
 8005e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e62:	2b3e      	cmp	r3, #62	; 0x3e
 8005e64:	d81b      	bhi.n	8005e9e <USB_EPStartXfer+0x30a>
 8005e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <USB_EPStartXfer+0x2f2>
 8005e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	029b      	lsls	r3, r3, #10
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	e059      	b.n	8005f52 <USB_EPStartXfer+0x3be>
 8005e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eac:	f003 031f 	and.w	r3, r3, #31
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <USB_EPStartXfer+0x32a>
 8005eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	029b      	lsls	r3, r3, #10
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	e038      	b.n	8005f52 <USB_EPStartXfer+0x3be>
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d130      	bne.n	8005f52 <USB_EPStartXfer+0x3be>
 8005ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4619      	mov	r1, r3
 8005f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f0e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	440a      	add	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	011a      	lsls	r2, r3, #4
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4413      	add	r3, r2
 8005f32:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	895b      	ldrh	r3, [r3, #10]
 8005f5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6959      	ldr	r1, [r3, #20]
 8005f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f80:	6800      	ldr	r0, [r0, #0]
 8005f82:	f001 fd7d 	bl	8007a80 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695a      	ldr	r2, [r3, #20]
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	441a      	add	r2, r3
 8005f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d90f      	bls.n	8005fe0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6a1a      	ldr	r2, [r3, #32]
 8005fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd0:	1ad2      	subs	r2, r2, r3
 8005fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	621a      	str	r2, [r3, #32]
 8005fde:	e00e      	b.n	8005ffe <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f040 809a 	bne.w	8006144 <USB_EPStartXfer+0x5b0>
 8006010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006014:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006018:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800601c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006032:	b29b      	uxth	r3, r3
 8006034:	4619      	mov	r1, r3
 8006036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800603e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006042:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	440a      	add	r2, r1
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	011a      	lsls	r2, r3, #4
 800605a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4413      	add	r3, r2
 8006066:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800606a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d122      	bne.n	80060c2 <USB_EPStartXfer+0x52e>
 800607c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006080:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800608e:	b29a      	uxth	r2, r3
 8006090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006094:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	e083      	b.n	80061ca <USB_EPStartXfer+0x636>
 80060c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c6:	2b3e      	cmp	r3, #62	; 0x3e
 80060c8:	d81b      	bhi.n	8006102 <USB_EPStartXfer+0x56e>
 80060ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ce:	085b      	lsrs	r3, r3, #1
 80060d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80060d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <USB_EPStartXfer+0x556>
 80060e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060e4:	3301      	adds	r3, #1
 80060e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80060ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	029b      	lsls	r3, r3, #10
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	e063      	b.n	80061ca <USB_EPStartXfer+0x636>
 8006102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <USB_EPStartXfer+0x58e>
 8006118:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800611c:	3b01      	subs	r3, #1
 800611e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006122:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006126:	b29b      	uxth	r3, r3
 8006128:	029b      	lsls	r3, r3, #10
 800612a:	b29b      	uxth	r3, r3
 800612c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006134:	b29a      	uxth	r2, r3
 8006136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	e042      	b.n	80061ca <USB_EPStartXfer+0x636>
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d13a      	bne.n	80061ca <USB_EPStartXfer+0x636>
 8006154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006158:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800615c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006160:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006176:	b29b      	uxth	r3, r3
 8006178:	4619      	mov	r1, r3
 800617a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006182:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006186:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	440a      	add	r2, r1
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	011a      	lsls	r2, r3, #4
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80061ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	891b      	ldrh	r3, [r3, #8]
 80061d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6959      	ldr	r1, [r3, #20]
 80061e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061f8:	6800      	ldr	r0, [r0, #0]
 80061fa:	f001 fc41 	bl	8007a80 <USB_WritePMA>
 80061fe:	f000 be0e 	b.w	8006e1e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d16d      	bne.n	80062ee <USB_EPStartXfer+0x75a>
 8006212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	64bb      	str	r3, [r7, #72]	; 0x48
 800621e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006232:	4413      	add	r3, r2
 8006234:	64bb      	str	r3, [r7, #72]	; 0x48
 8006236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	011a      	lsls	r2, r3, #4
 8006244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006246:	4413      	add	r3, r2
 8006248:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800624c:	647b      	str	r3, [r7, #68]	; 0x44
 800624e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d112      	bne.n	800627c <USB_EPStartXfer+0x6e8>
 8006256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	b29b      	uxth	r3, r3
 800625c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006260:	b29a      	uxth	r2, r3
 8006262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006274:	b29a      	uxth	r2, r3
 8006276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006278:	801a      	strh	r2, [r3, #0]
 800627a:	e063      	b.n	8006344 <USB_EPStartXfer+0x7b0>
 800627c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006280:	2b3e      	cmp	r3, #62	; 0x3e
 8006282:	d817      	bhi.n	80062b4 <USB_EPStartXfer+0x720>
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800628e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <USB_EPStartXfer+0x710>
 800629a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800629e:	3301      	adds	r3, #1
 80062a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80062a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	029b      	lsls	r3, r3, #10
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e047      	b.n	8006344 <USB_EPStartXfer+0x7b0>
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80062be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <USB_EPStartXfer+0x740>
 80062ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062ce:	3b01      	subs	r3, #1
 80062d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80062d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062d8:	b29b      	uxth	r3, r3
 80062da:	029b      	lsls	r3, r3, #10
 80062dc:	b29b      	uxth	r3, r3
 80062de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	e02a      	b.n	8006344 <USB_EPStartXfer+0x7b0>
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d122      	bne.n	8006344 <USB_EPStartXfer+0x7b0>
 80062fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	653b      	str	r3, [r7, #80]	; 0x50
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006318:	b29b      	uxth	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800631e:	4413      	add	r3, r2
 8006320:	653b      	str	r3, [r7, #80]	; 0x50
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	011a      	lsls	r2, r3, #4
 8006330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006332:	4413      	add	r3, r2
 8006334:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800633a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633e:	b29a      	uxth	r2, r3
 8006340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006342:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	891b      	ldrh	r3, [r3, #8]
 8006350:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6959      	ldr	r1, [r3, #20]
 8006360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006364:	b29b      	uxth	r3, r3
 8006366:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800636a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800636e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006372:	6800      	ldr	r0, [r0, #0]
 8006374:	f001 fb84 	bl	8007a80 <USB_WritePMA>
            ep->xfer_buff += len;
 8006378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695a      	ldr	r2, [r3, #20]
 8006384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006388:	441a      	add	r2, r3
 800638a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a1a      	ldr	r2, [r3, #32]
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d90f      	bls.n	80063d2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	621a      	str	r2, [r3, #32]
 80063d0:	e00e      	b.n	80063f0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80063d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80063e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2200      	movs	r2, #0
 80063ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	643b      	str	r3, [r7, #64]	; 0x40
 80063fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d16d      	bne.n	80064e8 <USB_EPStartXfer+0x954>
 800640c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	63bb      	str	r3, [r7, #56]	; 0x38
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006426:	b29b      	uxth	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	4413      	add	r3, r2
 800642e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	011a      	lsls	r2, r3, #4
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	4413      	add	r3, r2
 8006442:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
 8006448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d112      	bne.n	8006476 <USB_EPStartXfer+0x8e2>
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800645a:	b29a      	uxth	r2, r3
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646e:	b29a      	uxth	r2, r3
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	e05d      	b.n	8006532 <USB_EPStartXfer+0x99e>
 8006476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647a:	2b3e      	cmp	r3, #62	; 0x3e
 800647c:	d817      	bhi.n	80064ae <USB_EPStartXfer+0x91a>
 800647e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <USB_EPStartXfer+0x90a>
 8006494:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006498:	3301      	adds	r3, #1
 800649a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800649e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	029b      	lsls	r3, r3, #10
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	e041      	b.n	8006532 <USB_EPStartXfer+0x99e>
 80064ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <USB_EPStartXfer+0x93a>
 80064c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064c8:	3b01      	subs	r3, #1
 80064ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	029b      	lsls	r3, r3, #10
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e024      	b.n	8006532 <USB_EPStartXfer+0x99e>
 80064e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d11c      	bne.n	8006532 <USB_EPStartXfer+0x99e>
 80064f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006506:	b29b      	uxth	r3, r3
 8006508:	461a      	mov	r2, r3
 800650a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650c:	4413      	add	r3, r2
 800650e:	643b      	str	r3, [r7, #64]	; 0x40
 8006510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	011a      	lsls	r2, r3, #4
 800651e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006520:	4413      	add	r3, r2
 8006522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652c:	b29a      	uxth	r2, r3
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	895b      	ldrh	r3, [r3, #10]
 800653e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6959      	ldr	r1, [r3, #20]
 800654e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006552:	b29b      	uxth	r3, r3
 8006554:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006558:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800655c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006560:	6800      	ldr	r0, [r0, #0]
 8006562:	f001 fa8d 	bl	8007a80 <USB_WritePMA>
 8006566:	f000 bc5a 	b.w	8006e1e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800656a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800659c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80065a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f6:	4413      	add	r3, r2
 80065f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	011a      	lsls	r2, r3, #4
 8006608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660a:	4413      	add	r3, r2
 800660c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006610:	65bb      	str	r3, [r7, #88]	; 0x58
 8006612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006616:	b29a      	uxth	r2, r3
 8006618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800661a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	891b      	ldrh	r3, [r3, #8]
 8006628:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800662c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6959      	ldr	r1, [r3, #20]
 8006638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800663c:	b29b      	uxth	r3, r3
 800663e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006642:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006646:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800664a:	6800      	ldr	r0, [r0, #0]
 800664c:	f001 fa18 	bl	8007a80 <USB_WritePMA>
 8006650:	e3e5      	b.n	8006e1e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006678:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800667c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800669a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 81bc 	beq.w	8006a6c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d16d      	bne.n	80067ee <USB_EPStartXfer+0xc5a>
 8006712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006716:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	67bb      	str	r3, [r7, #120]	; 0x78
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006732:	4413      	add	r3, r2
 8006734:	67bb      	str	r3, [r7, #120]	; 0x78
 8006736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	011a      	lsls	r2, r3, #4
 8006744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006746:	4413      	add	r3, r2
 8006748:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800674c:	677b      	str	r3, [r7, #116]	; 0x74
 800674e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d112      	bne.n	800677c <USB_EPStartXfer+0xbe8>
 8006756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006760:	b29a      	uxth	r2, r3
 8006762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e060      	b.n	800683e <USB_EPStartXfer+0xcaa>
 800677c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006780:	2b3e      	cmp	r3, #62	; 0x3e
 8006782:	d817      	bhi.n	80067b4 <USB_EPStartXfer+0xc20>
 8006784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800678e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <USB_EPStartXfer+0xc10>
 800679a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800679e:	3301      	adds	r3, #1
 80067a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	029b      	lsls	r3, r3, #10
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	e044      	b.n	800683e <USB_EPStartXfer+0xcaa>
 80067b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d104      	bne.n	80067d4 <USB_EPStartXfer+0xc40>
 80067ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067ce:	3b01      	subs	r3, #1
 80067d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067d8:	b29b      	uxth	r3, r3
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e027      	b.n	800683e <USB_EPStartXfer+0xcaa>
 80067ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d11f      	bne.n	800683e <USB_EPStartXfer+0xcaa>
 80067fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680c:	b29b      	uxth	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006814:	4413      	add	r3, r2
 8006816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800681a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	011a      	lsls	r2, r3, #4
 8006828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800682c:	4413      	add	r3, r2
 800682e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006832:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006838:	b29a      	uxth	r2, r3
 800683a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800683c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	895b      	ldrh	r3, [r3, #10]
 800684a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6959      	ldr	r1, [r3, #20]
 800685a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685e:	b29b      	uxth	r3, r3
 8006860:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006864:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006868:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f001 f907 	bl	8007a80 <USB_WritePMA>
          ep->xfer_buff += len;
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006882:	441a      	add	r2, r3
 8006884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6a1a      	ldr	r2, [r3, #32]
 800689c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d90f      	bls.n	80068cc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80068ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068bc:	1ad2      	subs	r2, r2, r3
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	621a      	str	r2, [r3, #32]
 80068ca:	e00e      	b.n	80068ea <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80068cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80068dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80068ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8295 	beq.w	8006e1e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d16d      	bne.n	80069e0 <USB_EPStartXfer+0xe4c>
 8006904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691e:	b29b      	uxth	r3, r3
 8006920:	461a      	mov	r2, r3
 8006922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006924:	4413      	add	r3, r2
 8006926:	66bb      	str	r3, [r7, #104]	; 0x68
 8006928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	011a      	lsls	r2, r3, #4
 8006936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006938:	4413      	add	r3, r2
 800693a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800693e:	667b      	str	r3, [r7, #100]	; 0x64
 8006940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d112      	bne.n	800696e <USB_EPStartXfer+0xdda>
 8006948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006952:	b29a      	uxth	r2, r3
 8006954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006966:	b29a      	uxth	r2, r3
 8006968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	e063      	b.n	8006a36 <USB_EPStartXfer+0xea2>
 800696e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006972:	2b3e      	cmp	r3, #62	; 0x3e
 8006974:	d817      	bhi.n	80069a6 <USB_EPStartXfer+0xe12>
 8006976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <USB_EPStartXfer+0xe02>
 800698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006990:	3301      	adds	r3, #1
 8006992:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800699a:	b29b      	uxth	r3, r3
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e047      	b.n	8006a36 <USB_EPStartXfer+0xea2>
 80069a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80069b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <USB_EPStartXfer+0xe32>
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	029b      	lsls	r3, r3, #10
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d8:	b29a      	uxth	r2, r3
 80069da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	e02a      	b.n	8006a36 <USB_EPStartXfer+0xea2>
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d122      	bne.n	8006a36 <USB_EPStartXfer+0xea2>
 80069f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	673b      	str	r3, [r7, #112]	; 0x70
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a10:	4413      	add	r3, r2
 8006a12:	673b      	str	r3, [r7, #112]	; 0x70
 8006a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	011a      	lsls	r2, r3, #4
 8006a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	891b      	ldrh	r3, [r3, #8]
 8006a42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6959      	ldr	r1, [r3, #20]
 8006a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a64:	6800      	ldr	r0, [r0, #0]
 8006a66:	f001 f80b 	bl	8007a80 <USB_WritePMA>
 8006a6a:	e1d8      	b.n	8006e1e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d178      	bne.n	8006b6e <USB_EPStartXfer+0xfda>
 8006a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	011a      	lsls	r2, r3, #4
 8006ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ab8:	4413      	add	r3, r2
 8006aba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006abe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d116      	bne.n	8006af8 <USB_EPStartXfer+0xf64>
 8006aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	e06b      	b.n	8006bd0 <USB_EPStartXfer+0x103c>
 8006af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afc:	2b3e      	cmp	r3, #62	; 0x3e
 8006afe:	d818      	bhi.n	8006b32 <USB_EPStartXfer+0xf9e>
 8006b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <USB_EPStartXfer+0xf8c>
 8006b16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e04e      	b.n	8006bd0 <USB_EPStartXfer+0x103c>
 8006b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <USB_EPStartXfer+0xfbe>
 8006b48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	e030      	b.n	8006bd0 <USB_EPStartXfer+0x103c>
 8006b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d128      	bne.n	8006bd0 <USB_EPStartXfer+0x103c>
 8006b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	011a      	lsls	r2, r3, #4
 8006bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bba:	4413      	add	r3, r2
 8006bbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	891b      	ldrh	r3, [r3, #8]
 8006bdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6959      	ldr	r1, [r3, #20]
 8006bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bf6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bfa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bfe:	6800      	ldr	r0, [r0, #0]
 8006c00:	f000 ff3e 	bl	8007a80 <USB_WritePMA>
          ep->xfer_buff += len;
 8006c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	441a      	add	r2, r3
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6a1a      	ldr	r2, [r3, #32]
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d90f      	bls.n	8006c5e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6a1a      	ldr	r2, [r3, #32]
 8006c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	621a      	str	r2, [r3, #32]
 8006c5c:	e00e      	b.n	8006c7c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80cc 	beq.w	8006e1e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d178      	bne.n	8006d96 <USB_EPStartXfer+0x1202>
 8006ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cc8:	4413      	add	r3, r2
 8006cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	011a      	lsls	r2, r3, #4
 8006cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d116      	bne.n	8006d20 <USB_EPStartXfer+0x118c>
 8006cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d04:	801a      	strh	r2, [r3, #0]
 8006d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	e064      	b.n	8006dea <USB_EPStartXfer+0x1256>
 8006d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d24:	2b3e      	cmp	r3, #62	; 0x3e
 8006d26:	d818      	bhi.n	8006d5a <USB_EPStartXfer+0x11c6>
 8006d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d004      	beq.n	8006d48 <USB_EPStartXfer+0x11b4>
 8006d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d42:	3301      	adds	r3, #1
 8006d44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	029b      	lsls	r3, r3, #10
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	e047      	b.n	8006dea <USB_EPStartXfer+0x1256>
 8006d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <USB_EPStartXfer+0x11e6>
 8006d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d74:	3b01      	subs	r3, #1
 8006d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	029b      	lsls	r3, r3, #10
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e029      	b.n	8006dea <USB_EPStartXfer+0x1256>
 8006d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d121      	bne.n	8006dea <USB_EPStartXfer+0x1256>
 8006da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	011a      	lsls	r2, r3, #4
 8006dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006de8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	895b      	ldrh	r3, [r3, #10]
 8006df6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6959      	ldr	r1, [r3, #20]
 8006e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e10:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e18:	6800      	ldr	r0, [r0, #0]
 8006e1a:	f000 fe31 	bl	8007a80 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e40:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4c:	8013      	strh	r3, [r2, #0]
 8006e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e52:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e5a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006e5e:	8812      	ldrh	r2, [r2, #0]
 8006e60:	f082 0210 	eor.w	r2, r2, #16
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e72:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006e76:	8812      	ldrh	r2, [r2, #0]
 8006e78:	f082 0220 	eor.w	r2, r2, #32
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	441a      	add	r2, r3
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	8013      	strh	r3, [r2, #0]
 8006eb6:	f000 bc9f 	b.w	80077f8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	7b1b      	ldrb	r3, [r3, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 80ae 	bne.w	8007028 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d917      	bls.n	8006f18 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f08:	1ad2      	subs	r2, r2, r3
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	619a      	str	r2, [r3, #24]
 8006f16:	e00e      	b.n	8006f36 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	011a      	lsls	r2, r3, #4
 8006f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f72:	4413      	add	r3, r2
 8006f74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d116      	bne.n	8006fb2 <USB_EPStartXfer+0x141e>
 8006f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f96:	801a      	strh	r2, [r3, #0]
 8006f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	e3e8      	b.n	8007784 <USB_EPStartXfer+0x1bf0>
 8006fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006fb8:	d818      	bhi.n	8006fec <USB_EPStartXfer+0x1458>
 8006fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <USB_EPStartXfer+0x1446>
 8006fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006fda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	029b      	lsls	r3, r3, #10
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	e3cb      	b.n	8007784 <USB_EPStartXfer+0x1bf0>
 8006fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffa:	f003 031f 	and.w	r3, r3, #31
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <USB_EPStartXfer+0x1478>
 8007002:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007006:	3b01      	subs	r3, #1
 8007008:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800700c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007010:	b29b      	uxth	r3, r3
 8007012:	029b      	lsls	r3, r3, #10
 8007014:	b29b      	uxth	r3, r3
 8007016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701e:	b29a      	uxth	r2, r3
 8007020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	e3ad      	b.n	8007784 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	78db      	ldrb	r3, [r3, #3]
 8007034:	2b02      	cmp	r3, #2
 8007036:	f040 8200 	bne.w	800743a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	785b      	ldrb	r3, [r3, #1]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f040 8091 	bne.w	800716e <USB_EPStartXfer+0x15da>
 800704c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007068:	b29b      	uxth	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007070:	4413      	add	r3, r2
 8007072:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	011a      	lsls	r2, r3, #4
 8007084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007088:	4413      	add	r3, r2
 800708a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800708e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d116      	bne.n	80070d0 <USB_EPStartXfer+0x153c>
 80070a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e083      	b.n	80071d8 <USB_EPStartXfer+0x1644>
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b3e      	cmp	r3, #62	; 0x3e
 80070de:	d820      	bhi.n	8007122 <USB_EPStartXfer+0x158e>
 80070e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <USB_EPStartXfer+0x157c>
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710a:	3301      	adds	r3, #1
 800710c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	b29b      	uxth	r3, r3
 8007116:	029b      	lsls	r3, r3, #10
 8007118:	b29a      	uxth	r2, r3
 800711a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	e05a      	b.n	80071d8 <USB_EPStartXfer+0x1644>
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 031f 	and.w	r3, r3, #31
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <USB_EPStartXfer+0x15be>
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714c:	3b01      	subs	r3, #1
 800714e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	b29b      	uxth	r3, r3
 8007158:	029b      	lsls	r3, r3, #10
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007164:	b29a      	uxth	r2, r3
 8007166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e034      	b.n	80071d8 <USB_EPStartXfer+0x1644>
 800716e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d12c      	bne.n	80071d8 <USB_EPStartXfer+0x1644>
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719a:	b29b      	uxth	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071a2:	4413      	add	r3, r2
 80071a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	011a      	lsls	r2, r3, #4
 80071b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ba:	4413      	add	r3, r2
 80071bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 8091 	bne.w	800731a <USB_EPStartXfer+0x1786>
 80071f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007214:	b29b      	uxth	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800721c:	4413      	add	r3, r2
 800721e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	011a      	lsls	r2, r3, #4
 8007230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007234:	4413      	add	r3, r2
 8007236:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800723a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d116      	bne.n	800727c <USB_EPStartXfer+0x16e8>
 800724e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800725a:	b29a      	uxth	r2, r3
 800725c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	e07c      	b.n	8007376 <USB_EPStartXfer+0x17e2>
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b3e      	cmp	r3, #62	; 0x3e
 800728a:	d820      	bhi.n	80072ce <USB_EPStartXfer+0x173a>
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800729e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <USB_EPStartXfer+0x1728>
 80072b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072b6:	3301      	adds	r3, #1
 80072b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	029b      	lsls	r3, r3, #10
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	e053      	b.n	8007376 <USB_EPStartXfer+0x17e2>
 80072ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f003 031f 	and.w	r3, r3, #31
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <USB_EPStartXfer+0x176a>
 80072f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072f8:	3b01      	subs	r3, #1
 80072fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007302:	b29b      	uxth	r3, r3
 8007304:	029b      	lsls	r3, r3, #10
 8007306:	b29b      	uxth	r3, r3
 8007308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e02d      	b.n	8007376 <USB_EPStartXfer+0x17e2>
 800731a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d125      	bne.n	8007376 <USB_EPStartXfer+0x17e2>
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007338:	b29b      	uxth	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007340:	4413      	add	r3, r2
 8007342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	011a      	lsls	r2, r3, #4
 8007354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007358:	4413      	add	r3, r2
 800735a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800735e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	b29a      	uxth	r2, r3
 8007370:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007374:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 81fe 	beq.w	8007784 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <USB_EPStartXfer+0x182c>
 80073b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10d      	bne.n	80073dc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f040 81db 	bne.w	8007784 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073ce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f040 81d4 	bne.w	8007784 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80073dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007402:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	441a      	add	r2, r3
 8007420:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800742c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007434:	b29b      	uxth	r3, r3
 8007436:	8013      	strh	r3, [r2, #0]
 8007438:	e1a4      	b.n	8007784 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800743a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	78db      	ldrb	r3, [r3, #3]
 8007446:	2b01      	cmp	r3, #1
 8007448:	f040 819a 	bne.w	8007780 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d917      	bls.n	8007498 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699a      	ldr	r2, [r3, #24]
 8007484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007488:	1ad2      	subs	r2, r2, r3
 800748a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	619a      	str	r2, [r3, #24]
 8007496:	e00e      	b.n	80074b6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80074a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2200      	movs	r2, #0
 80074b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d178      	bne.n	80075b8 <USB_EPStartXfer+0x1a24>
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074ea:	4413      	add	r3, r2
 80074ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	011a      	lsls	r2, r3, #4
 80074fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007502:	4413      	add	r3, r2
 8007504:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007508:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800750c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d116      	bne.n	8007542 <USB_EPStartXfer+0x19ae>
 8007514:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007520:	b29a      	uxth	r2, r3
 8007522:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007526:	801a      	strh	r2, [r3, #0]
 8007528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007538:	b29a      	uxth	r2, r3
 800753a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800753e:	801a      	strh	r2, [r3, #0]
 8007540:	e06b      	b.n	800761a <USB_EPStartXfer+0x1a86>
 8007542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007546:	2b3e      	cmp	r3, #62	; 0x3e
 8007548:	d818      	bhi.n	800757c <USB_EPStartXfer+0x19e8>
 800754a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d004      	beq.n	800756a <USB_EPStartXfer+0x19d6>
 8007560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007564:	3301      	adds	r3, #1
 8007566:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800756a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800756e:	b29b      	uxth	r3, r3
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	b29a      	uxth	r2, r3
 8007574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007578:	801a      	strh	r2, [r3, #0]
 800757a:	e04e      	b.n	800761a <USB_EPStartXfer+0x1a86>
 800757c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2b00      	cmp	r3, #0
 8007590:	d104      	bne.n	800759c <USB_EPStartXfer+0x1a08>
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007596:	3b01      	subs	r3, #1
 8007598:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800759c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	029b      	lsls	r3, r3, #10
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e030      	b.n	800761a <USB_EPStartXfer+0x1a86>
 80075b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d128      	bne.n	800761a <USB_EPStartXfer+0x1a86>
 80075c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ec:	4413      	add	r3, r2
 80075ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	011a      	lsls	r2, r3, #4
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007604:	4413      	add	r3, r2
 8007606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800760a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800760e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007612:	b29a      	uxth	r2, r3
 8007614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007618:	801a      	strh	r2, [r3, #0]
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d178      	bne.n	800772a <USB_EPStartXfer+0x1b96>
 8007638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007654:	b29b      	uxth	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800765c:	4413      	add	r3, r2
 800765e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	011a      	lsls	r2, r3, #4
 8007670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007674:	4413      	add	r3, r2
 8007676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800767a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800767e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d116      	bne.n	80076b4 <USB_EPStartXfer+0x1b20>
 8007686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007692:	b29a      	uxth	r2, r3
 8007694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e067      	b.n	8007784 <USB_EPStartXfer+0x1bf0>
 80076b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b8:	2b3e      	cmp	r3, #62	; 0x3e
 80076ba:	d818      	bhi.n	80076ee <USB_EPStartXfer+0x1b5a>
 80076bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c0:	085b      	lsrs	r3, r3, #1
 80076c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <USB_EPStartXfer+0x1b48>
 80076d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076d6:	3301      	adds	r3, #1
 80076d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	029b      	lsls	r3, r3, #10
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e04a      	b.n	8007784 <USB_EPStartXfer+0x1bf0>
 80076ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <USB_EPStartXfer+0x1b7a>
 8007704:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007708:	3b01      	subs	r3, #1
 800770a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800770e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007712:	b29b      	uxth	r3, r3
 8007714:	029b      	lsls	r3, r3, #10
 8007716:	b29b      	uxth	r3, r3
 8007718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007720:	b29a      	uxth	r2, r3
 8007722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e02c      	b.n	8007784 <USB_EPStartXfer+0x1bf0>
 800772a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d124      	bne.n	8007784 <USB_EPStartXfer+0x1bf0>
 800773a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007748:	b29b      	uxth	r3, r3
 800774a:	461a      	mov	r2, r3
 800774c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007750:	4413      	add	r3, r2
 8007752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	011a      	lsls	r2, r3, #4
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007768:	4413      	add	r3, r2
 800776a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800776e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007776:	b29a      	uxth	r2, r3
 8007778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e001      	b.n	8007784 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e03a      	b.n	80077fa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80077ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80077b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80077ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80077be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80077c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	441a      	add	r2, r3
 80077e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80077e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d020      	beq.n	8007858 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800782c:	81bb      	strh	r3, [r7, #12]
 800782e:	89bb      	ldrh	r3, [r7, #12]
 8007830:	f083 0310 	eor.w	r3, r3, #16
 8007834:	81bb      	strh	r3, [r7, #12]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	441a      	add	r2, r3
 8007840:	89bb      	ldrh	r3, [r7, #12]
 8007842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800784e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007852:	b29b      	uxth	r3, r3
 8007854:	8013      	strh	r3, [r2, #0]
 8007856:	e01f      	b.n	8007898 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800786a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786e:	81fb      	strh	r3, [r7, #14]
 8007870:	89fb      	ldrh	r3, [r7, #14]
 8007872:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007876:	81fb      	strh	r3, [r7, #14]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	441a      	add	r2, r3
 8007882:	89fb      	ldrh	r3, [r7, #14]
 8007884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800788c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007894:	b29b      	uxth	r3, r3
 8007896:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	7b1b      	ldrb	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f040 809d 	bne.w	80079f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d04c      	beq.n	800795a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	823b      	strh	r3, [r7, #16]
 80078ce:	8a3b      	ldrh	r3, [r7, #16]
 80078d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01b      	beq.n	8007910 <USB_EPClearStall+0x6c>
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ee:	81fb      	strh	r3, [r7, #14]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	441a      	add	r2, r3
 80078fa:	89fb      	ldrh	r3, [r7, #14]
 80078fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800790c:	b29b      	uxth	r3, r3
 800790e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	78db      	ldrb	r3, [r3, #3]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d06c      	beq.n	80079f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792e:	81bb      	strh	r3, [r7, #12]
 8007930:	89bb      	ldrh	r3, [r7, #12]
 8007932:	f083 0320 	eor.w	r3, r3, #32
 8007936:	81bb      	strh	r3, [r7, #12]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	441a      	add	r2, r3
 8007942:	89bb      	ldrh	r3, [r7, #12]
 8007944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800794c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007954:	b29b      	uxth	r3, r3
 8007956:	8013      	strh	r3, [r2, #0]
 8007958:	e04b      	b.n	80079f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	82fb      	strh	r3, [r7, #22]
 8007968:	8afb      	ldrh	r3, [r7, #22]
 800796a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01b      	beq.n	80079aa <USB_EPClearStall+0x106>
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007988:	82bb      	strh	r3, [r7, #20]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	441a      	add	r2, r3
 8007994:	8abb      	ldrh	r3, [r7, #20]
 8007996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800799a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800799e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c0:	827b      	strh	r3, [r7, #18]
 80079c2:	8a7b      	ldrh	r3, [r7, #18]
 80079c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079c8:	827b      	strh	r3, [r7, #18]
 80079ca:	8a7b      	ldrh	r3, [r7, #18]
 80079cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079d0:	827b      	strh	r3, [r7, #18]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	441a      	add	r2, r3
 80079dc:	8a7b      	ldrh	r3, [r7, #18]
 80079de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr

080079fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr

08007a24 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr

08007a38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr

08007a4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr

08007a80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b08d      	sub	sp, #52	; 0x34
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	460b      	mov	r3, r1
 8007a90:	80fb      	strh	r3, [r7, #6]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a96:	88bb      	ldrh	r3, [r7, #4]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	085b      	lsrs	r3, r3, #1
 8007a9c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	005a      	lsls	r2, r3, #1
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab8:	e01e      	b.n	8007af8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	3302      	adds	r3, #2
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	3301      	adds	r3, #1
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	3b01      	subs	r3, #1
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1dd      	bne.n	8007aba <USB_WritePMA+0x3a>
  }
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	3734      	adds	r7, #52	; 0x34
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr

08007b0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b08b      	sub	sp, #44	; 0x2c
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	4611      	mov	r1, r2
 8007b16:	461a      	mov	r2, r3
 8007b18:	460b      	mov	r3, r1
 8007b1a:	80fb      	strh	r3, [r7, #6]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b20:	88bb      	ldrh	r3, [r7, #4]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	005a      	lsls	r2, r3, #1
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b3c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
 8007b42:	e01b      	b.n	8007b7c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	3302      	adds	r3, #2
 8007b50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	0a1b      	lsrs	r3, r3, #8
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	3302      	adds	r3, #2
 8007b74:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e0      	bne.n	8007b44 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007b82:	88bb      	ldrh	r3, [r7, #4]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	701a      	strb	r2, [r3, #0]
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	372c      	adds	r7, #44	; 0x2c
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr

08007ba8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7c1b      	ldrb	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d115      	bne.n	8007bec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	2181      	movs	r1, #129	; 0x81
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 fea4 	bl	8009916 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd8:	2202      	movs	r2, #2
 8007bda:	2101      	movs	r1, #1
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 fe9a 	bl	8009916 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007bea:	e012      	b.n	8007c12 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bec:	2340      	movs	r3, #64	; 0x40
 8007bee:	2202      	movs	r2, #2
 8007bf0:	2181      	movs	r1, #129	; 0x81
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fe8f 	bl	8009916 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bfe:	2340      	movs	r3, #64	; 0x40
 8007c00:	2202      	movs	r2, #2
 8007c02:	2101      	movs	r1, #1
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fe86 	bl	8009916 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c12:	2308      	movs	r3, #8
 8007c14:	2203      	movs	r2, #3
 8007c16:	2182      	movs	r1, #130	; 0x82
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 fe7c 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c28:	f001 ff9c 	bl	8009b64 <USBD_static_malloc>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	73fb      	strb	r3, [r7, #15]
 8007c42:	e026      	b.n	8007c92 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7c1b      	ldrb	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c78:	2101      	movs	r1, #1
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 ff3c 	bl	8009af8 <USBD_LL_PrepareReceive>
 8007c80:	e007      	b.n	8007c92 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c88:	2340      	movs	r3, #64	; 0x40
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 ff33 	bl	8009af8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007cac:	2181      	movs	r1, #129	; 0x81
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 fe57 	bl	8009962 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007cba:	2101      	movs	r1, #1
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fe50 	bl	8009962 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007cca:	2182      	movs	r1, #130	; 0x82
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fe48 	bl	8009962 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 ff42 	bl	8009b7c <USBD_static_free>
    pdev->pClassData = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b086      	sub	sp, #24
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d039      	beq.n	8007da8 <USBD_CDC_Setup+0x9e>
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d17f      	bne.n	8007e38 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	88db      	ldrh	r3, [r3, #6]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d029      	beq.n	8007d94 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	b25b      	sxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	da11      	bge.n	8007d6e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007d56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	88d2      	ldrh	r2, [r2, #6]
 8007d5c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d5e:	6939      	ldr	r1, [r7, #16]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	88db      	ldrh	r3, [r3, #6]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fa09 	bl	800917e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007d6c:	e06b      	b.n	8007e46 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	785a      	ldrb	r2, [r3, #1]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	88db      	ldrh	r3, [r3, #6]
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d84:	6939      	ldr	r1, [r7, #16]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	88db      	ldrh	r3, [r3, #6]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 fa24 	bl	80091da <USBD_CtlPrepareRx>
      break;
 8007d92:	e058      	b.n	8007e46 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	7850      	ldrb	r0, [r2, #1]
 8007da0:	2200      	movs	r2, #0
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	4798      	blx	r3
      break;
 8007da6:	e04e      	b.n	8007e46 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	2b0b      	cmp	r3, #11
 8007dae:	d02e      	beq.n	8007e0e <USBD_CDC_Setup+0x104>
 8007db0:	2b0b      	cmp	r3, #11
 8007db2:	dc38      	bgt.n	8007e26 <USBD_CDC_Setup+0x11c>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <USBD_CDC_Setup+0xb4>
 8007db8:	2b0a      	cmp	r3, #10
 8007dba:	d014      	beq.n	8007de6 <USBD_CDC_Setup+0xdc>
 8007dbc:	e033      	b.n	8007e26 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d107      	bne.n	8007dd8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	2202      	movs	r2, #2
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 f9d4 	bl	800917e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dd6:	e02e      	b.n	8007e36 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 f965 	bl	80090aa <USBD_CtlError>
            ret = USBD_FAIL;
 8007de0:	2302      	movs	r3, #2
 8007de2:	75fb      	strb	r3, [r7, #23]
          break;
 8007de4:	e027      	b.n	8007e36 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d107      	bne.n	8007e00 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007df0:	f107 030f 	add.w	r3, r7, #15
 8007df4:	2201      	movs	r2, #1
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f9c0 	bl	800917e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dfe:	e01a      	b.n	8007e36 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 f951 	bl	80090aa <USBD_CtlError>
            ret = USBD_FAIL;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8007e0c:	e013      	b.n	8007e36 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d00d      	beq.n	8007e34 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 f945 	bl	80090aa <USBD_CtlError>
            ret = USBD_FAIL;
 8007e20:	2302      	movs	r3, #2
 8007e22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e24:	e006      	b.n	8007e34 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f93e 	bl	80090aa <USBD_CtlError>
          ret = USBD_FAIL;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	75fb      	strb	r3, [r7, #23]
          break;
 8007e32:	e000      	b.n	8007e36 <USBD_CDC_Setup+0x12c>
          break;
 8007e34:	bf00      	nop
      }
      break;
 8007e36:	e006      	b.n	8007e46 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 f935 	bl	80090aa <USBD_CtlError>
      ret = USBD_FAIL;
 8007e40:	2302      	movs	r3, #2
 8007e42:	75fb      	strb	r3, [r7, #23]
      break;
 8007e44:	bf00      	nop
  }

  return ret;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e62:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e6a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d03a      	beq.n	8007eec <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	331c      	adds	r3, #28
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d029      	beq.n	8007ee0 <USBD_CDC_DataIn+0x90>
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	331c      	adds	r3, #28
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	78f9      	ldrb	r1, [r7, #3]
 8007ea0:	68b8      	ldr	r0, [r7, #8]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	4403      	add	r3, r0
 8007eac:	3338      	adds	r3, #56	; 0x38
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d110      	bne.n	8007ee0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	440b      	add	r3, r1
 8007ecc:	331c      	adds	r3, #28
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ed2:	78f9      	ldrb	r1, [r7, #3]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fdea 	bl	8009ab2 <USBD_LL_Transmit>
 8007ede:	e003      	b.n	8007ee8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e000      	b.n	8007eee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007eec:	2302      	movs	r3, #2
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fe15 	bl	8009b3e <USBD_LL_GetRxDataSize>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00d      	beq.n	8007f42 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4798      	blx	r3

    return USBD_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e000      	b.n	8007f44 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007f42:	2302      	movs	r3, #2
  }
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d015      	beq.n	8007f92 <USBD_CDC_EP0_RxReady+0x46>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f6c:	2bff      	cmp	r3, #255	; 0xff
 8007f6e:	d010      	beq.n	8007f92 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007f7e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f86:	b292      	uxth	r2, r2
 8007f88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	22ff      	movs	r2, #255	; 0xff
 8007f8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }



  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2243      	movs	r2, #67	; 0x43
 8007fa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	200000d8 	.word	0x200000d8

08007fbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2243      	movs	r2, #67	; 0x43
 8007fc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20000094 	.word	0x20000094

08007fdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2243      	movs	r2, #67	; 0x43
 8007fe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007fea:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	2000011c 	.word	0x2000011c

08007ffc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	220a      	movs	r2, #10
 8008008:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	20000050 	.word	0x20000050

0800801c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008026:	2302      	movs	r3, #2
 8008028:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008066:	88fa      	ldrh	r2, [r7, #6]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr

0800807a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr

080080a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01c      	beq.n	80080f4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d115      	bne.n	80080f0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2181      	movs	r1, #129	; 0x81
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 fce3 	bl	8009ab2 <USBD_LL_Transmit>

      return USBD_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	e002      	b.n	80080f6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80080f4:	2302      	movs	r3, #2
  }
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008114:	2b00      	cmp	r3, #0
 8008116:	d017      	beq.n	8008148 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7c1b      	ldrb	r3, [r3, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d109      	bne.n	8008134 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800812a:	2101      	movs	r1, #1
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 fce3 	bl	8009af8 <USBD_LL_PrepareReceive>
 8008132:	e007      	b.n	8008144 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800813a:	2340      	movs	r3, #64	; 0x40
 800813c:	2101      	movs	r1, #1
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 fcda 	bl	8009af8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	e000      	b.n	800814a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008148:	2302      	movs	r3, #2
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	4613      	mov	r3, r2
 800815e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008166:	2302      	movs	r3, #2
 8008168:	e01a      	b.n	80081a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	79fa      	ldrb	r2, [r7, #7]
 8008196:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f001 fb47 	bl	800982c <USBD_LL_Init>

  return USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
 80081c8:	e001      	b.n	80081ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80081ca:	2302      	movs	r3, #2
 80081cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr

080081da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 fb7c 	bl	80098e0 <USBD_LL_Start>

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr

08008206 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008212:	2302      	movs	r3, #2
 8008214:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00c      	beq.n	800823a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	78fa      	ldrb	r2, [r7, #3]
 800822a:	4611      	mov	r1, r2
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	4798      	blx	r3
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	4611      	mov	r1, r2
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fed8 	bl	8009032 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008290:	461a      	mov	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d016      	beq.n	80082d4 <USBD_LL_SetupStage+0x6a>
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d81c      	bhi.n	80082e4 <USBD_LL_SetupStage+0x7a>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <USBD_LL_SetupStage+0x4a>
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d008      	beq.n	80082c4 <USBD_LL_SetupStage+0x5a>
 80082b2:	e017      	b.n	80082e4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f9cb 	bl	8008658 <USBD_StdDevReq>
      break;
 80082c2:	e01a      	b.n	80082fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fa2d 	bl	800872c <USBD_StdItfReq>
      break;
 80082d2:	e012      	b.n	80082fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fa6d 	bl	80087bc <USBD_StdEPReq>
      break;
 80082e2:	e00a      	b.n	80082fa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80082ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fb54 	bl	80099a0 <USBD_LL_StallEP>
      break;
 80082f8:	bf00      	nop
  }

  return USBD_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	460b      	mov	r3, r1
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d14b      	bne.n	80083b0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800831e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008326:	2b03      	cmp	r3, #3
 8008328:	d134      	bne.n	8008394 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	429a      	cmp	r2, r3
 8008334:	d919      	bls.n	800836a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800834c:	429a      	cmp	r2, r3
 800834e:	d203      	bcs.n	8008358 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008354:	b29b      	uxth	r3, r3
 8008356:	e002      	b.n	800835e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800835c:	b29b      	uxth	r3, r3
 800835e:	461a      	mov	r2, r3
 8008360:	6879      	ldr	r1, [r7, #4]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 ff57 	bl	8009216 <USBD_CtlContinueRx>
 8008368:	e038      	b.n	80083dc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800837c:	2b03      	cmp	r3, #3
 800837e:	d105      	bne.n	800838c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 ff54 	bl	800923a <USBD_CtlSendStatus>
 8008392:	e023      	b.n	80083dc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800839a:	2b05      	cmp	r3, #5
 800839c:	d11e      	bne.n	80083dc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80083a6:	2100      	movs	r1, #0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f001 faf9 	bl	80099a0 <USBD_LL_StallEP>
 80083ae:	e015      	b.n	80083dc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00d      	beq.n	80083d8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d108      	bne.n	80083d8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	7afa      	ldrb	r2, [r7, #11]
 80083d0:	4611      	mov	r1, r2
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	4798      	blx	r3
 80083d6:	e001      	b.n	80083dc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083d8:	2302      	movs	r3, #2
 80083da:	e000      	b.n	80083de <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b086      	sub	sp, #24
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	460b      	mov	r3, r1
 80083f0:	607a      	str	r2, [r7, #4]
 80083f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083f4:	7afb      	ldrb	r3, [r7, #11]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d17f      	bne.n	80084fa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3314      	adds	r3, #20
 80083fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008406:	2b02      	cmp	r3, #2
 8008408:	d15c      	bne.n	80084c4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	429a      	cmp	r2, r3
 8008414:	d915      	bls.n	8008442 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	b29b      	uxth	r3, r3
 800842a:	461a      	mov	r2, r3
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 fec1 	bl	80091b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008434:	2300      	movs	r3, #0
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f001 fb5c 	bl	8009af8 <USBD_LL_PrepareReceive>
 8008440:	e04e      	b.n	80084e0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	6912      	ldr	r2, [r2, #16]
 800844a:	fbb3 f1f2 	udiv	r1, r3, r2
 800844e:	fb01 f202 	mul.w	r2, r1, r2
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d11c      	bne.n	8008492 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008460:	429a      	cmp	r2, r3
 8008462:	d316      	bcc.n	8008492 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800846e:	429a      	cmp	r2, r3
 8008470:	d20f      	bcs.n	8008492 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 fe9d 	bl	80091b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008484:	2300      	movs	r3, #0
 8008486:	2200      	movs	r2, #0
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f001 fb34 	bl	8009af8 <USBD_LL_PrepareReceive>
 8008490:	e026      	b.n	80084e0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d105      	bne.n	80084b4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80084b4:	2180      	movs	r1, #128	; 0x80
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f001 fa72 	bl	80099a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fecf 	bl	8009260 <USBD_CtlReceiveStatus>
 80084c2:	e00d      	b.n	80084e0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d004      	beq.n	80084d8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d103      	bne.n	80084e0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80084d8:	2180      	movs	r1, #128	; 0x80
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f001 fa60 	bl	80099a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d11d      	bne.n	8008526 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f7ff fe81 	bl	80081f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084f8:	e015      	b.n	8008526 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800850c:	2b03      	cmp	r3, #3
 800850e:	d108      	bne.n	8008522 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	7afa      	ldrb	r2, [r7, #11]
 800851a:	4611      	mov	r1, r2
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	4798      	blx	r3
 8008520:	e001      	b.n	8008526 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008522:	2302      	movs	r3, #2
 8008524:	e000      	b.n	8008528 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 f9e9 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2240      	movs	r2, #64	; 0x40
 8008550:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008554:	2340      	movs	r3, #64	; 0x40
 8008556:	2200      	movs	r2, #0
 8008558:	2180      	movs	r1, #128	; 0x80
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 f9db 	bl	8009916 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2240      	movs	r2, #64	; 0x40
 800856a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008590:	2b00      	cmp	r3, #0
 8008592:	d009      	beq.n	80085a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6852      	ldr	r2, [r2, #4]
 80085a0:	b2d2      	uxtb	r2, r2
 80085a2:	4611      	mov	r1, r2
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
  }

  return USBD_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc80      	pop	{r7}
 80085ce:	4770      	bx	lr

080085d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2204      	movs	r2, #4
 80085e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr

080085f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008606:	2b04      	cmp	r3, #4
 8008608:	d105      	bne.n	8008616 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr

08008622 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008630:	2b03      	cmp	r3, #3
 8008632:	d10b      	bne.n	800864c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	d005      	beq.n	800867e <USBD_StdDevReq+0x26>
 8008672:	2b40      	cmp	r3, #64	; 0x40
 8008674:	d84f      	bhi.n	8008716 <USBD_StdDevReq+0xbe>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <USBD_StdDevReq+0x36>
 800867a:	2b20      	cmp	r3, #32
 800867c:	d14b      	bne.n	8008716 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	4798      	blx	r3
      break;
 800868c:	e048      	b.n	8008720 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	2b09      	cmp	r3, #9
 8008694:	d839      	bhi.n	800870a <USBD_StdDevReq+0xb2>
 8008696:	a201      	add	r2, pc, #4	; (adr r2, 800869c <USBD_StdDevReq+0x44>)
 8008698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869c:	080086ed 	.word	0x080086ed
 80086a0:	08008701 	.word	0x08008701
 80086a4:	0800870b 	.word	0x0800870b
 80086a8:	080086f7 	.word	0x080086f7
 80086ac:	0800870b 	.word	0x0800870b
 80086b0:	080086cf 	.word	0x080086cf
 80086b4:	080086c5 	.word	0x080086c5
 80086b8:	0800870b 	.word	0x0800870b
 80086bc:	080086e3 	.word	0x080086e3
 80086c0:	080086d9 	.word	0x080086d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f9dc 	bl	8008a84 <USBD_GetDescriptor>
          break;
 80086cc:	e022      	b.n	8008714 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fb3f 	bl	8008d54 <USBD_SetAddress>
          break;
 80086d6:	e01d      	b.n	8008714 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fb7e 	bl	8008ddc <USBD_SetConfig>
          break;
 80086e0:	e018      	b.n	8008714 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fc07 	bl	8008ef8 <USBD_GetConfig>
          break;
 80086ea:	e013      	b.n	8008714 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fc37 	bl	8008f62 <USBD_GetStatus>
          break;
 80086f4:	e00e      	b.n	8008714 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fc65 	bl	8008fc8 <USBD_SetFeature>
          break;
 80086fe:	e009      	b.n	8008714 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fc74 	bl	8008ff0 <USBD_ClrFeature>
          break;
 8008708:	e004      	b.n	8008714 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fccc 	bl	80090aa <USBD_CtlError>
          break;
 8008712:	bf00      	nop
      }
      break;
 8008714:	e004      	b.n	8008720 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fcc6 	bl	80090aa <USBD_CtlError>
      break;
 800871e:	bf00      	nop
  }

  return ret;
 8008720:	7bfb      	ldrb	r3, [r7, #15]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop

0800872c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	d005      	beq.n	8008752 <USBD_StdItfReq+0x26>
 8008746:	2b40      	cmp	r3, #64	; 0x40
 8008748:	d82e      	bhi.n	80087a8 <USBD_StdItfReq+0x7c>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <USBD_StdItfReq+0x26>
 800874e:	2b20      	cmp	r3, #32
 8008750:	d12a      	bne.n	80087a8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008758:	3b01      	subs	r3, #1
 800875a:	2b02      	cmp	r3, #2
 800875c:	d81d      	bhi.n	800879a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	889b      	ldrh	r3, [r3, #4]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d813      	bhi.n	8008790 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
 8008776:	4603      	mov	r3, r0
 8008778:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	88db      	ldrh	r3, [r3, #6]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d110      	bne.n	80087a4 <USBD_StdItfReq+0x78>
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10d      	bne.n	80087a4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fd56 	bl	800923a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800878e:	e009      	b.n	80087a4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fc89 	bl	80090aa <USBD_CtlError>
          break;
 8008798:	e004      	b.n	80087a4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fc84 	bl	80090aa <USBD_CtlError>
          break;
 80087a2:	e000      	b.n	80087a6 <USBD_StdItfReq+0x7a>
          break;
 80087a4:	bf00      	nop
      }
      break;
 80087a6:	e004      	b.n	80087b2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fc7d 	bl	80090aa <USBD_CtlError>
      break;
 80087b0:	bf00      	nop
  }

  return USBD_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	889b      	ldrh	r3, [r3, #4]
 80087ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d8:	2b40      	cmp	r3, #64	; 0x40
 80087da:	d007      	beq.n	80087ec <USBD_StdEPReq+0x30>
 80087dc:	2b40      	cmp	r3, #64	; 0x40
 80087de:	f200 8146 	bhi.w	8008a6e <USBD_StdEPReq+0x2b2>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <USBD_StdEPReq+0x40>
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	f040 8141 	bne.w	8008a6e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
      break;
 80087fa:	e13d      	b.n	8008a78 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008804:	2b20      	cmp	r3, #32
 8008806:	d10a      	bne.n	800881e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	4798      	blx	r3
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]

        return ret;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	e12d      	b.n	8008a7a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	785b      	ldrb	r3, [r3, #1]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d007      	beq.n	8008836 <USBD_StdEPReq+0x7a>
 8008826:	2b03      	cmp	r3, #3
 8008828:	f300 811b 	bgt.w	8008a62 <USBD_StdEPReq+0x2a6>
 800882c:	2b00      	cmp	r3, #0
 800882e:	d072      	beq.n	8008916 <USBD_StdEPReq+0x15a>
 8008830:	2b01      	cmp	r3, #1
 8008832:	d03a      	beq.n	80088aa <USBD_StdEPReq+0xee>
 8008834:	e115      	b.n	8008a62 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883c:	2b02      	cmp	r3, #2
 800883e:	d002      	beq.n	8008846 <USBD_StdEPReq+0x8a>
 8008840:	2b03      	cmp	r3, #3
 8008842:	d015      	beq.n	8008870 <USBD_StdEPReq+0xb4>
 8008844:	e02b      	b.n	800889e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00c      	beq.n	8008866 <USBD_StdEPReq+0xaa>
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	2b80      	cmp	r3, #128	; 0x80
 8008850:	d009      	beq.n	8008866 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 f8a2 	bl	80099a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800885c:	2180      	movs	r1, #128	; 0x80
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 f89e 	bl	80099a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008864:	e020      	b.n	80088a8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fc1e 	bl	80090aa <USBD_CtlError>
              break;
 800886e:	e01b      	b.n	80088a8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	885b      	ldrh	r3, [r3, #2]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10e      	bne.n	8008896 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00b      	beq.n	8008896 <USBD_StdEPReq+0xda>
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b80      	cmp	r3, #128	; 0x80
 8008882:	d008      	beq.n	8008896 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	88db      	ldrh	r3, [r3, #6]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d104      	bne.n	8008896 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 f885 	bl	80099a0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fccf 	bl	800923a <USBD_CtlSendStatus>

              break;
 800889c:	e004      	b.n	80088a8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fc02 	bl	80090aa <USBD_CtlError>
              break;
 80088a6:	bf00      	nop
          }
          break;
 80088a8:	e0e0      	b.n	8008a6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d002      	beq.n	80088ba <USBD_StdEPReq+0xfe>
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d015      	beq.n	80088e4 <USBD_StdEPReq+0x128>
 80088b8:	e026      	b.n	8008908 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00c      	beq.n	80088da <USBD_StdEPReq+0x11e>
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b80      	cmp	r3, #128	; 0x80
 80088c4:	d009      	beq.n	80088da <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 f868 	bl	80099a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80088d0:	2180      	movs	r1, #128	; 0x80
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 f864 	bl	80099a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088d8:	e01c      	b.n	8008914 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fbe4 	bl	80090aa <USBD_CtlError>
              break;
 80088e2:	e017      	b.n	8008914 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	885b      	ldrh	r3, [r3, #2]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d112      	bne.n	8008912 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 f86f 	bl	80099de <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fc9a 	bl	800923a <USBD_CtlSendStatus>
              }
              break;
 8008906:	e004      	b.n	8008912 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fbcd 	bl	80090aa <USBD_CtlError>
              break;
 8008910:	e000      	b.n	8008914 <USBD_StdEPReq+0x158>
              break;
 8008912:	bf00      	nop
          }
          break;
 8008914:	e0aa      	b.n	8008a6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891c:	2b02      	cmp	r3, #2
 800891e:	d002      	beq.n	8008926 <USBD_StdEPReq+0x16a>
 8008920:	2b03      	cmp	r3, #3
 8008922:	d032      	beq.n	800898a <USBD_StdEPReq+0x1ce>
 8008924:	e097      	b.n	8008a56 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d007      	beq.n	800893c <USBD_StdEPReq+0x180>
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b80      	cmp	r3, #128	; 0x80
 8008930:	d004      	beq.n	800893c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fbb8 	bl	80090aa <USBD_CtlError>
                break;
 800893a:	e091      	b.n	8008a60 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800893c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008940:	2b00      	cmp	r3, #0
 8008942:	da0b      	bge.n	800895c <USBD_StdEPReq+0x1a0>
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	3310      	adds	r3, #16
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	4413      	add	r3, r2
 8008958:	3304      	adds	r3, #4
 800895a:	e00b      	b.n	8008974 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	4413      	add	r3, r2
 8008972:	3304      	adds	r3, #4
 8008974:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2202      	movs	r2, #2
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fbfb 	bl	800917e <USBD_CtlSendData>
              break;
 8008988:	e06a      	b.n	8008a60 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800898a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800898e:	2b00      	cmp	r3, #0
 8008990:	da11      	bge.n	80089b6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	f003 020f 	and.w	r2, r3, #15
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	3318      	adds	r3, #24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d117      	bne.n	80089dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fb7b 	bl	80090aa <USBD_CtlError>
                  break;
 80089b4:	e054      	b.n	8008a60 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	f003 020f 	and.w	r2, r3, #15
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d104      	bne.n	80089dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fb68 	bl	80090aa <USBD_CtlError>
                  break;
 80089da:	e041      	b.n	8008a60 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	da0b      	bge.n	80089fc <USBD_StdEPReq+0x240>
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	3310      	adds	r3, #16
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	4413      	add	r3, r2
 80089f8:	3304      	adds	r3, #4
 80089fa:	e00b      	b.n	8008a14 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	4413      	add	r3, r2
 8008a12:	3304      	adds	r3, #4
 8008a14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <USBD_StdEPReq+0x266>
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b80      	cmp	r3, #128	; 0x80
 8008a20:	d103      	bne.n	8008a2a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	e00e      	b.n	8008a48 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fff4 	bl	8009a1c <USBD_LL_IsStallEP>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	e002      	b.n	8008a48 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fb95 	bl	800917e <USBD_CtlSendData>
              break;
 8008a54:	e004      	b.n	8008a60 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fb26 	bl	80090aa <USBD_CtlError>
              break;
 8008a5e:	bf00      	nop
          }
          break;
 8008a60:	e004      	b.n	8008a6c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fb20 	bl	80090aa <USBD_CtlError>
          break;
 8008a6a:	bf00      	nop
      }
      break;
 8008a6c:	e004      	b.n	8008a78 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fb1a 	bl	80090aa <USBD_CtlError>
      break;
 8008a76:	bf00      	nop
  }

  return ret;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	0a1b      	lsrs	r3, r3, #8
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	2b06      	cmp	r3, #6
 8008aa6:	f200 8128 	bhi.w	8008cfa <USBD_GetDescriptor+0x276>
 8008aaa:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <USBD_GetDescriptor+0x2c>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008acd 	.word	0x08008acd
 8008ab4:	08008ae5 	.word	0x08008ae5
 8008ab8:	08008b25 	.word	0x08008b25
 8008abc:	08008cfb 	.word	0x08008cfb
 8008ac0:	08008cfb 	.word	0x08008cfb
 8008ac4:	08008c9b 	.word	0x08008c9b
 8008ac8:	08008cc7 	.word	0x08008cc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	7c12      	ldrb	r2, [r2, #16]
 8008ad8:	f107 0108 	add.w	r1, r7, #8
 8008adc:	4610      	mov	r0, r2
 8008ade:	4798      	blx	r3
 8008ae0:	60f8      	str	r0, [r7, #12]
      break;
 8008ae2:	e112      	b.n	8008d0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7c1b      	ldrb	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10d      	bne.n	8008b08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	f107 0208 	add.w	r2, r7, #8
 8008af8:	4610      	mov	r0, r2
 8008afa:	4798      	blx	r3
 8008afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	2202      	movs	r2, #2
 8008b04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b06:	e100      	b.n	8008d0a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	f107 0208 	add.w	r2, r7, #8
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	2202      	movs	r2, #2
 8008b20:	701a      	strb	r2, [r3, #0]
      break;
 8008b22:	e0f2      	b.n	8008d0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	885b      	ldrh	r3, [r3, #2]
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b05      	cmp	r3, #5
 8008b2c:	f200 80ac 	bhi.w	8008c88 <USBD_GetDescriptor+0x204>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <USBD_GetDescriptor+0xb4>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b51 	.word	0x08008b51
 8008b3c:	08008b85 	.word	0x08008b85
 8008b40:	08008bb9 	.word	0x08008bb9
 8008b44:	08008bed 	.word	0x08008bed
 8008b48:	08008c21 	.word	0x08008c21
 8008b4c:	08008c55 	.word	0x08008c55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b72:	e091      	b.n	8008c98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa97 	bl	80090aa <USBD_CtlError>
            err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
          break;
 8008b82:	e089      	b.n	8008c98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00b      	beq.n	8008ba8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7c12      	ldrb	r2, [r2, #16]
 8008b9c:	f107 0108 	add.w	r1, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ba6:	e077      	b.n	8008c98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa7d 	bl	80090aa <USBD_CtlError>
            err++;
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bb6:	e06f      	b.n	8008c98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00b      	beq.n	8008bdc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7c12      	ldrb	r2, [r2, #16]
 8008bd0:	f107 0108 	add.w	r1, r7, #8
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bda:	e05d      	b.n	8008c98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa63 	bl	80090aa <USBD_CtlError>
            err++;
 8008be4:	7afb      	ldrb	r3, [r7, #11]
 8008be6:	3301      	adds	r3, #1
 8008be8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bea:	e055      	b.n	8008c98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	7c12      	ldrb	r2, [r2, #16]
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c0e:	e043      	b.n	8008c98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa49 	bl	80090aa <USBD_CtlError>
            err++;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c1e:	e03b      	b.n	8008c98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	7c12      	ldrb	r2, [r2, #16]
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c42:	e029      	b.n	8008c98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa2f 	bl	80090aa <USBD_CtlError>
            err++;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	72fb      	strb	r3, [r7, #11]
          break;
 8008c52:	e021      	b.n	8008c98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	7c12      	ldrb	r2, [r2, #16]
 8008c6c:	f107 0108 	add.w	r1, r7, #8
 8008c70:	4610      	mov	r0, r2
 8008c72:	4798      	blx	r3
 8008c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c76:	e00f      	b.n	8008c98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa15 	bl	80090aa <USBD_CtlError>
            err++;
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	3301      	adds	r3, #1
 8008c84:	72fb      	strb	r3, [r7, #11]
          break;
 8008c86:	e007      	b.n	8008c98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa0d 	bl	80090aa <USBD_CtlError>
          err++;
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	3301      	adds	r3, #1
 8008c94:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c96:	e038      	b.n	8008d0a <USBD_GetDescriptor+0x286>
 8008c98:	e037      	b.n	8008d0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	7c1b      	ldrb	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008caa:	f107 0208 	add.w	r2, r7, #8
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4798      	blx	r3
 8008cb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cb4:	e029      	b.n	8008d0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f9f6 	bl	80090aa <USBD_CtlError>
        err++;
 8008cbe:	7afb      	ldrb	r3, [r7, #11]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc4:	e021      	b.n	8008d0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	7c1b      	ldrb	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10d      	bne.n	8008cea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	f107 0208 	add.w	r2, r7, #8
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4798      	blx	r3
 8008cde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	2207      	movs	r2, #7
 8008ce6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ce8:	e00f      	b.n	8008d0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9dc 	bl	80090aa <USBD_CtlError>
        err++;
 8008cf2:	7afb      	ldrb	r3, [r7, #11]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	72fb      	strb	r3, [r7, #11]
      break;
 8008cf8:	e007      	b.n	8008d0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f9d4 	bl	80090aa <USBD_CtlError>
      err++;
 8008d02:	7afb      	ldrb	r3, [r7, #11]
 8008d04:	3301      	adds	r3, #1
 8008d06:	72fb      	strb	r3, [r7, #11]
      break;
 8008d08:	bf00      	nop
  }

  if (err != 0U)
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d11c      	bne.n	8008d4a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008d10:	893b      	ldrh	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d011      	beq.n	8008d3a <USBD_GetDescriptor+0x2b6>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	88db      	ldrh	r3, [r3, #6]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00d      	beq.n	8008d3a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	88da      	ldrh	r2, [r3, #6]
 8008d22:	893b      	ldrh	r3, [r7, #8]
 8008d24:	4293      	cmp	r3, r2
 8008d26:	bf28      	it	cs
 8008d28:	4613      	movcs	r3, r2
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d2e:	893b      	ldrh	r3, [r7, #8]
 8008d30:	461a      	mov	r2, r3
 8008d32:	68f9      	ldr	r1, [r7, #12]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fa22 	bl	800917e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	88db      	ldrh	r3, [r3, #6]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d104      	bne.n	8008d4c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fa79 	bl	800923a <USBD_CtlSendStatus>
 8008d48:	e000      	b.n	8008d4c <USBD_GetDescriptor+0x2c8>
    return;
 8008d4a:	bf00      	nop
    }
  }
}
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop

08008d54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	889b      	ldrh	r3, [r3, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d130      	bne.n	8008dc8 <USBD_SetAddress+0x74>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	88db      	ldrh	r3, [r3, #6]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d12c      	bne.n	8008dc8 <USBD_SetAddress+0x74>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	885b      	ldrh	r3, [r3, #2]
 8008d72:	2b7f      	cmp	r3, #127	; 0x7f
 8008d74:	d828      	bhi.n	8008dc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	885b      	ldrh	r3, [r3, #2]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d104      	bne.n	8008d96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f98b 	bl	80090aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d94:	e01d      	b.n	8008dd2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7bfa      	ldrb	r2, [r7, #15]
 8008d9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fe66 	bl	8009a74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fa46 	bl	800923a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbc:	e009      	b.n	8008dd2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc6:	e004      	b.n	8008dd2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f96d 	bl	80090aa <USBD_CtlError>
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	885b      	ldrh	r3, [r3, #2]
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	4b41      	ldr	r3, [pc, #260]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008dee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008df0:	4b40      	ldr	r3, [pc, #256]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d904      	bls.n	8008e02 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f955 	bl	80090aa <USBD_CtlError>
 8008e00:	e075      	b.n	8008eee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d002      	beq.n	8008e12 <USBD_SetConfig+0x36>
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d023      	beq.n	8008e58 <USBD_SetConfig+0x7c>
 8008e10:	e062      	b.n	8008ed8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008e12:	4b38      	ldr	r3, [pc, #224]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01a      	beq.n	8008e50 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008e1a:	4b36      	ldr	r3, [pc, #216]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2203      	movs	r2, #3
 8008e28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e2c:	4b31      	ldr	r3, [pc, #196]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff f9e7 	bl	8008206 <USBD_SetClassConfig>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d104      	bne.n	8008e48 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f932 	bl	80090aa <USBD_CtlError>
            return;
 8008e46:	e052      	b.n	8008eee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f9f6 	bl	800923a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e4e:	e04e      	b.n	8008eee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f9f2 	bl	800923a <USBD_CtlSendStatus>
        break;
 8008e56:	e04a      	b.n	8008eee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008e58:	4b26      	ldr	r3, [pc, #152]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d112      	bne.n	8008e86 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008e68:	4b22      	ldr	r3, [pc, #136]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008e72:	4b20      	ldr	r3, [pc, #128]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff f9e3 	bl	8008244 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f9db 	bl	800923a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e84:	e033      	b.n	8008eee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e86:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d01d      	beq.n	8008ed0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff f9d1 	bl	8008244 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008ea2:	4b14      	ldr	r3, [pc, #80]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008eac:	4b11      	ldr	r3, [pc, #68]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff f9a7 	bl	8008206 <USBD_SetClassConfig>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d104      	bne.n	8008ec8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f8f2 	bl	80090aa <USBD_CtlError>
            return;
 8008ec6:	e012      	b.n	8008eee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f9b6 	bl	800923a <USBD_CtlSendStatus>
        break;
 8008ece:	e00e      	b.n	8008eee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f9b2 	bl	800923a <USBD_CtlSendStatus>
        break;
 8008ed6:	e00a      	b.n	8008eee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f8e5 	bl	80090aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008ee0:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <USBD_SetConfig+0x118>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff f9ac 	bl	8008244 <USBD_ClrClassConfig>
        break;
 8008eec:	bf00      	nop
    }
  }
}
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	20000370 	.word	0x20000370

08008ef8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	88db      	ldrh	r3, [r3, #6]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d004      	beq.n	8008f14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f8cc 	bl	80090aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f12:	e022      	b.n	8008f5a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	dc02      	bgt.n	8008f24 <USBD_GetConfig+0x2c>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dc03      	bgt.n	8008f2a <USBD_GetConfig+0x32>
 8008f22:	e015      	b.n	8008f50 <USBD_GetConfig+0x58>
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d00b      	beq.n	8008f40 <USBD_GetConfig+0x48>
 8008f28:	e012      	b.n	8008f50 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3308      	adds	r3, #8
 8008f34:	2201      	movs	r2, #1
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f920 	bl	800917e <USBD_CtlSendData>
        break;
 8008f3e:	e00c      	b.n	8008f5a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3304      	adds	r3, #4
 8008f44:	2201      	movs	r2, #1
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f918 	bl	800917e <USBD_CtlSendData>
        break;
 8008f4e:	e004      	b.n	8008f5a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f8a9 	bl	80090aa <USBD_CtlError>
        break;
 8008f58:	bf00      	nop
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f72:	3b01      	subs	r3, #1
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d81e      	bhi.n	8008fb6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	88db      	ldrh	r3, [r3, #6]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d004      	beq.n	8008f8a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f891 	bl	80090aa <USBD_CtlError>
        break;
 8008f88:	e01a      	b.n	8008fc0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f043 0202 	orr.w	r2, r3, #2
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	330c      	adds	r3, #12
 8008faa:	2202      	movs	r2, #2
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f8e5 	bl	800917e <USBD_CtlSendData>
      break;
 8008fb4:	e004      	b.n	8008fc0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f876 	bl	80090aa <USBD_CtlError>
      break;
 8008fbe:	bf00      	nop
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d106      	bne.n	8008fe8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f929 	bl	800923a <USBD_CtlSendStatus>
  }
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009000:	3b01      	subs	r3, #1
 8009002:	2b02      	cmp	r3, #2
 8009004:	d80b      	bhi.n	800901e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	885b      	ldrh	r3, [r3, #2]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d10c      	bne.n	8009028 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f90f 	bl	800923a <USBD_CtlSendStatus>
      }
      break;
 800901c:	e004      	b.n	8009028 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f842 	bl	80090aa <USBD_CtlError>
      break;
 8009026:	e000      	b.n	800902a <USBD_ClrFeature+0x3a>
      break;
 8009028:	bf00      	nop
  }
}
 800902a:	bf00      	nop
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	785a      	ldrb	r2, [r3, #1]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	3302      	adds	r3, #2
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	b29a      	uxth	r2, r3
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	3303      	adds	r3, #3
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	b29b      	uxth	r3, r3
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	b29b      	uxth	r3, r3
 8009060:	4413      	add	r3, r2
 8009062:	b29a      	uxth	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	3304      	adds	r3, #4
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b29a      	uxth	r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	3305      	adds	r3, #5
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	b29b      	uxth	r3, r3
 8009078:	021b      	lsls	r3, r3, #8
 800907a:	b29b      	uxth	r3, r3
 800907c:	4413      	add	r3, r2
 800907e:	b29a      	uxth	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	3306      	adds	r3, #6
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	b29a      	uxth	r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	3307      	adds	r3, #7
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	b29b      	uxth	r3, r3
 8009094:	021b      	lsls	r3, r3, #8
 8009096:	b29b      	uxth	r3, r3
 8009098:	4413      	add	r3, r2
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	80da      	strh	r2, [r3, #6]

}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr

080090aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80090b4:	2180      	movs	r1, #128	; 0x80
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fc72 	bl	80099a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80090bc:	2100      	movs	r1, #0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fc6e 	bl	80099a0 <USBD_LL_StallEP>
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d032      	beq.n	8009148 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f834 	bl	8009150 <USBD_GetLen>
 80090e8:	4603      	mov	r3, r0
 80090ea:	3301      	adds	r3, #1
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	75fa      	strb	r2, [r7, #23]
 80090fc:	461a      	mov	r2, r3
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4413      	add	r3, r2
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	7812      	ldrb	r2, [r2, #0]
 8009106:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	75fa      	strb	r2, [r7, #23]
 800910e:	461a      	mov	r2, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4413      	add	r3, r2
 8009114:	2203      	movs	r2, #3
 8009116:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009118:	e012      	b.n	8009140 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	60fa      	str	r2, [r7, #12]
 8009120:	7dfa      	ldrb	r2, [r7, #23]
 8009122:	1c51      	adds	r1, r2, #1
 8009124:	75f9      	strb	r1, [r7, #23]
 8009126:	4611      	mov	r1, r2
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	440a      	add	r2, r1
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009130:	7dfb      	ldrb	r3, [r7, #23]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	75fa      	strb	r2, [r7, #23]
 8009136:	461a      	mov	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	4413      	add	r3, r2
 800913c:	2200      	movs	r2, #0
 800913e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e8      	bne.n	800911a <USBD_GetString+0x4e>
    }
  }
}
 8009148:	bf00      	nop
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800915c:	e005      	b.n	800916a <USBD_GetLen+0x1a>
  {
    len++;
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	3301      	adds	r3, #1
 8009162:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3301      	adds	r3, #1
 8009168:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1f5      	bne.n	800915e <USBD_GetLen+0xe>
  }

  return len;
 8009172:	7bfb      	ldrb	r3, [r7, #15]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	bc80      	pop	{r7}
 800917c:	4770      	bx	lr

0800917e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	4613      	mov	r3, r2
 800918a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2202      	movs	r2, #2
 8009190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091a0:	88fb      	ldrh	r3, [r7, #6]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	2100      	movs	r1, #0
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 fc83 	bl	8009ab2 <USBD_LL_Transmit>

  return USBD_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	4613      	mov	r3, r2
 80091c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	2100      	movs	r1, #0
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fc71 	bl	8009ab2 <USBD_LL_Transmit>

  return USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	4613      	mov	r3, r2
 80091e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2203      	movs	r2, #3
 80091ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091f0:	88fa      	ldrh	r2, [r7, #6]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80091f8:	88fa      	ldrh	r2, [r7, #6]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009200:	88fb      	ldrh	r3, [r7, #6]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	2100      	movs	r1, #0
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 fc76 	bl	8009af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	4613      	mov	r3, r2
 8009222:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	2100      	movs	r1, #0
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 fc64 	bl	8009af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2204      	movs	r2, #4
 8009246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800924a:	2300      	movs	r3, #0
 800924c:	2200      	movs	r2, #0
 800924e:	2100      	movs	r1, #0
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fc2e 	bl	8009ab2 <USBD_LL_Transmit>

  return USBD_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2205      	movs	r2, #5
 800926c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009270:	2300      	movs	r3, #0
 8009272:	2200      	movs	r2, #0
 8009274:	2100      	movs	r1, #0
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fc3e 	bl	8009af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800928c:	2200      	movs	r2, #0
 800928e:	4912      	ldr	r1, [pc, #72]	; (80092d8 <MX_USB_DEVICE_Init+0x50>)
 8009290:	4812      	ldr	r0, [pc, #72]	; (80092dc <MX_USB_DEVICE_Init+0x54>)
 8009292:	f7fe ff5e 	bl	8008152 <USBD_Init>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800929c:	f7f7 fc5b 	bl	8000b56 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80092a0:	490f      	ldr	r1, [pc, #60]	; (80092e0 <MX_USB_DEVICE_Init+0x58>)
 80092a2:	480e      	ldr	r0, [pc, #56]	; (80092dc <MX_USB_DEVICE_Init+0x54>)
 80092a4:	f7fe ff80 	bl	80081a8 <USBD_RegisterClass>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80092ae:	f7f7 fc52 	bl	8000b56 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80092b2:	490c      	ldr	r1, [pc, #48]	; (80092e4 <MX_USB_DEVICE_Init+0x5c>)
 80092b4:	4809      	ldr	r0, [pc, #36]	; (80092dc <MX_USB_DEVICE_Init+0x54>)
 80092b6:	f7fe feb1 	bl	800801c <USBD_CDC_RegisterInterface>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092c0:	f7f7 fc49 	bl	8000b56 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092c4:	4805      	ldr	r0, [pc, #20]	; (80092dc <MX_USB_DEVICE_Init+0x54>)
 80092c6:	f7fe ff88 	bl	80081da <USBD_Start>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092d0:	f7f7 fc41 	bl	8000b56 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */


 // StartMenu();
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092d4:	bf00      	nop
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000170 	.word	0x20000170
 80092dc:	20000374 	.word	0x20000374
 80092e0:	2000005c 	.word	0x2000005c
 80092e4:	20000160 	.word	0x20000160

080092e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092ec:	2200      	movs	r2, #0
 80092ee:	4905      	ldr	r1, [pc, #20]	; (8009304 <CDC_Init_FS+0x1c>)
 80092f0:	4805      	ldr	r0, [pc, #20]	; (8009308 <CDC_Init_FS+0x20>)
 80092f2:	f7fe fea9 	bl	8008048 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092f6:	4905      	ldr	r1, [pc, #20]	; (800930c <CDC_Init_FS+0x24>)
 80092f8:	4803      	ldr	r0, [pc, #12]	; (8009308 <CDC_Init_FS+0x20>)
 80092fa:	f7fe febe 	bl	800807a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092fe:	2300      	movs	r3, #0
  // StartMenu();
  /* USER CODE END 3 */
}
 8009300:	4618      	mov	r0, r3
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20000a20 	.word	0x20000a20
 8009308:	20000374 	.word	0x20000374
 800930c:	20000638 	.word	0x20000638

08009310 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009310:	b480      	push	{r7}
 8009312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009314:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009316:	4618      	mov	r0, r3
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr
	...

08009320 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
 800932c:	4613      	mov	r3, r2
 800932e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b23      	cmp	r3, #35	; 0x23
 8009334:	d84a      	bhi.n	80093cc <CDC_Control_FS+0xac>
 8009336:	a201      	add	r2, pc, #4	; (adr r2, 800933c <CDC_Control_FS+0x1c>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	080093cd 	.word	0x080093cd
 8009340:	080093cd 	.word	0x080093cd
 8009344:	080093cd 	.word	0x080093cd
 8009348:	080093cd 	.word	0x080093cd
 800934c:	080093cd 	.word	0x080093cd
 8009350:	080093cd 	.word	0x080093cd
 8009354:	080093cd 	.word	0x080093cd
 8009358:	080093cd 	.word	0x080093cd
 800935c:	080093cd 	.word	0x080093cd
 8009360:	080093cd 	.word	0x080093cd
 8009364:	080093cd 	.word	0x080093cd
 8009368:	080093cd 	.word	0x080093cd
 800936c:	080093cd 	.word	0x080093cd
 8009370:	080093cd 	.word	0x080093cd
 8009374:	080093cd 	.word	0x080093cd
 8009378:	080093cd 	.word	0x080093cd
 800937c:	080093cd 	.word	0x080093cd
 8009380:	080093cd 	.word	0x080093cd
 8009384:	080093cd 	.word	0x080093cd
 8009388:	080093cd 	.word	0x080093cd
 800938c:	080093cd 	.word	0x080093cd
 8009390:	080093cd 	.word	0x080093cd
 8009394:	080093cd 	.word	0x080093cd
 8009398:	080093cd 	.word	0x080093cd
 800939c:	080093cd 	.word	0x080093cd
 80093a0:	080093cd 	.word	0x080093cd
 80093a4:	080093cd 	.word	0x080093cd
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093cd 	.word	0x080093cd
 80093b0:	080093cd 	.word	0x080093cd
 80093b4:	080093cd 	.word	0x080093cd
 80093b8:	080093cd 	.word	0x080093cd
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	080093cd 	.word	0x080093cd
 80093c4:	080093cd 	.word	0x080093cd
 80093c8:	080093cd 	.word	0x080093cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093cc:	bf00      	nop
  }

  return (USBD_OK);
 80093ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop

080093dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	//memcpy(Rec_Len, Len, sizeof(Len));

	 //Rec_Len = *Len;
	// ReceiveFlag =1;

	 StackHandler(Buf, *Len);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7f7 fa69 	bl	80008c4 <StackHandler>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	4805      	ldr	r0, [pc, #20]	; (800940c <CDC_Receive_FS+0x30>)
 80093f6:	f7fe fe40 	bl	800807a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093fa:	4804      	ldr	r0, [pc, #16]	; (800940c <CDC_Receive_FS+0x30>)
 80093fc:	f7fe fe7f 	bl	80080fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009400:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000374 	.word	0x20000374

08009410 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009420:	4b0d      	ldr	r3, [pc, #52]	; (8009458 <CDC_Transmit_FS+0x48>)
 8009422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009426:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState != 0){
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <CDC_Transmit_FS+0x26>

    return USBD_BUSY;
 8009432:	2301      	movs	r3, #1
 8009434:	e00b      	b.n	800944e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009436:	887b      	ldrh	r3, [r7, #2]
 8009438:	461a      	mov	r2, r3
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	4806      	ldr	r0, [pc, #24]	; (8009458 <CDC_Transmit_FS+0x48>)
 800943e:	f7fe fe03 	bl	8008048 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009442:	4805      	ldr	r0, [pc, #20]	; (8009458 <CDC_Transmit_FS+0x48>)
 8009444:	f7fe fe2c 	bl	80080a0 <USBD_CDC_TransmitPacket>
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20000374 	.word	0x20000374

0800945c <BusyCheck>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

uint8_t BusyCheck (void){
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
	uint8_t result = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	71fb      	strb	r3, [r7, #7]
	 USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009466:	4b08      	ldr	r3, [pc, #32]	; (8009488 <BusyCheck+0x2c>)
 8009468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946c:	603b      	str	r3, [r7, #0]
	 if (hcdc->TxState != 0){
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <BusyCheck+0x20>
		//  BusyFlag =1;
	    return USBD_BUSY;
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <BusyCheck+0x22>



	   //result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);

	   return result;
 800947c:	79fb      	ldrb	r3, [r7, #7]


}
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	bc80      	pop	{r7}
 8009486:	4770      	bx	lr
 8009488:	20000374 	.word	0x20000374

0800948c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2212      	movs	r2, #18
 800949c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800949e:	4b03      	ldr	r3, [pc, #12]	; (80094ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	2000018c 	.word	0x2000018c

080094b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2204      	movs	r2, #4
 80094c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094c2:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	200001a0 	.word	0x200001a0

080094d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d105      	bne.n	80094f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	4907      	ldr	r1, [pc, #28]	; (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
 80094ea:	4808      	ldr	r0, [pc, #32]	; (800950c <USBD_FS_ProductStrDescriptor+0x38>)
 80094ec:	f7ff fdee 	bl	80090cc <USBD_GetString>
 80094f0:	e004      	b.n	80094fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	4904      	ldr	r1, [pc, #16]	; (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
 80094f6:	4805      	ldr	r0, [pc, #20]	; (800950c <USBD_FS_ProductStrDescriptor+0x38>)
 80094f8:	f7ff fde8 	bl	80090cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80094fc:	4b02      	ldr	r3, [pc, #8]	; (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20000e08 	.word	0x20000e08
 800950c:	0800a600 	.word	0x0800a600

08009510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	4904      	ldr	r1, [pc, #16]	; (8009530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009520:	4804      	ldr	r0, [pc, #16]	; (8009534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009522:	f7ff fdd3 	bl	80090cc <USBD_GetString>
  return USBD_StrDesc;
 8009526:	4b02      	ldr	r3, [pc, #8]	; (8009530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	20000e08 	.word	0x20000e08
 8009534:	0800a618 	.word	0x0800a618

08009538 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	6039      	str	r1, [r7, #0]
 8009542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	221a      	movs	r2, #26
 8009548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800954a:	f000 f843 	bl	80095d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800954e:	4b02      	ldr	r3, [pc, #8]	; (8009558 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	200001a4 	.word	0x200001a4

0800955c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	6039      	str	r1, [r7, #0]
 8009566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d105      	bne.n	800957a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4907      	ldr	r1, [pc, #28]	; (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009572:	4808      	ldr	r0, [pc, #32]	; (8009594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009574:	f7ff fdaa 	bl	80090cc <USBD_GetString>
 8009578:	e004      	b.n	8009584 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4904      	ldr	r1, [pc, #16]	; (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
 800957e:	4805      	ldr	r0, [pc, #20]	; (8009594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009580:	f7ff fda4 	bl	80090cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009584:	4b02      	ldr	r3, [pc, #8]	; (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000e08 	.word	0x20000e08
 8009594:	0800a62c 	.word	0x0800a62c

08009598 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d105      	bne.n	80095b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4907      	ldr	r1, [pc, #28]	; (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ae:	4808      	ldr	r0, [pc, #32]	; (80095d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095b0:	f7ff fd8c 	bl	80090cc <USBD_GetString>
 80095b4:	e004      	b.n	80095c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4904      	ldr	r1, [pc, #16]	; (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ba:	4805      	ldr	r0, [pc, #20]	; (80095d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095bc:	f7ff fd86 	bl	80090cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c0:	4b02      	ldr	r3, [pc, #8]	; (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000e08 	.word	0x20000e08
 80095d0:	0800a638 	.word	0x0800a638

080095d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095da:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <Get_SerialNum+0x44>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095e0:	4b0e      	ldr	r3, [pc, #56]	; (800961c <Get_SerialNum+0x48>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095e6:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <Get_SerialNum+0x4c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095fa:	2208      	movs	r2, #8
 80095fc:	4909      	ldr	r1, [pc, #36]	; (8009624 <Get_SerialNum+0x50>)
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f814 	bl	800962c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009604:	2204      	movs	r2, #4
 8009606:	4908      	ldr	r1, [pc, #32]	; (8009628 <Get_SerialNum+0x54>)
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f000 f80f 	bl	800962c <IntToUnicode>
  }
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	1ffff7e8 	.word	0x1ffff7e8
 800961c:	1ffff7ec 	.word	0x1ffff7ec
 8009620:	1ffff7f0 	.word	0x1ffff7f0
 8009624:	200001a6 	.word	0x200001a6
 8009628:	200001b6 	.word	0x200001b6

0800962c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800963e:	2300      	movs	r3, #0
 8009640:	75fb      	strb	r3, [r7, #23]
 8009642:	e027      	b.n	8009694 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	0f1b      	lsrs	r3, r3, #28
 8009648:	2b09      	cmp	r3, #9
 800964a:	d80b      	bhi.n	8009664 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	0f1b      	lsrs	r3, r3, #28
 8009650:	b2da      	uxtb	r2, r3
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	4619      	mov	r1, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	440b      	add	r3, r1
 800965c:	3230      	adds	r2, #48	; 0x30
 800965e:	b2d2      	uxtb	r2, r2
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e00a      	b.n	800967a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	0f1b      	lsrs	r3, r3, #28
 8009668:	b2da      	uxtb	r2, r3
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	4619      	mov	r1, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	440b      	add	r3, r1
 8009674:	3237      	adds	r2, #55	; 0x37
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	3301      	adds	r3, #1
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	4413      	add	r3, r2
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	3301      	adds	r3, #1
 8009692:	75fb      	strb	r3, [r7, #23]
 8009694:	7dfa      	ldrb	r2, [r7, #23]
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	429a      	cmp	r2, r3
 800969a:	d3d3      	bcc.n	8009644 <IntToUnicode+0x18>
  }
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a0d      	ldr	r2, [pc, #52]	; (80096ec <HAL_PCD_MspInit+0x44>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d113      	bne.n	80096e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096ba:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <HAL_PCD_MspInit+0x48>)
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	4a0c      	ldr	r2, [pc, #48]	; (80096f0 <HAL_PCD_MspInit+0x48>)
 80096c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096c4:	61d3      	str	r3, [r2, #28]
 80096c6:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <HAL_PCD_MspInit+0x48>)
 80096c8:	69db      	ldr	r3, [r3, #28]
 80096ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80096d2:	2200      	movs	r2, #0
 80096d4:	2100      	movs	r1, #0
 80096d6:	2014      	movs	r0, #20
 80096d8:	f7f8 f9cd 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80096dc:	2014      	movs	r0, #20
 80096de:	f7f8 f9e6 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	40005c00 	.word	0x40005c00
 80096f0:	40021000 	.word	0x40021000

080096f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009708:	4619      	mov	r1, r3
 800970a:	4610      	mov	r0, r2
 800970c:	f7fe fdad 	bl	800826a <USBD_LL_SetupStage>
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	440b      	add	r3, r1
 8009738:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	4619      	mov	r1, r3
 8009742:	f7fe fddf 	bl	8008304 <USBD_LL_DataOutStage>
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	00db      	lsls	r3, r3, #3
 800976c:	440b      	add	r3, r1
 800976e:	333c      	adds	r3, #60	; 0x3c
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	78fb      	ldrb	r3, [r7, #3]
 8009774:	4619      	mov	r1, r3
 8009776:	f7fe fe36 	bl	80083e6 <USBD_LL_DataInStage>
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe ff46 	bl	8008622 <USBD_LL_SOF>
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097a6:	2301      	movs	r3, #1
 80097a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d001      	beq.n	80097b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097b2:	f7f7 f9d0 	bl	8000b56 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097bc:	7bfa      	ldrb	r2, [r7, #15]
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fef6 	bl	80085b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe feaf 	bl	8008530 <USBD_LL_Reset>
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fef0 	bl	80085d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097f8:	4b04      	ldr	r3, [pc, #16]	; (800980c <HAL_PCD_SuspendCallback+0x30>)
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	4a03      	ldr	r2, [pc, #12]	; (800980c <HAL_PCD_SuspendCallback+0x30>)
 80097fe:	f043 0306 	orr.w	r3, r3, #6
 8009802:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	e000ed00 	.word	0xe000ed00

08009810 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe feea 	bl	80085f8 <USBD_LL_Resume>
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009834:	4a28      	ldr	r2, [pc, #160]	; (80098d8 <USBD_LL_Init+0xac>)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a26      	ldr	r2, [pc, #152]	; (80098d8 <USBD_LL_Init+0xac>)
 8009840:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009844:	4b24      	ldr	r3, [pc, #144]	; (80098d8 <USBD_LL_Init+0xac>)
 8009846:	4a25      	ldr	r2, [pc, #148]	; (80098dc <USBD_LL_Init+0xb0>)
 8009848:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800984a:	4b23      	ldr	r3, [pc, #140]	; (80098d8 <USBD_LL_Init+0xac>)
 800984c:	2208      	movs	r2, #8
 800984e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009850:	4b21      	ldr	r3, [pc, #132]	; (80098d8 <USBD_LL_Init+0xac>)
 8009852:	2202      	movs	r2, #2
 8009854:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009856:	4b20      	ldr	r3, [pc, #128]	; (80098d8 <USBD_LL_Init+0xac>)
 8009858:	2200      	movs	r2, #0
 800985a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800985c:	4b1e      	ldr	r3, [pc, #120]	; (80098d8 <USBD_LL_Init+0xac>)
 800985e:	2200      	movs	r2, #0
 8009860:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009862:	4b1d      	ldr	r3, [pc, #116]	; (80098d8 <USBD_LL_Init+0xac>)
 8009864:	2200      	movs	r2, #0
 8009866:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009868:	481b      	ldr	r0, [pc, #108]	; (80098d8 <USBD_LL_Init+0xac>)
 800986a:	f7f8 fd5f 	bl	800232c <HAL_PCD_Init>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009874:	f7f7 f96f 	bl	8000b56 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800987e:	2318      	movs	r3, #24
 8009880:	2200      	movs	r2, #0
 8009882:	2100      	movs	r1, #0
 8009884:	f7fa f9d3 	bl	8003c2e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800988e:	2358      	movs	r3, #88	; 0x58
 8009890:	2200      	movs	r2, #0
 8009892:	2180      	movs	r1, #128	; 0x80
 8009894:	f7fa f9cb 	bl	8003c2e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800989e:	23c0      	movs	r3, #192	; 0xc0
 80098a0:	2200      	movs	r2, #0
 80098a2:	2181      	movs	r1, #129	; 0x81
 80098a4:	f7fa f9c3 	bl	8003c2e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80098b2:	2200      	movs	r2, #0
 80098b4:	2101      	movs	r1, #1
 80098b6:	f7fa f9ba 	bl	8003c2e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098c4:	2200      	movs	r2, #0
 80098c6:	2182      	movs	r1, #130	; 0x82
 80098c8:	f7fa f9b1 	bl	8003c2e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20001008 	.word	0x20001008
 80098dc:	40005c00 	.word	0x40005c00

080098e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f8 fe23 	bl	8002542 <HAL_PCD_Start>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f94e 	bl	8009ba4 <USBD_Get_USB_Status>
 8009908:	4603      	mov	r3, r0
 800990a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990c:	7bbb      	ldrb	r3, [r7, #14]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	4608      	mov	r0, r1
 8009920:	4611      	mov	r1, r2
 8009922:	461a      	mov	r2, r3
 8009924:	4603      	mov	r3, r0
 8009926:	70fb      	strb	r3, [r7, #3]
 8009928:	460b      	mov	r3, r1
 800992a:	70bb      	strb	r3, [r7, #2]
 800992c:	4613      	mov	r3, r2
 800992e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800993e:	78bb      	ldrb	r3, [r7, #2]
 8009940:	883a      	ldrh	r2, [r7, #0]
 8009942:	78f9      	ldrb	r1, [r7, #3]
 8009944:	f7f8 ff9b 	bl	800287e <HAL_PCD_EP_Open>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 f928 	bl	8009ba4 <USBD_Get_USB_Status>
 8009954:	4603      	mov	r3, r0
 8009956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009958:	7bbb      	ldrb	r3, [r7, #14]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f7f8 ffe2 	bl	800294a <HAL_PCD_EP_Close>
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f909 	bl	8009ba4 <USBD_Get_USB_Status>
 8009992:	4603      	mov	r3, r0
 8009994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009996:	7bbb      	ldrb	r3, [r7, #14]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099ba:	78fa      	ldrb	r2, [r7, #3]
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7f9 f8a2 	bl	8002b08 <HAL_PCD_EP_SetStall>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f8ea 	bl	8009ba4 <USBD_Get_USB_Status>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099f8:	78fa      	ldrb	r2, [r7, #3]
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f9 f8e3 	bl	8002bc8 <HAL_PCD_EP_ClrStall>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 f8cb 	bl	8009ba4 <USBD_Get_USB_Status>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	da0c      	bge.n	8009a52 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3e:	68f9      	ldr	r1, [r7, #12]
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	440b      	add	r3, r1
 8009a4c:	3302      	adds	r3, #2
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	e00b      	b.n	8009a6a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a58:	68f9      	ldr	r1, [r7, #12]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	440b      	add	r3, r1
 8009a64:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009a68:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bc80      	pop	{r7}
 8009a72:	4770      	bx	lr

08009a74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a8e:	78fa      	ldrb	r2, [r7, #3]
 8009a90:	4611      	mov	r1, r2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f8 fece 	bl	8002834 <HAL_PCD_SetAddress>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 f880 	bl	8009ba4 <USBD_Get_USB_Status>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b086      	sub	sp, #24
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	461a      	mov	r2, r3
 8009abe:	460b      	mov	r3, r1
 8009ac0:	72fb      	strb	r3, [r7, #11]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ad4:	893b      	ldrh	r3, [r7, #8]
 8009ad6:	7af9      	ldrb	r1, [r7, #11]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	f7f8 ffd2 	bl	8002a82 <HAL_PCD_EP_Transmit>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 f85d 	bl	8009ba4 <USBD_Get_USB_Status>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009aee:	7dbb      	ldrb	r3, [r7, #22]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	607a      	str	r2, [r7, #4]
 8009b02:	461a      	mov	r2, r3
 8009b04:	460b      	mov	r3, r1
 8009b06:	72fb      	strb	r3, [r7, #11]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b1a:	893b      	ldrh	r3, [r7, #8]
 8009b1c:	7af9      	ldrb	r1, [r7, #11]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	f7f8 ff5b 	bl	80029da <HAL_PCD_EP_Receive>
 8009b24:	4603      	mov	r3, r0
 8009b26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 f83a 	bl	8009ba4 <USBD_Get_USB_Status>
 8009b30:	4603      	mov	r3, r0
 8009b32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b34:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	460b      	mov	r3, r1
 8009b48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b50:	78fa      	ldrb	r2, [r7, #3]
 8009b52:	4611      	mov	r1, r2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7f8 ff7d 	bl	8002a54 <HAL_PCD_EP_GetRxCount>
 8009b5a:	4603      	mov	r3, r0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b6c:	4b02      	ldr	r3, [pc, #8]	; (8009b78 <USBD_static_malloc+0x14>)
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bc80      	pop	{r7}
 8009b76:	4770      	bx	lr
 8009b78:	200012f4 	.word	0x200012f4

08009b7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]

}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bc80      	pop	{r7}
 8009b8c:	4770      	bx	lr

08009b8e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b083      	sub	sp, #12
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	460b      	mov	r3, r1
 8009b98:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bc80      	pop	{r7}
 8009ba2:	4770      	bx	lr

08009ba4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d817      	bhi.n	8009be8 <USBD_Get_USB_Status+0x44>
 8009bb8:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <USBD_Get_USB_Status+0x1c>)
 8009bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbe:	bf00      	nop
 8009bc0:	08009bd1 	.word	0x08009bd1
 8009bc4:	08009bd7 	.word	0x08009bd7
 8009bc8:	08009bdd 	.word	0x08009bdd
 8009bcc:	08009be3 	.word	0x08009be3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd4:	e00b      	b.n	8009bee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bda:	e008      	b.n	8009bee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	73fb      	strb	r3, [r7, #15]
    break;
 8009be0:	e005      	b.n	8009bee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009be2:	2302      	movs	r3, #2
 8009be4:	73fb      	strb	r3, [r7, #15]
    break;
 8009be6:	e002      	b.n	8009bee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009be8:	2302      	movs	r3, #2
 8009bea:	73fb      	strb	r3, [r7, #15]
    break;
 8009bec:	bf00      	nop
  }
  return usb_status;
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bc80      	pop	{r7}
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop

08009bfc <__errno>:
 8009bfc:	4b01      	ldr	r3, [pc, #4]	; (8009c04 <__errno+0x8>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	200001c0 	.word	0x200001c0

08009c08 <__libc_init_array>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	2600      	movs	r6, #0
 8009c0c:	4d0c      	ldr	r5, [pc, #48]	; (8009c40 <__libc_init_array+0x38>)
 8009c0e:	4c0d      	ldr	r4, [pc, #52]	; (8009c44 <__libc_init_array+0x3c>)
 8009c10:	1b64      	subs	r4, r4, r5
 8009c12:	10a4      	asrs	r4, r4, #2
 8009c14:	42a6      	cmp	r6, r4
 8009c16:	d109      	bne.n	8009c2c <__libc_init_array+0x24>
 8009c18:	f000 fca4 	bl	800a564 <_init>
 8009c1c:	2600      	movs	r6, #0
 8009c1e:	4d0a      	ldr	r5, [pc, #40]	; (8009c48 <__libc_init_array+0x40>)
 8009c20:	4c0a      	ldr	r4, [pc, #40]	; (8009c4c <__libc_init_array+0x44>)
 8009c22:	1b64      	subs	r4, r4, r5
 8009c24:	10a4      	asrs	r4, r4, #2
 8009c26:	42a6      	cmp	r6, r4
 8009c28:	d105      	bne.n	8009c36 <__libc_init_array+0x2e>
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}
 8009c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c30:	4798      	blx	r3
 8009c32:	3601      	adds	r6, #1
 8009c34:	e7ee      	b.n	8009c14 <__libc_init_array+0xc>
 8009c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c3a:	4798      	blx	r3
 8009c3c:	3601      	adds	r6, #1
 8009c3e:	e7f2      	b.n	8009c26 <__libc_init_array+0x1e>
 8009c40:	0800a694 	.word	0x0800a694
 8009c44:	0800a694 	.word	0x0800a694
 8009c48:	0800a694 	.word	0x0800a694
 8009c4c:	0800a698 	.word	0x0800a698

08009c50 <malloc>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	; (8009c5c <malloc+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f000 b881 	b.w	8009d5c <_malloc_r>
 8009c5a:	bf00      	nop
 8009c5c:	200001c0 	.word	0x200001c0

08009c60 <memcpy>:
 8009c60:	440a      	add	r2, r1
 8009c62:	4291      	cmp	r1, r2
 8009c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c68:	d100      	bne.n	8009c6c <memcpy+0xc>
 8009c6a:	4770      	bx	lr
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c72:	4291      	cmp	r1, r2
 8009c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c78:	d1f9      	bne.n	8009c6e <memcpy+0xe>
 8009c7a:	bd10      	pop	{r4, pc}

08009c7c <memset>:
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	4402      	add	r2, r0
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d100      	bne.n	8009c86 <memset+0xa>
 8009c84:	4770      	bx	lr
 8009c86:	f803 1b01 	strb.w	r1, [r3], #1
 8009c8a:	e7f9      	b.n	8009c80 <memset+0x4>

08009c8c <_free_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4605      	mov	r5, r0
 8009c90:	2900      	cmp	r1, #0
 8009c92:	d040      	beq.n	8009d16 <_free_r+0x8a>
 8009c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c98:	1f0c      	subs	r4, r1, #4
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	bfb8      	it	lt
 8009c9e:	18e4      	addlt	r4, r4, r3
 8009ca0:	f000 f900 	bl	8009ea4 <__malloc_lock>
 8009ca4:	4a1c      	ldr	r2, [pc, #112]	; (8009d18 <_free_r+0x8c>)
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	b933      	cbnz	r3, 8009cb8 <_free_r+0x2c>
 8009caa:	6063      	str	r3, [r4, #4]
 8009cac:	6014      	str	r4, [r2, #0]
 8009cae:	4628      	mov	r0, r5
 8009cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb4:	f000 b8fc 	b.w	8009eb0 <__malloc_unlock>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d908      	bls.n	8009cce <_free_r+0x42>
 8009cbc:	6820      	ldr	r0, [r4, #0]
 8009cbe:	1821      	adds	r1, r4, r0
 8009cc0:	428b      	cmp	r3, r1
 8009cc2:	bf01      	itttt	eq
 8009cc4:	6819      	ldreq	r1, [r3, #0]
 8009cc6:	685b      	ldreq	r3, [r3, #4]
 8009cc8:	1809      	addeq	r1, r1, r0
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	e7ed      	b.n	8009caa <_free_r+0x1e>
 8009cce:	461a      	mov	r2, r3
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	b10b      	cbz	r3, 8009cd8 <_free_r+0x4c>
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d9fa      	bls.n	8009cce <_free_r+0x42>
 8009cd8:	6811      	ldr	r1, [r2, #0]
 8009cda:	1850      	adds	r0, r2, r1
 8009cdc:	42a0      	cmp	r0, r4
 8009cde:	d10b      	bne.n	8009cf8 <_free_r+0x6c>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	4401      	add	r1, r0
 8009ce4:	1850      	adds	r0, r2, r1
 8009ce6:	4283      	cmp	r3, r0
 8009ce8:	6011      	str	r1, [r2, #0]
 8009cea:	d1e0      	bne.n	8009cae <_free_r+0x22>
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	4401      	add	r1, r0
 8009cf2:	6011      	str	r1, [r2, #0]
 8009cf4:	6053      	str	r3, [r2, #4]
 8009cf6:	e7da      	b.n	8009cae <_free_r+0x22>
 8009cf8:	d902      	bls.n	8009d00 <_free_r+0x74>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	e7d6      	b.n	8009cae <_free_r+0x22>
 8009d00:	6820      	ldr	r0, [r4, #0]
 8009d02:	1821      	adds	r1, r4, r0
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf01      	itttt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	1809      	addeq	r1, r1, r0
 8009d0e:	6021      	streq	r1, [r4, #0]
 8009d10:	6063      	str	r3, [r4, #4]
 8009d12:	6054      	str	r4, [r2, #4]
 8009d14:	e7cb      	b.n	8009cae <_free_r+0x22>
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	20001514 	.word	0x20001514

08009d1c <sbrk_aligned>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	4e0e      	ldr	r6, [pc, #56]	; (8009d58 <sbrk_aligned+0x3c>)
 8009d20:	460c      	mov	r4, r1
 8009d22:	6831      	ldr	r1, [r6, #0]
 8009d24:	4605      	mov	r5, r0
 8009d26:	b911      	cbnz	r1, 8009d2e <sbrk_aligned+0x12>
 8009d28:	f000 f88c 	bl	8009e44 <_sbrk_r>
 8009d2c:	6030      	str	r0, [r6, #0]
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4628      	mov	r0, r5
 8009d32:	f000 f887 	bl	8009e44 <_sbrk_r>
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	d00a      	beq.n	8009d50 <sbrk_aligned+0x34>
 8009d3a:	1cc4      	adds	r4, r0, #3
 8009d3c:	f024 0403 	bic.w	r4, r4, #3
 8009d40:	42a0      	cmp	r0, r4
 8009d42:	d007      	beq.n	8009d54 <sbrk_aligned+0x38>
 8009d44:	1a21      	subs	r1, r4, r0
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 f87c 	bl	8009e44 <_sbrk_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d101      	bne.n	8009d54 <sbrk_aligned+0x38>
 8009d50:	f04f 34ff 	mov.w	r4, #4294967295
 8009d54:	4620      	mov	r0, r4
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	20001518 	.word	0x20001518

08009d5c <_malloc_r>:
 8009d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	1ccd      	adds	r5, r1, #3
 8009d62:	f025 0503 	bic.w	r5, r5, #3
 8009d66:	3508      	adds	r5, #8
 8009d68:	2d0c      	cmp	r5, #12
 8009d6a:	bf38      	it	cc
 8009d6c:	250c      	movcc	r5, #12
 8009d6e:	2d00      	cmp	r5, #0
 8009d70:	4607      	mov	r7, r0
 8009d72:	db01      	blt.n	8009d78 <_malloc_r+0x1c>
 8009d74:	42a9      	cmp	r1, r5
 8009d76:	d905      	bls.n	8009d84 <_malloc_r+0x28>
 8009d78:	230c      	movs	r3, #12
 8009d7a:	2600      	movs	r6, #0
 8009d7c:	603b      	str	r3, [r7, #0]
 8009d7e:	4630      	mov	r0, r6
 8009d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d84:	4e2e      	ldr	r6, [pc, #184]	; (8009e40 <_malloc_r+0xe4>)
 8009d86:	f000 f88d 	bl	8009ea4 <__malloc_lock>
 8009d8a:	6833      	ldr	r3, [r6, #0]
 8009d8c:	461c      	mov	r4, r3
 8009d8e:	bb34      	cbnz	r4, 8009dde <_malloc_r+0x82>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4638      	mov	r0, r7
 8009d94:	f7ff ffc2 	bl	8009d1c <sbrk_aligned>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	d14d      	bne.n	8009e3a <_malloc_r+0xde>
 8009d9e:	6834      	ldr	r4, [r6, #0]
 8009da0:	4626      	mov	r6, r4
 8009da2:	2e00      	cmp	r6, #0
 8009da4:	d140      	bne.n	8009e28 <_malloc_r+0xcc>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	4631      	mov	r1, r6
 8009daa:	4638      	mov	r0, r7
 8009dac:	eb04 0803 	add.w	r8, r4, r3
 8009db0:	f000 f848 	bl	8009e44 <_sbrk_r>
 8009db4:	4580      	cmp	r8, r0
 8009db6:	d13a      	bne.n	8009e2e <_malloc_r+0xd2>
 8009db8:	6821      	ldr	r1, [r4, #0]
 8009dba:	3503      	adds	r5, #3
 8009dbc:	1a6d      	subs	r5, r5, r1
 8009dbe:	f025 0503 	bic.w	r5, r5, #3
 8009dc2:	3508      	adds	r5, #8
 8009dc4:	2d0c      	cmp	r5, #12
 8009dc6:	bf38      	it	cc
 8009dc8:	250c      	movcc	r5, #12
 8009dca:	4638      	mov	r0, r7
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7ff ffa5 	bl	8009d1c <sbrk_aligned>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d02b      	beq.n	8009e2e <_malloc_r+0xd2>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	442b      	add	r3, r5
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	e00e      	b.n	8009dfc <_malloc_r+0xa0>
 8009dde:	6822      	ldr	r2, [r4, #0]
 8009de0:	1b52      	subs	r2, r2, r5
 8009de2:	d41e      	bmi.n	8009e22 <_malloc_r+0xc6>
 8009de4:	2a0b      	cmp	r2, #11
 8009de6:	d916      	bls.n	8009e16 <_malloc_r+0xba>
 8009de8:	1961      	adds	r1, r4, r5
 8009dea:	42a3      	cmp	r3, r4
 8009dec:	6025      	str	r5, [r4, #0]
 8009dee:	bf18      	it	ne
 8009df0:	6059      	strne	r1, [r3, #4]
 8009df2:	6863      	ldr	r3, [r4, #4]
 8009df4:	bf08      	it	eq
 8009df6:	6031      	streq	r1, [r6, #0]
 8009df8:	5162      	str	r2, [r4, r5]
 8009dfa:	604b      	str	r3, [r1, #4]
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f104 060b 	add.w	r6, r4, #11
 8009e02:	f000 f855 	bl	8009eb0 <__malloc_unlock>
 8009e06:	f026 0607 	bic.w	r6, r6, #7
 8009e0a:	1d23      	adds	r3, r4, #4
 8009e0c:	1af2      	subs	r2, r6, r3
 8009e0e:	d0b6      	beq.n	8009d7e <_malloc_r+0x22>
 8009e10:	1b9b      	subs	r3, r3, r6
 8009e12:	50a3      	str	r3, [r4, r2]
 8009e14:	e7b3      	b.n	8009d7e <_malloc_r+0x22>
 8009e16:	6862      	ldr	r2, [r4, #4]
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	bf0c      	ite	eq
 8009e1c:	6032      	streq	r2, [r6, #0]
 8009e1e:	605a      	strne	r2, [r3, #4]
 8009e20:	e7ec      	b.n	8009dfc <_malloc_r+0xa0>
 8009e22:	4623      	mov	r3, r4
 8009e24:	6864      	ldr	r4, [r4, #4]
 8009e26:	e7b2      	b.n	8009d8e <_malloc_r+0x32>
 8009e28:	4634      	mov	r4, r6
 8009e2a:	6876      	ldr	r6, [r6, #4]
 8009e2c:	e7b9      	b.n	8009da2 <_malloc_r+0x46>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	4638      	mov	r0, r7
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	f000 f83c 	bl	8009eb0 <__malloc_unlock>
 8009e38:	e7a1      	b.n	8009d7e <_malloc_r+0x22>
 8009e3a:	6025      	str	r5, [r4, #0]
 8009e3c:	e7de      	b.n	8009dfc <_malloc_r+0xa0>
 8009e3e:	bf00      	nop
 8009e40:	20001514 	.word	0x20001514

08009e44 <_sbrk_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	2300      	movs	r3, #0
 8009e48:	4d05      	ldr	r5, [pc, #20]	; (8009e60 <_sbrk_r+0x1c>)
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	f7f6 ff98 	bl	8000d84 <_sbrk>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d102      	bne.n	8009e5e <_sbrk_r+0x1a>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	b103      	cbz	r3, 8009e5e <_sbrk_r+0x1a>
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	2000151c 	.word	0x2000151c

08009e64 <siprintf>:
 8009e64:	b40e      	push	{r1, r2, r3}
 8009e66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e6a:	b500      	push	{lr}
 8009e6c:	b09c      	sub	sp, #112	; 0x70
 8009e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8009e70:	9002      	str	r0, [sp, #8]
 8009e72:	9006      	str	r0, [sp, #24]
 8009e74:	9107      	str	r1, [sp, #28]
 8009e76:	9104      	str	r1, [sp, #16]
 8009e78:	4808      	ldr	r0, [pc, #32]	; (8009e9c <siprintf+0x38>)
 8009e7a:	4909      	ldr	r1, [pc, #36]	; (8009ea0 <siprintf+0x3c>)
 8009e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e80:	9105      	str	r1, [sp, #20]
 8009e82:	6800      	ldr	r0, [r0, #0]
 8009e84:	a902      	add	r1, sp, #8
 8009e86:	9301      	str	r3, [sp, #4]
 8009e88:	f000 f874 	bl	8009f74 <_svfiprintf_r>
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	9b02      	ldr	r3, [sp, #8]
 8009e90:	701a      	strb	r2, [r3, #0]
 8009e92:	b01c      	add	sp, #112	; 0x70
 8009e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e98:	b003      	add	sp, #12
 8009e9a:	4770      	bx	lr
 8009e9c:	200001c0 	.word	0x200001c0
 8009ea0:	ffff0208 	.word	0xffff0208

08009ea4 <__malloc_lock>:
 8009ea4:	4801      	ldr	r0, [pc, #4]	; (8009eac <__malloc_lock+0x8>)
 8009ea6:	f000 bafb 	b.w	800a4a0 <__retarget_lock_acquire_recursive>
 8009eaa:	bf00      	nop
 8009eac:	20001520 	.word	0x20001520

08009eb0 <__malloc_unlock>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__malloc_unlock+0x8>)
 8009eb2:	f000 baf6 	b.w	800a4a2 <__retarget_lock_release_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	20001520 	.word	0x20001520

08009ebc <__ssputs_r>:
 8009ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	688e      	ldr	r6, [r1, #8]
 8009ec2:	4682      	mov	sl, r0
 8009ec4:	429e      	cmp	r6, r3
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	4690      	mov	r8, r2
 8009eca:	461f      	mov	r7, r3
 8009ecc:	d838      	bhi.n	8009f40 <__ssputs_r+0x84>
 8009ece:	898a      	ldrh	r2, [r1, #12]
 8009ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ed4:	d032      	beq.n	8009f3c <__ssputs_r+0x80>
 8009ed6:	6825      	ldr	r5, [r4, #0]
 8009ed8:	6909      	ldr	r1, [r1, #16]
 8009eda:	3301      	adds	r3, #1
 8009edc:	eba5 0901 	sub.w	r9, r5, r1
 8009ee0:	6965      	ldr	r5, [r4, #20]
 8009ee2:	444b      	add	r3, r9
 8009ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eec:	106d      	asrs	r5, r5, #1
 8009eee:	429d      	cmp	r5, r3
 8009ef0:	bf38      	it	cc
 8009ef2:	461d      	movcc	r5, r3
 8009ef4:	0553      	lsls	r3, r2, #21
 8009ef6:	d531      	bpl.n	8009f5c <__ssputs_r+0xa0>
 8009ef8:	4629      	mov	r1, r5
 8009efa:	f7ff ff2f 	bl	8009d5c <_malloc_r>
 8009efe:	4606      	mov	r6, r0
 8009f00:	b950      	cbnz	r0, 8009f18 <__ssputs_r+0x5c>
 8009f02:	230c      	movs	r3, #12
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295
 8009f08:	f8ca 3000 	str.w	r3, [sl]
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f18:	464a      	mov	r2, r9
 8009f1a:	6921      	ldr	r1, [r4, #16]
 8009f1c:	f7ff fea0 	bl	8009c60 <memcpy>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	6126      	str	r6, [r4, #16]
 8009f2e:	444e      	add	r6, r9
 8009f30:	6026      	str	r6, [r4, #0]
 8009f32:	463e      	mov	r6, r7
 8009f34:	6165      	str	r5, [r4, #20]
 8009f36:	eba5 0509 	sub.w	r5, r5, r9
 8009f3a:	60a5      	str	r5, [r4, #8]
 8009f3c:	42be      	cmp	r6, r7
 8009f3e:	d900      	bls.n	8009f42 <__ssputs_r+0x86>
 8009f40:	463e      	mov	r6, r7
 8009f42:	4632      	mov	r2, r6
 8009f44:	4641      	mov	r1, r8
 8009f46:	6820      	ldr	r0, [r4, #0]
 8009f48:	f000 faba 	bl	800a4c0 <memmove>
 8009f4c:	68a3      	ldr	r3, [r4, #8]
 8009f4e:	2000      	movs	r0, #0
 8009f50:	1b9b      	subs	r3, r3, r6
 8009f52:	60a3      	str	r3, [r4, #8]
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	4433      	add	r3, r6
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	e7db      	b.n	8009f14 <__ssputs_r+0x58>
 8009f5c:	462a      	mov	r2, r5
 8009f5e:	f000 fac9 	bl	800a4f4 <_realloc_r>
 8009f62:	4606      	mov	r6, r0
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d1e1      	bne.n	8009f2c <__ssputs_r+0x70>
 8009f68:	4650      	mov	r0, sl
 8009f6a:	6921      	ldr	r1, [r4, #16]
 8009f6c:	f7ff fe8e 	bl	8009c8c <_free_r>
 8009f70:	e7c7      	b.n	8009f02 <__ssputs_r+0x46>
	...

08009f74 <_svfiprintf_r>:
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	4698      	mov	r8, r3
 8009f7a:	898b      	ldrh	r3, [r1, #12]
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	061b      	lsls	r3, r3, #24
 8009f80:	460d      	mov	r5, r1
 8009f82:	4614      	mov	r4, r2
 8009f84:	b09d      	sub	sp, #116	; 0x74
 8009f86:	d50e      	bpl.n	8009fa6 <_svfiprintf_r+0x32>
 8009f88:	690b      	ldr	r3, [r1, #16]
 8009f8a:	b963      	cbnz	r3, 8009fa6 <_svfiprintf_r+0x32>
 8009f8c:	2140      	movs	r1, #64	; 0x40
 8009f8e:	f7ff fee5 	bl	8009d5c <_malloc_r>
 8009f92:	6028      	str	r0, [r5, #0]
 8009f94:	6128      	str	r0, [r5, #16]
 8009f96:	b920      	cbnz	r0, 8009fa2 <_svfiprintf_r+0x2e>
 8009f98:	230c      	movs	r3, #12
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	e0d1      	b.n	800a146 <_svfiprintf_r+0x1d2>
 8009fa2:	2340      	movs	r3, #64	; 0x40
 8009fa4:	616b      	str	r3, [r5, #20]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8009faa:	2320      	movs	r3, #32
 8009fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb0:	2330      	movs	r3, #48	; 0x30
 8009fb2:	f04f 0901 	mov.w	r9, #1
 8009fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a160 <_svfiprintf_r+0x1ec>
 8009fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc2:	4623      	mov	r3, r4
 8009fc4:	469a      	mov	sl, r3
 8009fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fca:	b10a      	cbz	r2, 8009fd0 <_svfiprintf_r+0x5c>
 8009fcc:	2a25      	cmp	r2, #37	; 0x25
 8009fce:	d1f9      	bne.n	8009fc4 <_svfiprintf_r+0x50>
 8009fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8009fd4:	d00b      	beq.n	8009fee <_svfiprintf_r+0x7a>
 8009fd6:	465b      	mov	r3, fp
 8009fd8:	4622      	mov	r2, r4
 8009fda:	4629      	mov	r1, r5
 8009fdc:	4638      	mov	r0, r7
 8009fde:	f7ff ff6d 	bl	8009ebc <__ssputs_r>
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	f000 80aa 	beq.w	800a13c <_svfiprintf_r+0x1c8>
 8009fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fea:	445a      	add	r2, fp
 8009fec:	9209      	str	r2, [sp, #36]	; 0x24
 8009fee:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 80a2 	beq.w	800a13c <_svfiprintf_r+0x1c8>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a002:	f10a 0a01 	add.w	sl, sl, #1
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	9307      	str	r3, [sp, #28]
 800a00a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a00e:	931a      	str	r3, [sp, #104]	; 0x68
 800a010:	4654      	mov	r4, sl
 800a012:	2205      	movs	r2, #5
 800a014:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a018:	4851      	ldr	r0, [pc, #324]	; (800a160 <_svfiprintf_r+0x1ec>)
 800a01a:	f000 fa43 	bl	800a4a4 <memchr>
 800a01e:	9a04      	ldr	r2, [sp, #16]
 800a020:	b9d8      	cbnz	r0, 800a05a <_svfiprintf_r+0xe6>
 800a022:	06d0      	lsls	r0, r2, #27
 800a024:	bf44      	itt	mi
 800a026:	2320      	movmi	r3, #32
 800a028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a02c:	0711      	lsls	r1, r2, #28
 800a02e:	bf44      	itt	mi
 800a030:	232b      	movmi	r3, #43	; 0x2b
 800a032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a036:	f89a 3000 	ldrb.w	r3, [sl]
 800a03a:	2b2a      	cmp	r3, #42	; 0x2a
 800a03c:	d015      	beq.n	800a06a <_svfiprintf_r+0xf6>
 800a03e:	4654      	mov	r4, sl
 800a040:	2000      	movs	r0, #0
 800a042:	f04f 0c0a 	mov.w	ip, #10
 800a046:	9a07      	ldr	r2, [sp, #28]
 800a048:	4621      	mov	r1, r4
 800a04a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a04e:	3b30      	subs	r3, #48	; 0x30
 800a050:	2b09      	cmp	r3, #9
 800a052:	d94e      	bls.n	800a0f2 <_svfiprintf_r+0x17e>
 800a054:	b1b0      	cbz	r0, 800a084 <_svfiprintf_r+0x110>
 800a056:	9207      	str	r2, [sp, #28]
 800a058:	e014      	b.n	800a084 <_svfiprintf_r+0x110>
 800a05a:	eba0 0308 	sub.w	r3, r0, r8
 800a05e:	fa09 f303 	lsl.w	r3, r9, r3
 800a062:	4313      	orrs	r3, r2
 800a064:	46a2      	mov	sl, r4
 800a066:	9304      	str	r3, [sp, #16]
 800a068:	e7d2      	b.n	800a010 <_svfiprintf_r+0x9c>
 800a06a:	9b03      	ldr	r3, [sp, #12]
 800a06c:	1d19      	adds	r1, r3, #4
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	9103      	str	r1, [sp, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	bfbb      	ittet	lt
 800a076:	425b      	neglt	r3, r3
 800a078:	f042 0202 	orrlt.w	r2, r2, #2
 800a07c:	9307      	strge	r3, [sp, #28]
 800a07e:	9307      	strlt	r3, [sp, #28]
 800a080:	bfb8      	it	lt
 800a082:	9204      	strlt	r2, [sp, #16]
 800a084:	7823      	ldrb	r3, [r4, #0]
 800a086:	2b2e      	cmp	r3, #46	; 0x2e
 800a088:	d10c      	bne.n	800a0a4 <_svfiprintf_r+0x130>
 800a08a:	7863      	ldrb	r3, [r4, #1]
 800a08c:	2b2a      	cmp	r3, #42	; 0x2a
 800a08e:	d135      	bne.n	800a0fc <_svfiprintf_r+0x188>
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	3402      	adds	r4, #2
 800a094:	1d1a      	adds	r2, r3, #4
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	9203      	str	r2, [sp, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	bfb8      	it	lt
 800a09e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0a2:	9305      	str	r3, [sp, #20]
 800a0a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a164 <_svfiprintf_r+0x1f0>
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	4650      	mov	r0, sl
 800a0ac:	7821      	ldrb	r1, [r4, #0]
 800a0ae:	f000 f9f9 	bl	800a4a4 <memchr>
 800a0b2:	b140      	cbz	r0, 800a0c6 <_svfiprintf_r+0x152>
 800a0b4:	2340      	movs	r3, #64	; 0x40
 800a0b6:	eba0 000a 	sub.w	r0, r0, sl
 800a0ba:	fa03 f000 	lsl.w	r0, r3, r0
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	3401      	adds	r4, #1
 800a0c2:	4303      	orrs	r3, r0
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ca:	2206      	movs	r2, #6
 800a0cc:	4826      	ldr	r0, [pc, #152]	; (800a168 <_svfiprintf_r+0x1f4>)
 800a0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d2:	f000 f9e7 	bl	800a4a4 <memchr>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d038      	beq.n	800a14c <_svfiprintf_r+0x1d8>
 800a0da:	4b24      	ldr	r3, [pc, #144]	; (800a16c <_svfiprintf_r+0x1f8>)
 800a0dc:	bb1b      	cbnz	r3, 800a126 <_svfiprintf_r+0x1b2>
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	3307      	adds	r3, #7
 800a0e2:	f023 0307 	bic.w	r3, r3, #7
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	9303      	str	r3, [sp, #12]
 800a0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ec:	4433      	add	r3, r6
 800a0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f0:	e767      	b.n	8009fc2 <_svfiprintf_r+0x4e>
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0fa:	e7a5      	b.n	800a048 <_svfiprintf_r+0xd4>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	4619      	mov	r1, r3
 800a104:	3401      	adds	r4, #1
 800a106:	9305      	str	r3, [sp, #20]
 800a108:	4620      	mov	r0, r4
 800a10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a10e:	3a30      	subs	r2, #48	; 0x30
 800a110:	2a09      	cmp	r2, #9
 800a112:	d903      	bls.n	800a11c <_svfiprintf_r+0x1a8>
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0c5      	beq.n	800a0a4 <_svfiprintf_r+0x130>
 800a118:	9105      	str	r1, [sp, #20]
 800a11a:	e7c3      	b.n	800a0a4 <_svfiprintf_r+0x130>
 800a11c:	4604      	mov	r4, r0
 800a11e:	2301      	movs	r3, #1
 800a120:	fb0c 2101 	mla	r1, ip, r1, r2
 800a124:	e7f0      	b.n	800a108 <_svfiprintf_r+0x194>
 800a126:	ab03      	add	r3, sp, #12
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	462a      	mov	r2, r5
 800a12c:	4638      	mov	r0, r7
 800a12e:	4b10      	ldr	r3, [pc, #64]	; (800a170 <_svfiprintf_r+0x1fc>)
 800a130:	a904      	add	r1, sp, #16
 800a132:	f3af 8000 	nop.w
 800a136:	1c42      	adds	r2, r0, #1
 800a138:	4606      	mov	r6, r0
 800a13a:	d1d6      	bne.n	800a0ea <_svfiprintf_r+0x176>
 800a13c:	89ab      	ldrh	r3, [r5, #12]
 800a13e:	065b      	lsls	r3, r3, #25
 800a140:	f53f af2c 	bmi.w	8009f9c <_svfiprintf_r+0x28>
 800a144:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a146:	b01d      	add	sp, #116	; 0x74
 800a148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14c:	ab03      	add	r3, sp, #12
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	462a      	mov	r2, r5
 800a152:	4638      	mov	r0, r7
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <_svfiprintf_r+0x1fc>)
 800a156:	a904      	add	r1, sp, #16
 800a158:	f000 f87c 	bl	800a254 <_printf_i>
 800a15c:	e7eb      	b.n	800a136 <_svfiprintf_r+0x1c2>
 800a15e:	bf00      	nop
 800a160:	0800a660 	.word	0x0800a660
 800a164:	0800a666 	.word	0x0800a666
 800a168:	0800a66a 	.word	0x0800a66a
 800a16c:	00000000 	.word	0x00000000
 800a170:	08009ebd 	.word	0x08009ebd

0800a174 <_printf_common>:
 800a174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a178:	4616      	mov	r6, r2
 800a17a:	4699      	mov	r9, r3
 800a17c:	688a      	ldr	r2, [r1, #8]
 800a17e:	690b      	ldr	r3, [r1, #16]
 800a180:	4607      	mov	r7, r0
 800a182:	4293      	cmp	r3, r2
 800a184:	bfb8      	it	lt
 800a186:	4613      	movlt	r3, r2
 800a188:	6033      	str	r3, [r6, #0]
 800a18a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a18e:	460c      	mov	r4, r1
 800a190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a194:	b10a      	cbz	r2, 800a19a <_printf_common+0x26>
 800a196:	3301      	adds	r3, #1
 800a198:	6033      	str	r3, [r6, #0]
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	0699      	lsls	r1, r3, #26
 800a19e:	bf42      	ittt	mi
 800a1a0:	6833      	ldrmi	r3, [r6, #0]
 800a1a2:	3302      	addmi	r3, #2
 800a1a4:	6033      	strmi	r3, [r6, #0]
 800a1a6:	6825      	ldr	r5, [r4, #0]
 800a1a8:	f015 0506 	ands.w	r5, r5, #6
 800a1ac:	d106      	bne.n	800a1bc <_printf_common+0x48>
 800a1ae:	f104 0a19 	add.w	sl, r4, #25
 800a1b2:	68e3      	ldr	r3, [r4, #12]
 800a1b4:	6832      	ldr	r2, [r6, #0]
 800a1b6:	1a9b      	subs	r3, r3, r2
 800a1b8:	42ab      	cmp	r3, r5
 800a1ba:	dc28      	bgt.n	800a20e <_printf_common+0x9a>
 800a1bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1c0:	1e13      	subs	r3, r2, #0
 800a1c2:	6822      	ldr	r2, [r4, #0]
 800a1c4:	bf18      	it	ne
 800a1c6:	2301      	movne	r3, #1
 800a1c8:	0692      	lsls	r2, r2, #26
 800a1ca:	d42d      	bmi.n	800a228 <_printf_common+0xb4>
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1d4:	47c0      	blx	r8
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d020      	beq.n	800a21c <_printf_common+0xa8>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	68e5      	ldr	r5, [r4, #12]
 800a1de:	f003 0306 	and.w	r3, r3, #6
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	bf18      	it	ne
 800a1e6:	2500      	movne	r5, #0
 800a1e8:	6832      	ldr	r2, [r6, #0]
 800a1ea:	f04f 0600 	mov.w	r6, #0
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	bf08      	it	eq
 800a1f2:	1aad      	subeq	r5, r5, r2
 800a1f4:	6922      	ldr	r2, [r4, #16]
 800a1f6:	bf08      	it	eq
 800a1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bfc4      	itt	gt
 800a200:	1a9b      	subgt	r3, r3, r2
 800a202:	18ed      	addgt	r5, r5, r3
 800a204:	341a      	adds	r4, #26
 800a206:	42b5      	cmp	r5, r6
 800a208:	d11a      	bne.n	800a240 <_printf_common+0xcc>
 800a20a:	2000      	movs	r0, #0
 800a20c:	e008      	b.n	800a220 <_printf_common+0xac>
 800a20e:	2301      	movs	r3, #1
 800a210:	4652      	mov	r2, sl
 800a212:	4649      	mov	r1, r9
 800a214:	4638      	mov	r0, r7
 800a216:	47c0      	blx	r8
 800a218:	3001      	adds	r0, #1
 800a21a:	d103      	bne.n	800a224 <_printf_common+0xb0>
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a224:	3501      	adds	r5, #1
 800a226:	e7c4      	b.n	800a1b2 <_printf_common+0x3e>
 800a228:	2030      	movs	r0, #48	; 0x30
 800a22a:	18e1      	adds	r1, r4, r3
 800a22c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a236:	4422      	add	r2, r4
 800a238:	3302      	adds	r3, #2
 800a23a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a23e:	e7c5      	b.n	800a1cc <_printf_common+0x58>
 800a240:	2301      	movs	r3, #1
 800a242:	4622      	mov	r2, r4
 800a244:	4649      	mov	r1, r9
 800a246:	4638      	mov	r0, r7
 800a248:	47c0      	blx	r8
 800a24a:	3001      	adds	r0, #1
 800a24c:	d0e6      	beq.n	800a21c <_printf_common+0xa8>
 800a24e:	3601      	adds	r6, #1
 800a250:	e7d9      	b.n	800a206 <_printf_common+0x92>
	...

0800a254 <_printf_i>:
 800a254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a258:	7e0f      	ldrb	r7, [r1, #24]
 800a25a:	4691      	mov	r9, r2
 800a25c:	2f78      	cmp	r7, #120	; 0x78
 800a25e:	4680      	mov	r8, r0
 800a260:	460c      	mov	r4, r1
 800a262:	469a      	mov	sl, r3
 800a264:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a26a:	d807      	bhi.n	800a27c <_printf_i+0x28>
 800a26c:	2f62      	cmp	r7, #98	; 0x62
 800a26e:	d80a      	bhi.n	800a286 <_printf_i+0x32>
 800a270:	2f00      	cmp	r7, #0
 800a272:	f000 80d9 	beq.w	800a428 <_printf_i+0x1d4>
 800a276:	2f58      	cmp	r7, #88	; 0x58
 800a278:	f000 80a4 	beq.w	800a3c4 <_printf_i+0x170>
 800a27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a284:	e03a      	b.n	800a2fc <_printf_i+0xa8>
 800a286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a28a:	2b15      	cmp	r3, #21
 800a28c:	d8f6      	bhi.n	800a27c <_printf_i+0x28>
 800a28e:	a101      	add	r1, pc, #4	; (adr r1, 800a294 <_printf_i+0x40>)
 800a290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a294:	0800a2ed 	.word	0x0800a2ed
 800a298:	0800a301 	.word	0x0800a301
 800a29c:	0800a27d 	.word	0x0800a27d
 800a2a0:	0800a27d 	.word	0x0800a27d
 800a2a4:	0800a27d 	.word	0x0800a27d
 800a2a8:	0800a27d 	.word	0x0800a27d
 800a2ac:	0800a301 	.word	0x0800a301
 800a2b0:	0800a27d 	.word	0x0800a27d
 800a2b4:	0800a27d 	.word	0x0800a27d
 800a2b8:	0800a27d 	.word	0x0800a27d
 800a2bc:	0800a27d 	.word	0x0800a27d
 800a2c0:	0800a40f 	.word	0x0800a40f
 800a2c4:	0800a331 	.word	0x0800a331
 800a2c8:	0800a3f1 	.word	0x0800a3f1
 800a2cc:	0800a27d 	.word	0x0800a27d
 800a2d0:	0800a27d 	.word	0x0800a27d
 800a2d4:	0800a431 	.word	0x0800a431
 800a2d8:	0800a27d 	.word	0x0800a27d
 800a2dc:	0800a331 	.word	0x0800a331
 800a2e0:	0800a27d 	.word	0x0800a27d
 800a2e4:	0800a27d 	.word	0x0800a27d
 800a2e8:	0800a3f9 	.word	0x0800a3f9
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	1d1a      	adds	r2, r3, #4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	602a      	str	r2, [r5, #0]
 800a2f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e0a4      	b.n	800a44a <_printf_i+0x1f6>
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	6829      	ldr	r1, [r5, #0]
 800a304:	0606      	lsls	r6, r0, #24
 800a306:	f101 0304 	add.w	r3, r1, #4
 800a30a:	d50a      	bpl.n	800a322 <_printf_i+0xce>
 800a30c:	680e      	ldr	r6, [r1, #0]
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	2e00      	cmp	r6, #0
 800a312:	da03      	bge.n	800a31c <_printf_i+0xc8>
 800a314:	232d      	movs	r3, #45	; 0x2d
 800a316:	4276      	negs	r6, r6
 800a318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a31c:	230a      	movs	r3, #10
 800a31e:	485e      	ldr	r0, [pc, #376]	; (800a498 <_printf_i+0x244>)
 800a320:	e019      	b.n	800a356 <_printf_i+0x102>
 800a322:	680e      	ldr	r6, [r1, #0]
 800a324:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	bf18      	it	ne
 800a32c:	b236      	sxthne	r6, r6
 800a32e:	e7ef      	b.n	800a310 <_printf_i+0xbc>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	6820      	ldr	r0, [r4, #0]
 800a334:	1d19      	adds	r1, r3, #4
 800a336:	6029      	str	r1, [r5, #0]
 800a338:	0601      	lsls	r1, r0, #24
 800a33a:	d501      	bpl.n	800a340 <_printf_i+0xec>
 800a33c:	681e      	ldr	r6, [r3, #0]
 800a33e:	e002      	b.n	800a346 <_printf_i+0xf2>
 800a340:	0646      	lsls	r6, r0, #25
 800a342:	d5fb      	bpl.n	800a33c <_printf_i+0xe8>
 800a344:	881e      	ldrh	r6, [r3, #0]
 800a346:	2f6f      	cmp	r7, #111	; 0x6f
 800a348:	bf0c      	ite	eq
 800a34a:	2308      	moveq	r3, #8
 800a34c:	230a      	movne	r3, #10
 800a34e:	4852      	ldr	r0, [pc, #328]	; (800a498 <_printf_i+0x244>)
 800a350:	2100      	movs	r1, #0
 800a352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a356:	6865      	ldr	r5, [r4, #4]
 800a358:	2d00      	cmp	r5, #0
 800a35a:	bfa8      	it	ge
 800a35c:	6821      	ldrge	r1, [r4, #0]
 800a35e:	60a5      	str	r5, [r4, #8]
 800a360:	bfa4      	itt	ge
 800a362:	f021 0104 	bicge.w	r1, r1, #4
 800a366:	6021      	strge	r1, [r4, #0]
 800a368:	b90e      	cbnz	r6, 800a36e <_printf_i+0x11a>
 800a36a:	2d00      	cmp	r5, #0
 800a36c:	d04d      	beq.n	800a40a <_printf_i+0x1b6>
 800a36e:	4615      	mov	r5, r2
 800a370:	fbb6 f1f3 	udiv	r1, r6, r3
 800a374:	fb03 6711 	mls	r7, r3, r1, r6
 800a378:	5dc7      	ldrb	r7, [r0, r7]
 800a37a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a37e:	4637      	mov	r7, r6
 800a380:	42bb      	cmp	r3, r7
 800a382:	460e      	mov	r6, r1
 800a384:	d9f4      	bls.n	800a370 <_printf_i+0x11c>
 800a386:	2b08      	cmp	r3, #8
 800a388:	d10b      	bne.n	800a3a2 <_printf_i+0x14e>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	07de      	lsls	r6, r3, #31
 800a38e:	d508      	bpl.n	800a3a2 <_printf_i+0x14e>
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	6861      	ldr	r1, [r4, #4]
 800a394:	4299      	cmp	r1, r3
 800a396:	bfde      	ittt	le
 800a398:	2330      	movle	r3, #48	; 0x30
 800a39a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a39e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3a2:	1b52      	subs	r2, r2, r5
 800a3a4:	6122      	str	r2, [r4, #16]
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f8cd a000 	str.w	sl, [sp]
 800a3b0:	aa03      	add	r2, sp, #12
 800a3b2:	f7ff fedf 	bl	800a174 <_printf_common>
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d14c      	bne.n	800a454 <_printf_i+0x200>
 800a3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a3be:	b004      	add	sp, #16
 800a3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c4:	4834      	ldr	r0, [pc, #208]	; (800a498 <_printf_i+0x244>)
 800a3c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3ca:	6829      	ldr	r1, [r5, #0]
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3d2:	6029      	str	r1, [r5, #0]
 800a3d4:	061d      	lsls	r5, r3, #24
 800a3d6:	d514      	bpl.n	800a402 <_printf_i+0x1ae>
 800a3d8:	07df      	lsls	r7, r3, #31
 800a3da:	bf44      	itt	mi
 800a3dc:	f043 0320 	orrmi.w	r3, r3, #32
 800a3e0:	6023      	strmi	r3, [r4, #0]
 800a3e2:	b91e      	cbnz	r6, 800a3ec <_printf_i+0x198>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	f023 0320 	bic.w	r3, r3, #32
 800a3ea:	6023      	str	r3, [r4, #0]
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	e7af      	b.n	800a350 <_printf_i+0xfc>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	f043 0320 	orr.w	r3, r3, #32
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	2378      	movs	r3, #120	; 0x78
 800a3fa:	4828      	ldr	r0, [pc, #160]	; (800a49c <_printf_i+0x248>)
 800a3fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a400:	e7e3      	b.n	800a3ca <_printf_i+0x176>
 800a402:	0659      	lsls	r1, r3, #25
 800a404:	bf48      	it	mi
 800a406:	b2b6      	uxthmi	r6, r6
 800a408:	e7e6      	b.n	800a3d8 <_printf_i+0x184>
 800a40a:	4615      	mov	r5, r2
 800a40c:	e7bb      	b.n	800a386 <_printf_i+0x132>
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	6826      	ldr	r6, [r4, #0]
 800a412:	1d18      	adds	r0, r3, #4
 800a414:	6961      	ldr	r1, [r4, #20]
 800a416:	6028      	str	r0, [r5, #0]
 800a418:	0635      	lsls	r5, r6, #24
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	d501      	bpl.n	800a422 <_printf_i+0x1ce>
 800a41e:	6019      	str	r1, [r3, #0]
 800a420:	e002      	b.n	800a428 <_printf_i+0x1d4>
 800a422:	0670      	lsls	r0, r6, #25
 800a424:	d5fb      	bpl.n	800a41e <_printf_i+0x1ca>
 800a426:	8019      	strh	r1, [r3, #0]
 800a428:	2300      	movs	r3, #0
 800a42a:	4615      	mov	r5, r2
 800a42c:	6123      	str	r3, [r4, #16]
 800a42e:	e7ba      	b.n	800a3a6 <_printf_i+0x152>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	2100      	movs	r1, #0
 800a434:	1d1a      	adds	r2, r3, #4
 800a436:	602a      	str	r2, [r5, #0]
 800a438:	681d      	ldr	r5, [r3, #0]
 800a43a:	6862      	ldr	r2, [r4, #4]
 800a43c:	4628      	mov	r0, r5
 800a43e:	f000 f831 	bl	800a4a4 <memchr>
 800a442:	b108      	cbz	r0, 800a448 <_printf_i+0x1f4>
 800a444:	1b40      	subs	r0, r0, r5
 800a446:	6060      	str	r0, [r4, #4]
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	6123      	str	r3, [r4, #16]
 800a44c:	2300      	movs	r3, #0
 800a44e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a452:	e7a8      	b.n	800a3a6 <_printf_i+0x152>
 800a454:	462a      	mov	r2, r5
 800a456:	4649      	mov	r1, r9
 800a458:	4640      	mov	r0, r8
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	47d0      	blx	sl
 800a45e:	3001      	adds	r0, #1
 800a460:	d0ab      	beq.n	800a3ba <_printf_i+0x166>
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	079b      	lsls	r3, r3, #30
 800a466:	d413      	bmi.n	800a490 <_printf_i+0x23c>
 800a468:	68e0      	ldr	r0, [r4, #12]
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	4298      	cmp	r0, r3
 800a46e:	bfb8      	it	lt
 800a470:	4618      	movlt	r0, r3
 800a472:	e7a4      	b.n	800a3be <_printf_i+0x16a>
 800a474:	2301      	movs	r3, #1
 800a476:	4632      	mov	r2, r6
 800a478:	4649      	mov	r1, r9
 800a47a:	4640      	mov	r0, r8
 800a47c:	47d0      	blx	sl
 800a47e:	3001      	adds	r0, #1
 800a480:	d09b      	beq.n	800a3ba <_printf_i+0x166>
 800a482:	3501      	adds	r5, #1
 800a484:	68e3      	ldr	r3, [r4, #12]
 800a486:	9903      	ldr	r1, [sp, #12]
 800a488:	1a5b      	subs	r3, r3, r1
 800a48a:	42ab      	cmp	r3, r5
 800a48c:	dcf2      	bgt.n	800a474 <_printf_i+0x220>
 800a48e:	e7eb      	b.n	800a468 <_printf_i+0x214>
 800a490:	2500      	movs	r5, #0
 800a492:	f104 0619 	add.w	r6, r4, #25
 800a496:	e7f5      	b.n	800a484 <_printf_i+0x230>
 800a498:	0800a671 	.word	0x0800a671
 800a49c:	0800a682 	.word	0x0800a682

0800a4a0 <__retarget_lock_acquire_recursive>:
 800a4a0:	4770      	bx	lr

0800a4a2 <__retarget_lock_release_recursive>:
 800a4a2:	4770      	bx	lr

0800a4a4 <memchr>:
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	b2c9      	uxtb	r1, r1
 800a4aa:	4402      	add	r2, r0
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	d101      	bne.n	800a4b6 <memchr+0x12>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	e003      	b.n	800a4be <memchr+0x1a>
 800a4b6:	7804      	ldrb	r4, [r0, #0]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	428c      	cmp	r4, r1
 800a4bc:	d1f6      	bne.n	800a4ac <memchr+0x8>
 800a4be:	bd10      	pop	{r4, pc}

0800a4c0 <memmove>:
 800a4c0:	4288      	cmp	r0, r1
 800a4c2:	b510      	push	{r4, lr}
 800a4c4:	eb01 0402 	add.w	r4, r1, r2
 800a4c8:	d902      	bls.n	800a4d0 <memmove+0x10>
 800a4ca:	4284      	cmp	r4, r0
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	d807      	bhi.n	800a4e0 <memmove+0x20>
 800a4d0:	1e43      	subs	r3, r0, #1
 800a4d2:	42a1      	cmp	r1, r4
 800a4d4:	d008      	beq.n	800a4e8 <memmove+0x28>
 800a4d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4de:	e7f8      	b.n	800a4d2 <memmove+0x12>
 800a4e0:	4601      	mov	r1, r0
 800a4e2:	4402      	add	r2, r0
 800a4e4:	428a      	cmp	r2, r1
 800a4e6:	d100      	bne.n	800a4ea <memmove+0x2a>
 800a4e8:	bd10      	pop	{r4, pc}
 800a4ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4f2:	e7f7      	b.n	800a4e4 <memmove+0x24>

0800a4f4 <_realloc_r>:
 800a4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	4614      	mov	r4, r2
 800a4fc:	460e      	mov	r6, r1
 800a4fe:	b921      	cbnz	r1, 800a50a <_realloc_r+0x16>
 800a500:	4611      	mov	r1, r2
 800a502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a506:	f7ff bc29 	b.w	8009d5c <_malloc_r>
 800a50a:	b92a      	cbnz	r2, 800a518 <_realloc_r+0x24>
 800a50c:	f7ff fbbe 	bl	8009c8c <_free_r>
 800a510:	4625      	mov	r5, r4
 800a512:	4628      	mov	r0, r5
 800a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a518:	f000 f81b 	bl	800a552 <_malloc_usable_size_r>
 800a51c:	4284      	cmp	r4, r0
 800a51e:	4607      	mov	r7, r0
 800a520:	d802      	bhi.n	800a528 <_realloc_r+0x34>
 800a522:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a526:	d812      	bhi.n	800a54e <_realloc_r+0x5a>
 800a528:	4621      	mov	r1, r4
 800a52a:	4640      	mov	r0, r8
 800a52c:	f7ff fc16 	bl	8009d5c <_malloc_r>
 800a530:	4605      	mov	r5, r0
 800a532:	2800      	cmp	r0, #0
 800a534:	d0ed      	beq.n	800a512 <_realloc_r+0x1e>
 800a536:	42bc      	cmp	r4, r7
 800a538:	4622      	mov	r2, r4
 800a53a:	4631      	mov	r1, r6
 800a53c:	bf28      	it	cs
 800a53e:	463a      	movcs	r2, r7
 800a540:	f7ff fb8e 	bl	8009c60 <memcpy>
 800a544:	4631      	mov	r1, r6
 800a546:	4640      	mov	r0, r8
 800a548:	f7ff fba0 	bl	8009c8c <_free_r>
 800a54c:	e7e1      	b.n	800a512 <_realloc_r+0x1e>
 800a54e:	4635      	mov	r5, r6
 800a550:	e7df      	b.n	800a512 <_realloc_r+0x1e>

0800a552 <_malloc_usable_size_r>:
 800a552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a556:	1f18      	subs	r0, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	bfbc      	itt	lt
 800a55c:	580b      	ldrlt	r3, [r1, r0]
 800a55e:	18c0      	addlt	r0, r0, r3
 800a560:	4770      	bx	lr
	...

0800a564 <_init>:
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	bf00      	nop
 800a568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56a:	bc08      	pop	{r3}
 800a56c:	469e      	mov	lr, r3
 800a56e:	4770      	bx	lr

0800a570 <_fini>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	bf00      	nop
 800a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a576:	bc08      	pop	{r3}
 800a578:	469e      	mov	lr, r3
 800a57a:	4770      	bx	lr
